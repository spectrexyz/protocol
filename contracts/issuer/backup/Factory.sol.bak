// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.7.0;

import "../distribution/sBootstrappingPool.sol";


pragma solidity ^0.7.0;
pragma experimental ABIEncoderV2;

import "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol";
import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
import "./sBootstrappingPool.sol";

contract SpectralizationBootstrappingPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
    IERC20 public immutable WETH;

    constructor(IVault vault, IERC20 _WETH) BasePoolSplitCodeFactory(vault, type(sBootstrappingPool).creationCode) {
        WETH = _WETH;
    }


    function create(
        string memory name,
        string memory symbol,
        IERC20 sERC20,
        uint256 sERC20MaxWeight,
        uint256 sERC20MinWeight,
        uint256 swapFeePercentage,
        address owner,
    ) external returns (address) {
        (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) = getPauseConfiguration();

        bool sERC20IsToken0 = sERC20 <= WETH ? true : false;

        return
            _create(
                abi.encode(
                    getVault(),
                    name,
                    symbol,
                    sERC20IsToken 0 ? sERC20 : WETH,
                    sERC20IsToken 0 ? WETH: sERC20,
                    swapFeePercentage,
                    pauseWindowDuration,
                    bufferPeriodDuration,
                    sERC20IsToken0
                )
            );
    }
}

// contract Factory {
//     IVault private immutable _vault;
//     IERC20 private immutable _weth;

//     constructor(
//         address vault,
//         address weth
//     ) {
//         _vault = IVault(vault);
//         _weth = IERC20(weth);
//     }

//     function deploy(
//         address sERC20,
//         string memory name,
//         string memory symbol
//     ) external returns (sBootstrappingPool) {
//         return new sBootstrappingPool(_vault, name, symbol, IERC20(sERC20), _weth, 0, 0, 10, 0, 0, true);
//     }

// }
