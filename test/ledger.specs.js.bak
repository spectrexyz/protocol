const { expect } = require('chai');
const { deployContract, loadFixture } = require('ethereum-waffle');
const { ERC721, Ledger, NFTKind, approve } = require('./helpers');

describe('SpectralizeSafe', () => {
  let ctx, tx, receipt, admin, locker, minter, owner, spectrum, others;

  const setup = async () => {
    ctx = {
      collection: await deployContract(admin, ERC721, ['Spectralize', 'SPC', 'ipfs://Qm.../']),
      ledger: await deployContract(admin, Ledger),
    };

    await ctx.collection.grantRole(await ctx.collection.MINTER_ROLE(), minter.address);
    // await ctx.safe.grantRole(await ctx.safe.LOCKER_ROLE(), locker.address);

    const _tx = await ctx.collection.mint(owner.address);
    const _receipt = await _tx.wait();
    ctx.tokenId = _receipt.events[0].args.tokenId.toString();
  };

  before(async () => {
    [admin, locker, minter, owner, spectrum, ...others] = await ethers.getSigners();
  });

  describe('# spectralize', () => {
    describe('» sender has FACTORY_ROLE', () => {
      describe('» NFT is not locked yet', () => {
        before(async () => {
          await loadFixture(setup);
          // await approve(ctx, owner, ctx.safe.address);
          // ctx.safe = ctx.safe.connect(locker);
        });

        it('it gives address', async () => {
          console.log(await ctx.ledger.addressOf(ctx.collection.address, ctx.tokenId, 'Spectre Token', '$SPCTR', 10000));
          tx = await ctx.ledger.spectralize(ctx.collection.address, ctx.tokenId, 10000, 'Spectre Token', '$SPCTR');
          receipt = await tx.wait();
          console.log(receipt.events[2].args.spectre);
        });

        // it('it locks NFT', async () => {
        //   const NFT = await ctx.safe.locked(ctx.collection.address, ctx.tokenId);

        //   expect(NFT.isLocked).to.equal(true);
        //   expect(NFT.kind).to.equal(NFTKind.ERC721);
        //   expect(NFT.owner).to.equal(owner.address);
        //   expect(NFT.spectrum).to.equal(spectrum.address);
        // });

        // it('it emits a Lock event', async () => {
        //   await expect(tx)
        //     .to.emit(ctx.safe, 'Lock')
        //     .withArgs(ctx.collection.address, ctx.tokenId, owner.address, spectrum.address);
        // });
      });
    });
  });
});
