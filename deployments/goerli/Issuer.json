{
  "address": "0xD8B7df28c96be82AcE3b35Cd56D5Ad4869CBb373",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBVault",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "contract IFractionalizationBootstrappingPoolFactory",
          "name": "poolFactory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "splitter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "AcceptProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "Close",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "CreateProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "EnableFlashIssuance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Issue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IFractionalizationBootstrappingPool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sMaxNormalizedWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sMinNormalizedWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "RejectProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "SetBank",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        }
      ],
      "name": "SetReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawProposal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLOSE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUNDRED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "acceptProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lifespan",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "enableFlashIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "issuanceOf",
      "outputs": [
        {
          "internalType": "enum Issuances.State",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "contract IFractionalizationBootstrappingPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nbOfProposals",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "flash",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "sERC20IsToken0",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFactory",
      "outputs": [
        {
          "internalType": "contract IFractionalizationBootstrappingPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "priceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalFor",
      "outputs": [
        {
          "internalType": "enum Proposals.State",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sMaxNormalizedWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sMinNormalizedWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "flash",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "rejectProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        }
      ],
      "name": "setBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee_",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        }
      ],
      "name": "setReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "enum IIssuer.TwapKind",
          "name": "kind",
          "type": "uint8"
        }
      ],
      "name": "twapOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IBVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "withdrawProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x39d30086eb7c3418803222792d2336fae1c7a78fd90b20f4c8f3cc1a405d25bd",
  "receipt": {
    "to": null,
    "from": "0xF2f2fbbb273210a03e87bb462C31d45131A4C1ee",
    "contractAddress": "0xD8B7df28c96be82AcE3b35Cd56D5Ad4869CBb373",
    "transactionIndex": 11,
    "gasUsed": "4067379",
    "logsBloom": "0x
    "blockHash": "0xaf041071d5dbc359b717a28f7b35ca9861c026d462786547ffe8d85867c0d5c6",
    "transactionHash": "0x39d30086eb7c3418803222792d2336fae1c7a78fd90b20f4c8f3cc1a405d25bd",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 8749652,
        "transactionHash": "0x39d30086eb7c3418803222792d2336fae1c7a78fd90b20f4c8f3cc1a405d25bd",
        "address": "0xD8B7df28c96be82AcE3b35Cd56D5Ad4869CBb373",
        "topics": [
          "0x10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067"
        ],
        "data": "0x0000000000000000000000008873b045d40a458e46e356a96279ae1820a898ba",
        "logIndex": 3,
        "blockHash": "0xaf041071d5dbc359b717a28f7b35ca9861c026d462786547ffe8d85867c0d5c6"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 8749652,
        "transactionHash": "0x39d30086eb7c3418803222792d2336fae1c7a78fd90b20f4c8f3cc1a405d25bd",
        "address": "0xD8B7df28c96be82AcE3b35Cd56D5Ad4869CBb373",
        "topics": [
          "0xdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000029a2241af62c0000",
        "logIndex": 4,
        "blockHash": "0xaf041071d5dbc359b717a28f7b35ca9861c026d462786547ffe8d85867c0d5c6"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 8749652,
        "transactionHash": "0x39d30086eb7c3418803222792d2336fae1c7a78fd90b20f4c8f3cc1a405d25bd",
        "address": "0xD8B7df28c96be82AcE3b35Cd56D5Ad4869CBb373",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f2f2fbbb273210a03e87bb462c31d45131a4c1ee",
          "0x000000000000000000000000f2f2fbbb273210a03e87bb462c31d45131a4c1ee"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xaf041071d5dbc359b717a28f7b35ca9861c026d462786547ffe8d85867c0d5c6"
      }
    ],
    "blockNumber": 8749652,
    "cumulativeGasUsed": "4437796",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    "0xfBc9b45d81DdB05a82FC7c994a609306BB75D457",
    "0x8a3f0E296a3Fe4Fc286A865b33Be4DcAa9E113Da",
    "0x8873b045d40a458e46e356a96279ae1820a898ba",
    "3000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "b7701e0630858850d0c673eb40dacacf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"contract IFractionalizationBootstrappingPoolFactory\",\"name\":\"poolFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"splitter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"AcceptProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"CreateProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"EnableFlashIssuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IFractionalizationBootstrappingPool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sMaxNormalizedWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sMinNormalizedWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"RejectProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"SetBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"SetReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"WithdrawProposal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifespan\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"enableFlashIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"issuanceOf\",\"outputs\":[{\"internalType\":\"enum Issuances.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"contract IFractionalizationBootstrappingPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nbOfProposals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flash\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sERC20IsToken0\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"contract IFractionalizationBootstrappingPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalFor\",\"outputs\":[{\"internalType\":\"enum Proposals.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sMaxNormalizedWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sMinNormalizedWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flash\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"rejectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"setReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"enum IIssuer.TwapKind\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"twapOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"withdrawProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptProposal(address,uint256)\":{\"params\":{\"proposalId\":\"The id of the issuance proposal.\",\"sERC20\":\"The sERC20 which was proposed to be issued.\"}},\"close(address)\":{\"params\":{\"sERC20\":\"The sERC20 whose issuance to close.\"}},\"createProposal(address,uint256,uint256)\":{\"details\":\"- We do not check that sERC20.cap() > sERC20.totalSupply().      - Indeed, to make sure the transaction does not revert, we would need to take both the price, LP reward and allocation into consideration.      - That would involve a lot of un-necessary computations as the sERC20 reverts in such a situation anyhow.\",\"params\":{\"lifespan\":\"The lifespan of the proposal [in seconds].\",\"price\":\"The price at which sERC20s are proposed to be issued [in sERC20 per ETH].\",\"sERC20\":\"The sERC20 to issue.\"}},\"enableFlashIssuance(address)\":{\"params\":{\"sERC20\":\"The sERC20 to enable flash issuance for.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"issuanceOf(address)\":{\"params\":{\"sERC20\":\"The sERC20 whose issuance is queried.\"}},\"issue(address,uint256)\":{\"details\":\"- We do not check that sERC20.cap() > sERC20.totalSupply().      - Indeed, to make sure the transaction does not revert, we would need to take both the price, LP reward and allocation into consideration.      - That would involve a lot of un-necessary computations as the sERC20 reverts in such a situation anyhow.\",\"params\":{\"expected\":\"The minimum amount of sERC20 to issue [reverts otherwise].\"}},\"priceOf(address)\":{\"params\":{\"sERC20\":\"The sERC20 whose current issuance price is to be returned.\"}},\"register(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool)\":{\"details\":\"- We do not check neither that:        - `sERC20` actually is an sERC20        - nor that this contract is granted MINT_ROLE over `sERC20` to save gas.      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations and self-computing `allocation`, are supposed to be        granted REGISTER_ROLE.      - Pool-related parameters are checked by the FractionalizationBootstrappingPool's constructor.      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.\",\"params\":{\"allocation\":\"The pre-allocated percentage of sERC20s [expressed with 1e18 decimals].\",\"fee\":\"The issuance fee.\",\"flash\":\"True if flash issuance is enabled, false otherwise.\",\"guardian\":\"The account authorized to enable flash issuance and accept / reject proposals otherwise [also receives ETH proceeds].\",\"reserve\":\"The reserve price below which sERC20 tokens can be issued [expressed in sERC20 per ETH and 1e18 decimals].\",\"sERC20\":\"The sERC20 to initiate the issuance of.\",\"sMaxNormalizedWeight\":\"The maximum normalized weight of the sERC20 in the FractionalizationBootstrappingPool to be deployed.\",\"sMinNormalizedWeight\":\"The minimum normalized weight of the sERC20 in the FractionalizationBootstrappingPool to be deployed.\",\"swapFeePercentage\":\"The swap fee of the FractionalizationBootstrappingPool to be deployed [expressed with 1e16 decimals].\"}},\"rejectProposal(address,uint256)\":{\"details\":\"This function is open to re-entrancy for it would be harmless.\",\"params\":{\"proposalId\":\"The id of the issuance proposal.\",\"sERC20\":\"The sERC20 which was proposed to be issued.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"setReserve(address,uint256)\":{\"params\":{\"reserve\":\"The reserve price below which sERC20 tokens can be issued [expressed in sERC20 per ETH and 1e18 decimals].\",\"sERC20\":\"The sERC20 whose issuance reserve price is updated.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"twapOf(address,uint8)\":{\"params\":{\"kind\":\"TwapKind.ETH to return the TWAP in ETH per sERC20, TwapKind.sERC20 to return the TWAP in sERC20 per ETH.\",\"sERC20\":\"The sERC20 whose TWAP is to be returned.\"}},\"withdrawProposal(address,uint256)\":{\"details\":\"This function is open to re-entrancy for it would be harmless.\",\"params\":{\"proposalId\":\"The id of the issuance proposal.\",\"sERC20\":\"The sERC20 which was proposed to be issued.\"}}},\"title\":\"Issuer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"Return the issuer's WETH.\"},\"acceptProposal(address,uint256)\":{\"notice\":\"Accept proposal #`proposalId` to issue `sERC20` tokens.\"},\"bank()\":{\"notice\":\"Return the issuer's bank.\"},\"close(address)\":{\"notice\":\"Close the issuance of `sERC20`.\"},\"createProposal(address,uint256,uint256)\":{\"notice\":\"Create a proposal to issue `sERC20` tokens at a price of `price` sERC20 per ETH.\"},\"enableFlashIssuance(address)\":{\"notice\":\"Enable flash issuance for `sERC20`.\"},\"issuanceOf(address)\":{\"notice\":\"Return the issuance associated to `sERC20`.\"},\"issue(address,uint256)\":{\"notice\":\"Issue at least `expected` `sERC20` tokens.\"},\"poolFactory()\":{\"notice\":\"Return the issuer's pool factory.\"},\"priceOf(address)\":{\"notice\":\"Return the current issuance price of `sERC20` [in sERC20 per ETH].\"},\"proposalFor(address,uint256)\":{\"notice\":\"Return the proposal #`proposalId` to issue `sERC20` tokens.\"},\"protocolFee()\":{\"notice\":\"Return the issuer's protocol fee.\"},\"register(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool)\":{\"notice\":\"Initiate the issuance of `sERC20`.\"},\"rejectProposal(address,uint256)\":{\"notice\":\"Reject proposal #`proposalId` to issue `sERC20` tokens.\"},\"setBank(address)\":{\"notice\":\"Set the issuer's bank [to which protocol fees are transferred].\"},\"setProtocolFee(uint256)\":{\"notice\":\"Set the issuer's protocol fee [expressed with 1e18 decimals].\"},\"setReserve(address,uint256)\":{\"notice\":\"Set the reserve price for the issuance of `sERC20`.\"},\"splitter()\":{\"notice\":\"Return the issuer's splitter.\"},\"twapOf(address,uint8)\":{\"notice\":\"Return the 24h time-weighted average price of `sERC20`.\"},\"vault()\":{\"notice\":\"Return the issuer's Balancer vault.\"},\"withdrawProposal(address,uint256)\":{\"notice\":\"Withdraw proposal #`proposalId` to issue `sERC20` tokens..\"}},\"notice\":\"Handles the issuance of sERC20 tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/issuer/Issuer.sol\":\"Issuer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/issuer/IIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./interfaces/IBalancer.sol\\\";\\nimport \\\"./interfaces/IFractionalizationBootstrappingPool.sol\\\";\\nimport \\\"./interfaces/IFractionalizationBootstrappingPoolFactory.sol\\\";\\nimport \\\"./libraries/Issuances.sol\\\";\\nimport \\\"../token/sIERC20.sol\\\";\\n\\ninterface IIssuer {\\n    enum TwapKind {\\n        ETH,\\n        sERC20\\n    }\\n\\n    event Register(\\n        sIERC20 indexed sERC20,\\n        address indexed guardian,\\n        IFractionalizationBootstrappingPool pool,\\n        bytes32 poolId,\\n        uint256 sMaxNormalizedWeight,\\n        uint256 sMinNormalizedWeight,\\n        uint256 swapFeePercentage,\\n        uint256 reserve,\\n        uint256 allocation,\\n        uint256 fee\\n    );\\n    event Issue(sIERC20 indexed sERC20, address indexed recipient, uint256 value, uint256 amount);\\n    event CreateProposal(sIERC20 indexed sERC20, uint256 indexed proposalId, address indexed buyer, uint256 value, uint256 price, uint256 expiration);\\n    event AcceptProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\\n    event RejectProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\\n    event WithdrawProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\\n    event Close(sIERC20 indexed sERC20);\\n    event EnableFlashIssuance(sIERC20 indexed sERC20);\\n    event SetReserve(sIERC20 indexed sERC20, uint256 reserve);\\n    event SetBank(address bank);\\n    event SetProtocolFee(uint256 protocolFee);\\n\\n    function register(\\n        sIERC20 sERC20,\\n        address guardian,\\n        uint256 sMaxNormalizedWeight,\\n        uint256 sMinNormalizedWeight,\\n        uint256 swapFeePercentage,\\n        uint256 reserve,\\n        uint256 allocation,\\n        uint256 fee,\\n        bool flash\\n    ) external;\\n\\n    function issue(sIERC20 sERC20, uint256 expected) external payable;\\n\\n    function createProposal(\\n        sIERC20 sERC20,\\n        uint256 price,\\n        uint256 lifespan\\n    ) external payable returns (uint256);\\n\\n    function acceptProposal(sIERC20 sERC20, uint256 proposalId) external;\\n\\n    function rejectProposal(sIERC20 sERC20, uint256 proposalId) external;\\n\\n    function withdrawProposal(sIERC20 sERC20, uint256 proposalId) external;\\n\\n    function close(sIERC20 sERC20) external;\\n\\n    function enableFlashIssuance(sIERC20 sERC20) external;\\n\\n    function setReserve(sIERC20 sERC20, uint256 reserve) external;\\n\\n    function setBank(address bank_) external;\\n\\n    function setProtocolFee(uint256 protocolFee_) external;\\n\\n    function vault() external view returns (IBVault);\\n\\n    function poolFactory() external view returns (IFractionalizationBootstrappingPoolFactory);\\n\\n    function splitter() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function bank() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function issuanceOf(sIERC20 sERC20)\\n        external\\n        view\\n        returns (\\n            Issuances.State state,\\n            address guardian,\\n            IFractionalizationBootstrappingPool pool,\\n            bytes32 poolId,\\n            uint256 reserve,\\n            uint256 allocation,\\n            uint256 fee,\\n            uint256 nbOfProposals,\\n            bool flash,\\n            bool sERC20IsToken0\\n        );\\n\\n    function proposalFor(sIERC20 sERC20, uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            Proposals.State state,\\n            address buyer,\\n            uint256 value,\\n            uint256 price,\\n            uint256 expiration\\n        );\\n\\n    function priceOf(sIERC20 sERC20) external view returns (uint256);\\n\\n    function twapOf(sIERC20 sERC20, TwapKind Kind) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6ff826ea899e10113923eb6f6173f1756a7a834b30dd51942057ca6c3e1334b\",\"license\":\"GPL-3.0\"},\"contracts/issuer/Issuer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IIssuer.sol\\\";\\nimport \\\"./interfaces/IBalancer.sol\\\";\\nimport \\\"./interfaces/IFractionalizationBootstrappingPool.sol\\\";\\nimport \\\"./interfaces/IFractionalizationBootstrappingPoolFactory.sol\\\";\\nimport \\\"./libraries/Issuances.sol\\\";\\nimport \\\"../token/sIERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Issuer\\n * @notice Handles the issuance of sERC20 tokens.\\n */\\ncontract Issuer is Context, AccessControlEnumerable, IIssuer {\\n    using Address for address payable;\\n    using Proposals for Proposals.Proposal;\\n\\n    bytes32 public constant CLOSE_ROLE = keccak256(\\\"CLOSE_ROLE\\\");\\n    bytes32 public constant REGISTER_ROLE = keccak256(\\\"REGISTER_ROLE\\\");\\n    uint256 public constant DECIMALS = 1e18;\\n    uint256 public constant HUNDRED = 1e20;\\n\\n    IBVault private immutable _vault;\\n    IFractionalizationBootstrappingPoolFactory private immutable _poolFactory;\\n    address private immutable _splitter;\\n    address private immutable _WETH;\\n    address private _bank;\\n    uint256 private _protocolFee;\\n    mapping(sIERC20 => Issuances.Issuance) private _issuances;\\n\\n    constructor(\\n        IBVault vault_,\\n        IFractionalizationBootstrappingPoolFactory poolFactory_,\\n        address splitter_,\\n        address bank_,\\n        uint256 protocolFee_\\n    ) {\\n        require(address(vault_) != address(0), \\\"Issuer: vault cannot be the zero address\\\");\\n        require(address(poolFactory_) != address(0), \\\"Issuer: pool factory cannot be the zero address\\\");\\n        require(splitter_ != address(0), \\\"Issuer: splitter cannot be the zero address\\\");\\n        require(bank_ != address(0), \\\"Issuer: bank cannot be the zero address\\\");\\n        require(protocolFee_ < HUNDRED, \\\"Issuer: protocol fee must be inferior to 100%\\\");\\n\\n        _vault = vault_;\\n        _poolFactory = poolFactory_;\\n        _splitter = splitter_;\\n        _WETH = vault_.WETH();\\n        _setBank(bank_);\\n        _setProtocolFee(protocolFee_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Initiate the issuance of `sERC20`.\\n     * @dev - We do not check neither that:\\n     *        - `sERC20` actually is an sERC20\\n     *        - nor that this contract is granted MINT_ROLE over `sERC20`\\n              to save gas.\\n     *      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations and self-computing `allocation`, are supposed to be\\n     *        granted REGISTER_ROLE.\\n     *      - Pool-related parameters are checked by the FractionalizationBootstrappingPool's constructor.\\n     *      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.\\n     * @param sERC20 The sERC20 to initiate the issuance of.\\n     * @param guardian The account authorized to enable flash issuance and accept / reject proposals otherwise [also receives ETH proceeds].\\n     * @param sMaxNormalizedWeight The maximum normalized weight of the sERC20 in the FractionalizationBootstrappingPool to be deployed.\\n     * @param sMinNormalizedWeight The minimum normalized weight of the sERC20 in the FractionalizationBootstrappingPool to be deployed.\\n     * @param swapFeePercentage The swap fee of the FractionalizationBootstrappingPool to be deployed [expressed with 1e16 decimals].\\n     * @param reserve The reserve price below which sERC20 tokens can be issued [expressed in sERC20 per ETH and 1e18 decimals].\\n     * @param allocation The pre-allocated percentage of sERC20s [expressed with 1e18 decimals].\\n     * @param fee The issuance fee.\\n     * @param flash True if flash issuance is enabled, false otherwise.\\n     */\\n    function register(\\n        sIERC20 sERC20,\\n        address guardian,\\n        uint256 sMaxNormalizedWeight,\\n        uint256 sMinNormalizedWeight,\\n        uint256 swapFeePercentage,\\n        uint256 reserve,\\n        uint256 allocation,\\n        uint256 fee,\\n        bool flash\\n    ) external override {\\n        IFractionalizationBootstrappingPool pool;\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n        bool sERC20IsToken0 = address(sERC20) <= _WETH;\\n\\n        require(hasRole(REGISTER_ROLE, _msgSender()), \\\"Issuer: must have REGISTER_ROLE to register\\\");\\n        require(issuance.state == Issuances.State.Null, \\\"Issuer: issuance already registered\\\");\\n        require(guardian != address(0), \\\"Issuer: guardian cannot be the zero address\\\");\\n        require(reserve != 0, \\\"Issuer: reserve price cannot be null\\\");\\n        require(allocation < HUNDRED, \\\"Issuer: allocation must be inferior to 100%\\\");\\n        require(fee < HUNDRED, \\\"Issuer: issuance fee must be inferior to 100%\\\");\\n\\n        if (sERC20IsToken0) {\\n            pool = IFractionalizationBootstrappingPool(\\n                _poolFactory.create(\\n                    \\\"Fractionalization Bootstrapping Pool Token\\\",\\n                    \\\"FBPT\\\",\\n                    address(sERC20),\\n                    _WETH,\\n                    sMaxNormalizedWeight,\\n                    sMinNormalizedWeight,\\n                    swapFeePercentage,\\n                    true\\n                )\\n            );\\n        } else {\\n            pool = IFractionalizationBootstrappingPool(\\n                _poolFactory.create(\\n                    \\\"Fractionalization Bootstrapping Pool Token\\\",\\n                    \\\"FBPT\\\",\\n                    _WETH,\\n                    address(sERC20),\\n                    sMaxNormalizedWeight,\\n                    sMinNormalizedWeight,\\n                    swapFeePercentage,\\n                    false\\n                )\\n            );\\n        }\\n\\n        bytes32 poolId = pool.getPoolId();\\n        issuance.state = Issuances.State.Opened;\\n        issuance.guardian = guardian;\\n        issuance.pool = pool;\\n        issuance.poolId = poolId;\\n        issuance.reserve = reserve;\\n        issuance.allocation = allocation;\\n        issuance.fee = fee;\\n        issuance.sERC20IsToken0 = sERC20IsToken0;\\n\\n        emit Register(sERC20, guardian, pool, poolId, sMaxNormalizedWeight, sMinNormalizedWeight, swapFeePercentage, reserve, allocation, fee);\\n\\n        if (flash) _enableFlashIssuance(sERC20, issuance);\\n    }\\n\\n    /**\\n     * @notice Issue at least `expected` `sERC20` tokens.\\n     * @dev - We do not check that sERC20.cap() > sERC20.totalSupply().\\n     *      - Indeed, to make sure the transaction does not revert, we would need to take both the price, LP reward and allocation into consideration.\\n     *      - That would involve a lot of un-necessary computations as the sERC20 reverts in such a situation anyhow.\\n     * @param expected The minimum amount of sERC20 to issue [reverts otherwise].\\n     */\\n    function issue(sIERC20 sERC20, uint256 expected) external payable override {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n\\n        require(issuance.state == Issuances.State.Opened, \\\"Issuer: invalid issuance state\\\");\\n        require(issuance.flash, \\\"Issuer: flash issuance is disabled\\\");\\n        require(msg.value != 0, \\\"Issuer: issuance value cannot be null\\\");\\n\\n        bool poolIsInitialized = issuance.pool.totalSupply() > 0;\\n        bool sERC20IsToken0 = issuance.sERC20IsToken0;\\n\\n        uint256 price = _priceOf(issuance.pool, issuance.reserve, poolIsInitialized, sERC20IsToken0);\\n        uint256 amount = _issue(sERC20, issuance, _msgSender(), msg.value, price, poolIsInitialized, sERC20IsToken0);\\n\\n        require(amount >= expected, \\\"Issuer: insufficient issuance return\\\");\\n    }\\n\\n    /**\\n     * @notice Create a proposal to issue `sERC20` tokens at a price of `price` sERC20 per ETH.\\n     * @dev - We do not check that sERC20.cap() > sERC20.totalSupply().\\n     *      - Indeed, to make sure the transaction does not revert, we would need to take both the price, LP reward and allocation into consideration.\\n     *      - That would involve a lot of un-necessary computations as the sERC20 reverts in such a situation anyhow.\\n     * @param sERC20 The sERC20 to issue.\\n     * @param price The price at which sERC20s are proposed to be issued [in sERC20 per ETH].\\n     * @param lifespan The lifespan of the proposal [in seconds].\\n     */\\n    function createProposal(\\n        sIERC20 sERC20,\\n        uint256 price,\\n        uint256 lifespan\\n    ) external payable override returns (uint256) {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n        address buyer = _msgSender();\\n\\n        require(issuance.state == Issuances.State.Opened, \\\"Issuer: invalid issuance state\\\");\\n        require(!issuance.flash, \\\"Issuer: flash issuance is enabled\\\");\\n        require(msg.value > 0, \\\"Issuer: issuance value cannot be null\\\");\\n        require(\\n            price > 0 && price <= _priceOf(issuance.pool, issuance.reserve, issuance.pool.totalSupply() > 0, issuance.sERC20IsToken0),\\n            \\\"Issuer: invalid issuance price\\\"\\n        );\\n\\n        uint256 proposalId = issuance.nbOfProposals++;\\n        uint256 expiration = lifespan == 0 ? 0 : block.timestamp + lifespan;\\n        issuance.proposals[proposalId] = Proposals.Proposal({\\n            _state: Proposals.State.Pending,\\n            buyer: buyer,\\n            value: msg.value,\\n            price: price,\\n            expiration: expiration\\n        });\\n\\n        emit CreateProposal(sERC20, proposalId, buyer, msg.value, price, expiration);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @notice Accept proposal #`proposalId` to issue `sERC20` tokens.\\n     * @param sERC20 The sERC20 which was proposed to be issued.\\n     * @param proposalId The id of the issuance proposal.\\n     */\\n    function acceptProposal(sIERC20 sERC20, uint256 proposalId) external override {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n        Proposals.Proposal storage proposal = issuance.proposals[proposalId];\\n\\n        require(_msgSender() == issuance.guardian, \\\"Issuer: must be issuance's guardian to accept proposal\\\");\\n        require(issuance.state == Issuances.State.Opened, \\\"Issuer: invalid issuance state\\\");\\n        require(proposal.state() == Proposals.State.Pending, \\\"Issuer: invalid proposal state\\\");\\n        require(!issuance.flash, \\\"Issuer: flash issuance is enabled\\\");\\n\\n        proposal._state = Proposals.State.Accepted;\\n\\n        emit AcceptProposal(sERC20, proposalId);\\n\\n        _issue(sERC20, issuance, proposal.buyer, proposal.value, proposal.price, issuance.pool.totalSupply() > 0, issuance.sERC20IsToken0);\\n    }\\n\\n    /**\\n     * @notice Reject proposal #`proposalId` to issue `sERC20` tokens.\\n     * @dev This function is open to re-entrancy for it would be harmless.\\n     * @param sERC20 The sERC20 which was proposed to be issued.\\n     * @param proposalId The id of the issuance proposal.\\n     */\\n    function rejectProposal(sIERC20 sERC20, uint256 proposalId) external override {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n        Proposals.Proposal storage proposal = issuance.proposals[proposalId];\\n        Proposals.State state = proposal.state();\\n\\n        require(_msgSender() == issuance.guardian, \\\"Issuer: must be issuance's guardian to reject proposal\\\");\\n        require(state == Proposals.State.Pending || state == Proposals.State.Lapsed, \\\"Issuer: invalid proposal state\\\");\\n\\n        address buyer = proposal.buyer;\\n        uint256 value = proposal.value;\\n        delete issuance.proposals[proposalId];\\n\\n        payable(buyer).sendValue(value);\\n\\n        emit RejectProposal(sERC20, proposalId);\\n    }\\n\\n    /**\\n     * @notice Withdraw proposal #`proposalId` to issue `sERC20` tokens..\\n     * @dev This function is open to re-entrancy for it would be harmless.\\n     * @param sERC20 The sERC20 which was proposed to be issued.\\n     * @param proposalId The id of the issuance proposal.\\n     */\\n    function withdrawProposal(sIERC20 sERC20, uint256 proposalId) external override {\\n        Proposals.Proposal storage proposal = _issuances[sERC20].proposals[proposalId];\\n        Proposals.State state = proposal.state();\\n\\n        require(_msgSender() == proposal.buyer, \\\"Issuer: must be proposal's buyer to withdraw proposal\\\");\\n        require(state == Proposals.State.Pending || state == Proposals.State.Lapsed, \\\"Issuer: invalid proposal state\\\");\\n\\n        address buyer = proposal.buyer;\\n        uint256 value = proposal.value;\\n        delete _issuances[sERC20].proposals[proposalId];\\n\\n        payable(buyer).sendValue(value);\\n\\n        emit WithdrawProposal(sERC20, proposalId);\\n    }\\n\\n    /**\\n     * @notice Close the issuance of `sERC20`.\\n     * @param sERC20 The sERC20 whose issuance to close.\\n     */\\n    function close(sIERC20 sERC20) external override {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n\\n        require(hasRole(CLOSE_ROLE, _msgSender()), \\\"Issuer: must have CLOSE_ROLE to close issuance\\\");\\n        require(issuance.state == Issuances.State.Opened, \\\"Issuer: invalid issuance state\\\");\\n\\n        issuance.state = Issuances.State.Closed;\\n        issuance.pool.close();\\n\\n        emit Close(sERC20);\\n    }\\n\\n    /**\\n     * @notice Enable flash issuance for `sERC20`.\\n     * @param sERC20 The sERC20 to enable flash issuance for.\\n     */\\n    function enableFlashIssuance(sIERC20 sERC20) external override {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n\\n        require(_msgSender() == issuance.guardian, \\\"Issuer: must be issuance's guardian to enable flash issuance\\\");\\n        require(issuance.state == Issuances.State.Opened, \\\"Issuer: invalid issuance state\\\");\\n        require(!issuance.flash, \\\"Issuer: flash issuance already enabled\\\");\\n\\n        _enableFlashIssuance(sERC20, issuance);\\n    }\\n\\n    /**\\n     * @notice Set the reserve price for the issuance of `sERC20`.\\n     * @param sERC20 The sERC20 whose issuance reserve price is updated.\\n     * @param reserve The reserve price below which sERC20 tokens can be issued [expressed in sERC20 per ETH and 1e18 decimals].\\n     */\\n    function setReserve(sIERC20 sERC20, uint256 reserve) external override {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n\\n        require(_msgSender() == issuance.guardian, \\\"Issuer: must be issuance's guardian to set reserve\\\");\\n        require(issuance.state == Issuances.State.Opened, \\\"Issuer: invalid issuance state\\\");\\n        require(reserve != 0, \\\"Issuer: reserve price cannot be null\\\");\\n\\n        issuance.reserve = reserve;\\n\\n        emit SetReserve(sERC20, reserve);\\n    }\\n\\n    /**\\n     * @notice Set the issuer's bank [to which protocol fees are transferred].\\n     */\\n    function setBank(address bank_) external override {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Issuer: must have DEFAULT_ADMIN_ROLE to set bank\\\");\\n        require(bank_ != address(0), \\\"Issuer: bank cannot be the zero address\\\");\\n\\n        _setBank(bank_);\\n    }\\n\\n    /**\\n     * @notice Set the issuer's protocol fee [expressed with 1e18 decimals].\\n     */\\n    function setProtocolFee(uint256 protocolFee_) external override {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Issuer: must have DEFAULT_ADMIN_ROLE to set protocol fee\\\");\\n        require(protocolFee_ < HUNDRED, \\\"Issuer: protocol fee must be inferior to 100%\\\");\\n\\n        _setProtocolFee(protocolFee_);\\n    }\\n\\n    /**\\n     * @notice Return the issuer's Balancer vault.\\n     */\\n    function vault() public view override returns (IBVault) {\\n        return _vault;\\n    }\\n\\n    /**\\n     * @notice Return the issuer's pool factory.\\n     */\\n    function poolFactory() public view override returns (IFractionalizationBootstrappingPoolFactory) {\\n        return _poolFactory;\\n    }\\n\\n    /**\\n     * @notice Return the issuer's splitter.\\n     */\\n    function splitter() public view override returns (address) {\\n        return _splitter;\\n    }\\n\\n    /**\\n     * @notice Return the issuer's WETH.\\n     */\\n    function WETH() public view override returns (address) {\\n        return _WETH;\\n    }\\n\\n    /**\\n     * @notice Return the issuer's bank.\\n     */\\n    function bank() public view override returns (address) {\\n        return _bank;\\n    }\\n\\n    /**\\n     * @notice Return the issuer's protocol fee.\\n     */\\n    function protocolFee() public view override returns (uint256) {\\n        return _protocolFee;\\n    }\\n\\n    /**\\n     * @notice Return the issuance associated to `sERC20`.\\n     * @param sERC20 The sERC20 whose issuance is queried.\\n     */\\n    function issuanceOf(sIERC20 sERC20)\\n        public\\n        view\\n        override\\n        returns (\\n            Issuances.State state,\\n            address guardian,\\n            IFractionalizationBootstrappingPool pool,\\n            bytes32 poolId,\\n            uint256 reserve,\\n            uint256 allocation,\\n            uint256 fee,\\n            uint256 nbOfProposals,\\n            bool flash,\\n            bool sERC20IsToken0\\n        )\\n    {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n\\n        state = issuance.state;\\n        guardian = issuance.guardian;\\n        pool = issuance.pool;\\n        poolId = issuance.poolId;\\n        reserve = issuance.reserve;\\n        allocation = issuance.allocation;\\n        fee = issuance.fee;\\n        nbOfProposals = issuance.nbOfProposals;\\n        flash = issuance.flash;\\n        sERC20IsToken0 = issuance.sERC20IsToken0;\\n    }\\n\\n    /**\\n     * @notice Return the proposal #`proposalId` to issue `sERC20` tokens.\\n     */\\n    function proposalFor(sIERC20 sERC20, uint256 proposalId)\\n        public\\n        view\\n        override\\n        returns (\\n            Proposals.State state,\\n            address buyer,\\n            uint256 value,\\n            uint256 price,\\n            uint256 expiration\\n        )\\n    {\\n        Proposals.Proposal storage proposal = _issuances[sERC20].proposals[proposalId];\\n\\n        state = proposal.state();\\n        buyer = proposal.buyer;\\n        value = proposal.value;\\n        price = proposal.price;\\n        expiration = proposal.expiration;\\n    }\\n\\n    /**\\n     * @notice Return the current issuance price of `sERC20` [in sERC20 per ETH].\\n     * @param sERC20 The sERC20 whose current issuance price is to be returned.\\n     */\\n    function priceOf(sIERC20 sERC20) public view override returns (uint256) {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n\\n        require(issuance.state != Issuances.State.Null, \\\"Issuer: invalid issuance state\\\");\\n\\n        return _priceOf(issuance.pool, issuance.reserve, issuance.pool.totalSupply() > 0, issuance.sERC20IsToken0);\\n    }\\n\\n    /**\\n     * @notice Return the 24h time-weighted average price of `sERC20`.\\n     * @param sERC20 The sERC20 whose TWAP is to be returned.\\n     * @param kind TwapKind.ETH to return the TWAP in ETH per sERC20, TwapKind.sERC20 to return the TWAP in sERC20 per ETH.\\n     */\\n    function twapOf(sIERC20 sERC20, TwapKind kind) public view override returns (uint256) {\\n        Issuances.Issuance storage issuance = _issuances[sERC20];\\n\\n        require(issuance.state != Issuances.State.Null, \\\"Issuer: invalid issuance state\\\");\\n\\n        return _twapOf(issuance.pool, issuance.reserve, kind, issuance.pool.totalSupply() > 0, issuance.sERC20IsToken0);\\n    }\\n\\n    function _issue(\\n        sIERC20 sERC20,\\n        Issuances.Issuance storage issuance,\\n        address buyer,\\n        uint256 value,\\n        uint256 price,\\n        bool poolIsInitialized,\\n        bool sERC20IsToken0\\n    ) private returns (uint256) {\\n        uint256 fee = (value * issuance.fee) / HUNDRED;\\n        uint256 protocolFee_ = ((value - fee) * _protocolFee) / HUNDRED;\\n        uint256 remaining = value - fee - protocolFee_;\\n        uint256 amount = (remaining * price) / DECIMALS;\\n\\n        // pool LP reward\\n        uint256 reward = _doReward(sERC20, issuance, fee, price, poolIsInitialized, sERC20IsToken0);\\n        // mint recipient tokens\\n        sERC20.mint(buyer, amount);\\n        // mint allocation tokens\\n        uint256 allocation = _allocation(issuance.allocation, amount + reward);\\n        if (allocation > 0) sERC20.mint(_splitter, allocation);\\n        // poke weights\\n        issuance.pool.poke();\\n        // collect protocol fee\\n        if (protocolFee_ > 0) payable(_bank).sendValue(protocolFee_);\\n        // pay guardian\\n        payable(issuance.guardian).sendValue(remaining);\\n\\n        emit Issue(sERC20, buyer, value, amount);\\n\\n        return amount;\\n    }\\n\\n    function _enableFlashIssuance(sIERC20 sERC20, Issuances.Issuance storage issuance) private {\\n        issuance.flash = true;\\n\\n        emit EnableFlashIssuance(sERC20);\\n    }\\n\\n    function _setBank(address bank_) private {\\n        _bank = bank_;\\n\\n        emit SetBank(bank_);\\n    }\\n\\n    function _setProtocolFee(uint256 protocolFee_) private {\\n        _protocolFee = protocolFee_;\\n\\n        emit SetProtocolFee(protocolFee_);\\n    }\\n\\n    function _doReward(\\n        sIERC20 sERC20,\\n        Issuances.Issuance storage issuance,\\n        uint256 value,\\n        uint256 price,\\n        bool poolIsInitialized,\\n        bool sERC20IsToken0\\n    ) private returns (uint256) {\\n        IBVault vault_ = _vault;\\n        uint256 reward = _reward(vault_, issuance.pool, issuance.poolId, price, value, poolIsInitialized, sERC20IsToken0);\\n\\n        if (value > 0) {\\n            sERC20.mint(address(this), reward);\\n            sERC20.approve(address(vault_), reward);\\n            vault_.joinPool{value: value}(issuance.poolId, address(this), _bank, _request(sERC20, reward, value, poolIsInitialized, sERC20IsToken0));\\n        }\\n\\n        return reward;\\n    }\\n\\n    function _reward(\\n        IBVault vault_,\\n        IFractionalizationBootstrappingPool pool,\\n        bytes32 poolId,\\n        uint256 price,\\n        uint256 value,\\n        bool poolIsInitialized,\\n        bool sERC20IsToken0\\n    ) private view returns (uint256) {\\n        uint256 reward;\\n\\n        if (!poolIsInitialized) {\\n            uint256[] memory weights = pool.getNormalizedWeights();\\n            if (sERC20IsToken0) reward = (value * price * weights[0]) / (DECIMALS * weights[1]);\\n            else reward = (value * price * weights[1]) / (DECIMALS * weights[0]);\\n        } else {\\n            uint256[2] memory balances = _balances(vault_, poolId, sERC20IsToken0);\\n            reward = (value * balances[0]) / balances[1];\\n        }\\n\\n        return reward;\\n    }\\n\\n    /**\\n     * @notice Return the current sERC20 price [in sERC20 per ETH].\\n     * @dev - All prices are expressed in sERC20 per ETH.\\n     *      - Thus, if `reserve` is lower than `twap`, it means the reserve price in ETH per sERC20 is higher than the TWAP in ETH per sERC20.\\n     */\\n    function _priceOf(\\n        IFractionalizationBootstrappingPool pool,\\n        uint256 reserve,\\n        bool poolIsInitialized,\\n        bool sERC20IsToken0\\n    ) private view returns (uint256) {\\n        uint256 twap = _twapOf(pool, reserve, TwapKind.sERC20, poolIsInitialized, sERC20IsToken0);\\n\\n        if (reserve < twap) return reserve;\\n        else return twap;\\n    }\\n\\n    /**\\n     * @notice Return the 24h time-weighted average price of `issuance`'s sERC20.\\n     * @dev - We do not care about decimals for both ETH and sERC20s have 18 decimals.\\n     *      - See PriceOracle.sol for details.\\n     */\\n    function _twapOf(\\n        IFractionalizationBootstrappingPool pool,\\n        uint256 reserve,\\n        TwapKind kind,\\n        bool poolIsInitialized,\\n        bool sERC20IsToken0\\n    ) private view returns (uint256) {\\n        if (!poolIsInitialized) {\\n            if (kind == TwapKind.ETH) return (DECIMALS * DECIMALS) / reserve;\\n            else if (kind == TwapKind.sERC20) return reserve;\\n            else revert(\\\"Issuer: invalid twap kind\\\");\\n        }\\n\\n        IPriceOracle.OracleAverageQuery[] memory query = new IPriceOracle.OracleAverageQuery[](1);\\n        query[0] = IPriceOracle.OracleAverageQuery({variable: IPriceOracle.Variable.PAIR_PRICE, secs: 1 days, ago: 0});\\n        uint256[] memory prices = pool.getTimeWeightedAverage(query);\\n\\n        if (kind == TwapKind.ETH) {\\n            return !sERC20IsToken0 ? prices[0] : (DECIMALS * DECIMALS) / prices[0];\\n        } else if (kind == TwapKind.sERC20) {\\n            return sERC20IsToken0 ? prices[0] : (DECIMALS * DECIMALS) / prices[0];\\n        } else {\\n            revert(\\\"Issuer: invalid twap kind\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Return [sERC20, WETH] pool's balances.\\n     */\\n    function _balances(\\n        IBVault vault_,\\n        bytes32 poolId,\\n        bool sERC20IsToken0\\n    ) private view returns (uint256[2] memory) {\\n        (, uint256[] memory balances, ) = vault_.getPoolTokens(poolId);\\n\\n        if (sERC20IsToken0) return [balances[0], balances[1]];\\n        else return [balances[1], balances[0]];\\n    }\\n\\n    /**\\n     * @notice Return the amount of tokens to additionally issue to preserve the `allocation` ratio when `amount` sERC20s are issued.\\n     */\\n    function _allocation(uint256 allocation, uint256 amount) private pure returns (uint256) {\\n        return (allocation * amount) / (HUNDRED - allocation);\\n    }\\n\\n    function _request(\\n        sIERC20 sERC20,\\n        uint256 amount,\\n        uint256 value,\\n        bool poolIsInitialized,\\n        bool sERC20IsToken0\\n    ) private pure returns (IBVault.JoinPoolRequest memory) {\\n        IFractionalizationBootstrappingPool.JoinKind kind = poolIsInitialized\\n            ? IFractionalizationBootstrappingPool.JoinKind.REWARD\\n            : IFractionalizationBootstrappingPool.JoinKind.INIT;\\n\\n        IAsset[] memory assets = new IAsset[](2);\\n        uint256[] memory amounts = new uint256[](2);\\n\\n        if (sERC20IsToken0) {\\n            assets[0] = IAsset(address(sERC20));\\n            assets[1] = IAsset(address(0));\\n            amounts[0] = amount;\\n            amounts[1] = value;\\n        } else {\\n            assets[0] = IAsset(address(0));\\n            assets[1] = IAsset(address(sERC20));\\n            amounts[0] = value;\\n            amounts[1] = amount;\\n        }\\n\\n        return IBVault.JoinPoolRequest({assets: assets, maxAmountsIn: amounts, userData: abi.encode(kind, amounts), fromInternalBalance: false});\\n    }\\n}\\n\",\"keccak256\":\"0x19dce1979137dba98d1288a3b9883a58b1cab144e2f7fa4aef2546ecea0d175d\",\"license\":\"GPL-3.0\"},\"contracts/issuer/interfaces/IBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAsset {}\\n\\ninterface IPriceOracle {\\n    enum Variable {\\n        PAIR_PRICE,\\n        BPT_PRICE,\\n        INVARIANT\\n    }\\n\\n    struct OracleAccumulatorQuery {\\n        Variable variable;\\n        uint256 ago;\\n    }\\n\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries) external view returns (uint256[] memory results);\\n\\n    function getLatest(Variable variable) external view returns (uint256);\\n\\n    function getLargestSafeQueryWindow() external view returns (uint256);\\n\\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries) external view returns (int256[] memory results);\\n}\\n\\ninterface IBVault {\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function WETH() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9335c11ab3b2fc2bbb699a53fbd4e7757733ad5767f334c774b91b2ad558726d\",\"license\":\"GPL-3.0\"},\"contracts/issuer/interfaces/IFractionalizationBootstrappingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IBalancer.sol\\\";\\n\\ninterface IFractionalizationBootstrappingPool {\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\\n        REWARD\\n    }\\n\\n    function poke() external;\\n\\n    function close() external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getTimeWeightedAverage(IPriceOracle.OracleAverageQuery[] memory queries) external view returns (uint256[] memory prices);\\n\\n    function getLatest(IPriceOracle.Variable variable) external view returns (uint256);\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function sERC20IsToken0() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6520917306ab40395fbc659e2d465c57285304980072641144084e1b9233a69b\",\"license\":\"GPL-3.0\"},\"contracts/issuer/interfaces/IFractionalizationBootstrappingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\ninterface IFractionalizationBootstrappingPoolFactory {\\n    function create(\\n        string memory name,\\n        string memory symbol,\\n        address token0,\\n        address token1,\\n        uint256 sMaxNormalizedWeight,\\n        uint256 sMinNormalizedWeight,\\n        uint256 swapFeePercentage,\\n        bool sERC20IsToken0\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8708bdf50b32ae767fc886bbfaaf3d2b9ca4d7a4f9eff3dba348ce1023f0c8d9\",\"license\":\"GPL-3.0\"},\"contracts/issuer/libraries/Issuances.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./Proposals.sol\\\";\\nimport \\\"../interfaces/IFractionalizationBootstrappingPool.sol\\\";\\n\\nlibrary Issuances {\\n    enum State {\\n        Null,\\n        Opened,\\n        Closed\\n    }\\n\\n    struct Issuance {\\n        State state;\\n        address guardian;\\n        IFractionalizationBootstrappingPool pool;\\n        bytes32 poolId;\\n        uint256 reserve;\\n        uint256 allocation;\\n        uint256 fee;\\n        uint256 nbOfProposals;\\n        mapping(uint256 => Proposals.Proposal) proposals;\\n        bool flash;\\n        bool sERC20IsToken0;\\n    }\\n}\\n\",\"keccak256\":\"0xedd25c3dd8e62ec7065465f7679bc6a3d92ed82115c57decbdb730cd453506a6\",\"license\":\"GPL-3.0\"},\"contracts/issuer/libraries/Proposals.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\nlibrary Proposals {\\n    enum State {\\n        Null,\\n        Pending,\\n        Accepted,\\n        Lapsed\\n    }\\n\\n    struct Proposal {\\n        State _state;\\n        address buyer;\\n        uint256 value;\\n        uint256 price;\\n        uint256 expiration;\\n    }\\n\\n    function state(Proposal storage proposal) internal view returns (State) {\\n        State _state = proposal._state;\\n        uint256 expiration = proposal.expiration;\\n\\n        if (_state == State.Pending && expiration != 0) {\\n            if (block.timestamp < proposal.expiration) return State.Pending;\\n            else return State.Lapsed;\\n        } else {\\n            return _state;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6fc3fe95705fc20ca02b2d6bb245238fa07d473f757424f886c112f764ddf8c7\",\"license\":\"GPL-3.0\"},\"contracts/token/sIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\ninterface sIERC20 is IAccessControlUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 cap_,\\n        address admin\\n    ) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function snapshot() external returns (uint256);\\n\\n    function onERC1155Transferred(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function vault() external view returns (IVault);\\n\\n    function cap() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1083a2270bbddee6492baa9f1e948df3a8bed67ca1e2e0f365319b64fc69b42a\",\"license\":\"GPL-3.0\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./libraries/Spectres.sol\\\";\\nimport \\\"../token/sIERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IVault {\\n    event Fractionalize(IERC721 indexed collection, uint256 indexed tokenId, uint256 indexed id, sIERC20 sERC20, address broker);\\n    event Unlock(uint256 indexed id, address recipient);\\n\\n    function fractionalize(\\n        IERC721 collection,\\n        uint256 tokenId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 cap,\\n        address admin,\\n        address broker\\n    ) external returns (uint256);\\n\\n    function unlock(\\n        sIERC20 sERC20,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    function setUnavailableURI(string memory unavailableURI_) external;\\n\\n    function setUnlockedURI(string memory unlockedURI_) external;\\n\\n    function onERC20Transferred(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function sERC20Base() external view returns (address);\\n\\n    function unavailableURI() external view returns (string memory);\\n\\n    function unlockedURI() external view returns (string memory);\\n\\n    function isLocked(IERC721 collection, uint256 tokenId) external view returns (bool);\\n\\n    function tokenTypeOf(IERC721 collection, uint256 tokenId) external view returns (uint256);\\n\\n    function spectreOf(uint256 id) external view returns (Spectres.Spectre memory);\\n\\n    function spectreOf(sIERC20 sERC20) external view returns (Spectres.Spectre memory);\\n\\n    function sERC20Of(uint256 id) external pure returns (sIERC20);\\n}\\n\",\"keccak256\":\"0x9335c9ab9e860d32e4f33a6357c31176437a04d9d0abcd50ae50d06410a18765\",\"license\":\"GPL-3.0\"},\"contracts/vault/libraries/Spectres.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary Spectres {\\n    enum State {\\n        Null,\\n        Locked,\\n        Unlocked\\n    }\\n\\n    struct Spectre {\\n        State state;\\n        IERC721 collection;\\n        uint256 tokenId;\\n        address broker;\\n    }\\n}\\n\",\"keccak256\":\"0xb6d2275562829e321e3898a580426c2ad48aeec5105de0ba18166e42c17f638f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102195760003560e01c8063787dce3d1161011d578063b0e21e8a116100b0578063d547741f1161007f578063f3df1e3211610064578063f3df1e3214610710578063f85fc0ab14610741578063fbfa77cf1461075e57600080fd5b8063d547741f146106d0578063df4332b3146106f057600080fd5b8063b0e21e8a1461065b578063b95ed06f14610670578063c74073a114610690578063ca15c873146106b057600080fd5b8063a0058b3d116100ec578063a0058b3d146105d3578063a217fddf146105f3578063ad5c464814610608578063b0913a131461063b57600080fd5b8063787dce3d1461053c578063867904b41461055c5780639010d07c1461056f57806391d148541461058f57600080fd5b80633cd8045e116101b05780635168e1a11161017f57806374f533171161016457806374f53317146104ca57806376cdb03b146104fe57806378250b631461051c57600080fd5b80635168e1a1146104105780636ff74f201461043057600080fd5b80633cd8045e14610342578063400e3d9b146103895780634209f150146103bd5780634219dc40146103dd57600080fd5b80632e0f2625116101ec5780632e0f2625146102d35780632e8bb119146102ef5780632f2ff15d1461030257806336568abe1461032257600080fd5b806301ffc9a71461021e578063090d23b914610253578063248a9ca3146102755780632c32a642146102b3575b600080fd5b34801561022a57600080fd5b5061023e610239366004613c6b565b610791565b60405190151581526020015b60405180910390f35b34801561025f57600080fd5b5061027361026e366004613cc2565b6107ed565b005b34801561028157600080fd5b506102a5610290366004613cdf565b60009081526020819052604090206001015490565b60405190815260200161024a565b3480156102bf57600080fd5b506102736102ce366004613d06565b6108f7565b3480156102df57600080fd5b506102a5670de0b6b3a764000081565b6102a56102fd366004613d8c565b610fd4565b34801561030e57600080fd5b5061027361031d366004613dc1565b611398565b34801561032e57600080fd5b5061027361033d366004613dc1565b6113bf565b34801561034e57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161024a565b34801561039557600080fd5b506102a57f78844962b347caf400e109846dc948d8df0fc5b2f795edb688517fc687580cd481565b3480156103c957600080fd5b506102736103d8366004613df1565b6113e1565b3480156103e957600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610371565b34801561041c57600080fd5b5061027361042b366004613df1565b6116ed565b34801561043c57600080fd5b506104b461044b366004613cc2565b6001600160a01b0390811660009081526004602081905260409091208054600182015460028301546003840154948401546005850154600686015460089096015460ff8087169a610100978890048b169a96909616989497949693959294938282169392041690565b60405161024a9a99989796959493929190613e43565b3480156104d657600080fd5b506102a57fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe81565b34801561050a57600080fd5b506002546001600160a01b0316610371565b34801561052857600080fd5b50610273610537366004613df1565b6118e5565b34801561054857600080fd5b50610273610557366004613cdf565b611a9e565b61027361056a366004613df1565b611ba2565b34801561057b57600080fd5b5061037161058a366004613ea4565b611e62565b34801561059b57600080fd5b5061023e6105aa366004613dc1565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156105df57600080fd5b506102a56105ee366004613ec6565b611e7a565b3480156105ff57600080fd5b506102a5600081565b34801561061457600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610371565b34801561064757600080fd5b50610273610656366004613df1565b611fa5565b34801561066757600080fd5b506003546102a5565b34801561067c57600080fd5b506102a561068b366004613cc2565b612191565b34801561069c57600080fd5b506102736106ab366004613cc2565b6122b1565b3480156106bc57600080fd5b506102a56106cb366004613cdf565b612486565b3480156106dc57600080fd5b506102736106eb366004613dc1565b61249d565b3480156106fc57600080fd5b5061027361070b366004613cc2565b6124a7565b34801561071c57600080fd5b5061073061072b366004613df1565b61262d565b60405161024a959493929190613ef8565b34801561074d57600080fd5b506102a568056bc75e2d6310000081565b34801561076a57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610371565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806107e757506107e7826126b5565b92915050565b6107f86000336105aa565b61086f5760405162461bcd60e51b815260206004820152603060248201527f4973737565723a206d75737420686176652044454641554c545f41444d494e5f60448201527f524f4c4520746f207365742062616e6b0000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b0381166108eb5760405162461bcd60e51b815260206004820152602760248201527f4973737565723a2062616e6b2063616e6e6f7420626520746865207a65726f2060448201527f61646472657373000000000000000000000000000000000000000000000000006064820152608401610866565b6108f48161274c565b50565b6001600160a01b038981166000818152600460205260408120909290917f000000000000000000000000000000000000000000000000000000000000000090911610156109647fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe336105aa565b6109d65760405162461bcd60e51b815260206004820152602b60248201527f4973737565723a206d75737420686176652052454749535445525f524f4c452060448201527f746f2072656769737465720000000000000000000000000000000000000000006064820152608401610866565b6000825460ff1660028111156109ee576109ee613e1d565b14610a615760405162461bcd60e51b815260206004820152602360248201527f4973737565723a2069737375616e636520616c7265616479207265676973746560448201527f72656400000000000000000000000000000000000000000000000000000000006064820152608401610866565b6001600160a01b038b16610add5760405162461bcd60e51b815260206004820152602b60248201527f4973737565723a20677561726469616e2063616e6e6f7420626520746865207a60448201527f65726f20616464726573730000000000000000000000000000000000000000006064820152608401610866565b86610b4f5760405162461bcd60e51b8152602060048201526024808201527f4973737565723a20726573657276652070726963652063616e6e6f742062652060448201527f6e756c6c000000000000000000000000000000000000000000000000000000006064820152608401610866565b68056bc75e2d631000008610610bcd5760405162461bcd60e51b815260206004820152602b60248201527f4973737565723a20616c6c6f636174696f6e206d75737420626520696e66657260448201527f696f7220746f20313030250000000000000000000000000000000000000000006064820152608401610866565b68056bc75e2d631000008510610c4b5760405162461bcd60e51b815260206004820152602d60248201527f4973737565723a2069737375616e636520666565206d75737420626520696e6660448201527f6572696f7220746f2031303025000000000000000000000000000000000000006064820152608401610866565b8015610d3a576040517f9866e2490000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639866e24990610ce1908f907f0000000000000000000000000000000000000000000000000000000000000000908f908f908f90600190600401613f36565b602060405180830381600087803b158015610cfb57600080fd5b505af1158015610d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d339190614003565b9250610e06565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639866e2497f00000000000000000000000000000000000000000000000000000000000000008e8d8d8d60006040518763ffffffff1660e01b8152600401610db196959493929190613f36565b602060405180830381600087803b158015610dcb57600080fd5b505af1158015610ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e039190614003565b92505b6000836001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4157600080fd5b505afa158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e799190614020565b8354909150600190849060ff1916828002179055508b8360000160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550838360010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808360020181905550878360030181905550868360040181905550858360050181905550818360080160016101000a81548160ff0219169083151502179055508b6001600160a01b03168d6001600160a01b03167f21e331155a643f27ac076b298336b2670996ce080ca299d5a7b13f50899ed7d786848f8f8f8f8f8f604051610fad9897969594939291906001600160a01b03989098168852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b60405180910390a38415610fc557610fc58d846127b9565b50505050505050505050505050565b6001600160a01b03831660009081526004602052604081208054339060019060ff16600281111561100757611007613e1d565b146110545760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642069737375616e636520737461746500006044820152606401610866565b600882015460ff16156110cf5760405162461bcd60e51b815260206004820152602160248201527f4973737565723a20666c6173682069737375616e636520697320656e61626c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610866565b600034116111455760405162461bcd60e51b815260206004820152602560248201527f4973737565723a2069737375616e63652076616c75652063616e6e6f7420626560448201527f206e756c6c0000000000000000000000000000000000000000000000000000006064820152608401610866565b6000851180156111f7575060018201546003830154604080516318160ddd60e01b815290516111f3936001600160a01b0316929160009184916318160ddd916004808301926020929190829003018186803b1580156111a357600080fd5b505afa1580156111b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db9190614020565b118560080160019054906101000a900460ff16612800565b8511155b6112435760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642069737375616e636520707269636500006044820152606401610866565b600682018054600091826112568361404f565b909155509050600085156112735761126e864261406a565b611276565b60005b6040805160a0810190915290915080600181526001600160a01b03851660208083019190915234604080840191909152606083018b905260809092018490526000858152600788019091522081518154829060ff191660018360038111156112e0576112e0613e1d565b021790555060208281015182547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03928316021783556040808501516001850155606080860151600286015560809095015160039094019390935582513481529182018b90529181018490528582169285928c16917f2e0ff6e48a8a48aff6ceabfca8b39f5468c5d8537cda6f84bf3d138a057d63a9910160405180910390a450925050505b9392505050565b6113a2828261282d565b60008281526001602052604090206113ba90826126a0565b505050565b6113c98282612853565b60008281526001602052604090206113ba90826128db565b6001600160a01b03828116600090815260046020908152604080832085845260078101909252909120815491929091610100900416336001600160a01b0316146114935760405162461bcd60e51b815260206004820152603660248201527f4973737565723a206d7573742062652069737375616e6365277320677561726460448201527f69616e20746f206163636570742070726f706f73616c000000000000000000006064820152608401610866565b6001825460ff1660028111156114ab576114ab613e1d565b146114f85760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642069737375616e636520737461746500006044820152606401610866565b6001611503826128f0565b600381111561151457611514613e1d565b146115615760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642070726f706f73616c20737461746500006044820152606401610866565b600882015460ff16156115dc5760405162461bcd60e51b815260206004820152602160248201527f4973737565723a20666c6173682069737375616e636520697320656e61626c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610866565b805460ff1916600217815560405183906001600160a01b038616907fb68b23f18c187dede5027186d7dae9fda610a1ce0d025876dd7fb1fa9c52250790600090a36116e684838360000160019054906101000a90046001600160a01b03168460010154856002015460008860010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561169657600080fd5b505afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190614020565b118860080160019054906101000a900460ff1661294a565b5050505050565b6001600160a01b038216600090815260046020908152604080832084845260070190915281209061171d826128f0565b825490915061010090046001600160a01b0316336001600160a01b0316146117ad5760405162461bcd60e51b815260206004820152603560248201527f4973737565723a206d7573742062652070726f706f73616c277320627579657260448201527f20746f2077697468647261772070726f706f73616c00000000000000000000006064820152608401610866565b60018160038111156117c1576117c1613e1d565b14806117de575060038160038111156117dc576117dc613e1d565b145b61182a5760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642070726f706f73616c20737461746500006044820152606401610866565b81546001808401546001600160a01b0387811660009081526004602090815260408083208a8452600701909152812080547fffffffffffffffffffffff0000000000000000000000000000000000000000001681559384018190556002840181905560039093019290925561010090920416906118a78282612c07565b60405185906001600160a01b038816907ffb591de3f595328713bb4313a53f62d518cfcdbc6b8efd8e1824d80d1d0d03fb90600090a3505050505050565b6001600160a01b0382811660009081526004602052604090208054909133610100909204161461197d5760405162461bcd60e51b815260206004820152603260248201527f4973737565723a206d7573742062652069737375616e6365277320677561726460448201527f69616e20746f20736574207265736572766500000000000000000000000000006064820152608401610866565b6001815460ff16600281111561199557611995613e1d565b146119e25760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642069737375616e636520737461746500006044820152606401610866565b81611a545760405162461bcd60e51b8152602060048201526024808201527f4973737565723a20726573657276652070726963652063616e6e6f742062652060448201527f6e756c6c000000000000000000000000000000000000000000000000000000006064820152608401610866565b600381018290556040518281526001600160a01b038416907f9241e21d4fa6dd55661c8694538bfc11a7d44d81d5766840312d2513f55fa67d9060200160405180910390a2505050565b611aa96000336105aa565b611b1b5760405162461bcd60e51b815260206004820152603860248201527f4973737565723a206d75737420686176652044454641554c545f41444d494e5f60448201527f524f4c4520746f207365742070726f746f636f6c2066656500000000000000006064820152608401610866565b68056bc75e2d631000008110611b995760405162461bcd60e51b815260206004820152602d60248201527f4973737565723a2070726f746f636f6c20666565206d75737420626520696e6660448201527f6572696f7220746f2031303025000000000000000000000000000000000000006064820152608401610866565b6108f481612d20565b6001600160a01b03821660009081526004602052604090206001815460ff166002811115611bd257611bd2613e1d565b14611c1f5760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642069737375616e636520737461746500006044820152606401610866565b600881015460ff16611c995760405162461bcd60e51b815260206004820152602260248201527f4973737565723a20666c6173682069737375616e63652069732064697361626c60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610866565b34611d0c5760405162461bcd60e51b815260206004820152602560248201527f4973737565723a2069737375616e63652076616c75652063616e6e6f7420626560448201527f206e756c6c0000000000000000000000000000000000000000000000000000006064820152608401610866565b6000808260010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5f57600080fd5b505afa158015611d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d979190614020565b600884015460018501546003860154939092119350610100900460ff1691600091611dcf916001600160a01b03909116908585612800565b90506000611de28786333486898961294a565b905085811015611e595760405162461bcd60e51b8152602060048201526024808201527f4973737565723a20696e73756666696369656e742069737375616e636520726560448201527f7475726e000000000000000000000000000000000000000000000000000000006064820152608401610866565b50505050505050565b60008281526001602052604081206113919083612d55565b6001600160a01b038216600090815260046020526040812081815460ff166002811115611ea957611ea9613e1d565b1415611ef75760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642069737375616e636520737461746500006044820152606401610866565b60018101546003820154604080516318160ddd60e01b81529051611f9d936001600160a01b03169291879160009185916318160ddd91600480820192602092909190829003018186803b158015611f4d57600080fd5b505afa158015611f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f859190614020565b118560080160019054906101000a900460ff16612d61565b949350505050565b6001600160a01b03821660009081526004602090815260408083208484526007810190925282209091611fd7826128f0565b835490915061010090046001600160a01b0316336001600160a01b0316146120675760405162461bcd60e51b815260206004820152603660248201527f4973737565723a206d7573742062652069737375616e6365277320677561726460448201527f69616e20746f2072656a6563742070726f706f73616c000000000000000000006064820152608401610866565b600181600381111561207b5761207b613e1d565b14806120985750600381600381111561209657612096613e1d565b145b6120e45760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642070726f706f73616c20737461746500006044820152606401610866565b81546001808401546000878152600787016020526040812080547fffffffffffffffffffffff000000000000000000000000000000000000000000168155928301819055600283018190556003909201919091556101009091046001600160a01b0316906121528282612c07565b60405186906001600160a01b038916907f123432125627249bc47aca642b7e775249fbacf9c32f467ef8eade2c0bd859e990600090a350505050505050565b6001600160a01b038116600090815260046020526040812081815460ff1660028111156121c0576121c0613e1d565b141561220e5760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642069737375616e636520737461746500006044820152606401610866565b60018101546003820154604080516318160ddd60e01b81529051611391936001600160a01b0316929160009184916318160ddd916004808301926020929190829003018186803b15801561226157600080fd5b505afa158015612275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122999190614020565b118460080160019054906101000a900460ff16612800565b6001600160a01b03811660009081526004602052604090206122f37f78844962b347caf400e109846dc948d8df0fc5b2f795edb688517fc687580cd4336105aa565b6123655760405162461bcd60e51b815260206004820152602e60248201527f4973737565723a206d757374206861766520434c4f53455f524f4c4520746f2060448201527f636c6f73652069737375616e63650000000000000000000000000000000000006064820152608401610866565b6001815460ff16600281111561237d5761237d613e1d565b146123ca5760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642069737375616e636520737461746500006044820152606401610866565b805460ff191660021781556001810154604080517f43d726d600000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916343d726d69160048082019260009290919082900301818387803b15801561243657600080fd5b505af115801561244a573d6000803e3d6000fd5b50506040516001600160a01b03851692507f5b19963bf6a9a00776cbf844c84e706258ed0ca06d00f699e9d99858942c75039150600090a25050565b60008181526001602052604081206107e790612fd9565b6113c98282612fe3565b6001600160a01b0381811660009081526004602052604090208054909133610100909204161461253f5760405162461bcd60e51b815260206004820152603c60248201527f4973737565723a206d7573742062652069737375616e6365277320677561726460448201527f69616e20746f20656e61626c6520666c6173682069737375616e6365000000006064820152608401610866565b6001815460ff16600281111561255757612557613e1d565b146125a45760405162461bcd60e51b815260206004820152601e60248201527f4973737565723a20696e76616c69642069737375616e636520737461746500006044820152606401610866565b600881015460ff161561261f5760405162461bcd60e51b815260206004820152602660248201527f4973737565723a20666c6173682069737375616e636520616c7265616479206560448201527f6e61626c656400000000000000000000000000000000000000000000000000006064820152608401610866565b61262982826127b9565b5050565b6001600160a01b038216600090815260046020908152604080832084845260070190915281208190819081908190612664816128f0565b815460018301546002840154600390940154929b6101009092046001600160a01b03169a509850919650945092505050565b6126298282613009565b6000611391836001600160a01b0384166130a7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806107e757507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146107e7565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067906020015b60405180910390a150565b60088101805460ff191660011790556040516001600160a01b038316907f060437d670e5e4f2c379e5e76ece35f5fa134d3d13b296a69c29d63317c338b590600090a25050565b600080612811868660018787612d61565b9050808510156128245784915050611f9d565b95945050505050565b60008281526020819052604090206001015461284981336130f6565b6113ba8383613009565b6001600160a01b03811633146128d15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610866565b6126298282613174565b6000611391836001600160a01b0384166131f3565b8054600382015460009160ff1690600182600381111561291257612912613e1d565b14801561291e57508015155b15612943578360030154421015612939575060019392505050565b5060039392505050565b5092915050565b60008068056bc75e2d631000008860050154876129679190614082565b61297191906140a1565b9050600068056bc75e2d63100000600354838961298e91906140c3565b6129989190614082565b6129a291906140a1565b90506000816129b1848a6140c3565b6129bb91906140c3565b90506000670de0b6b3a76400006129d28984614082565b6129dc91906140a1565b905060006129ee8d8d878c8c8c6132e6565b6040516340c10f1960e01b81526001600160a01b038d8116600483015260248201859052919250908e16906340c10f1990604401600060405180830381600087803b158015612a3c57600080fd5b505af1158015612a50573d6000803e3d6000fd5b505050506000612a6f8d600401548385612a6a919061406a565b6134be565b90508015612afa576040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390528f16906340c10f1990604401600060405180830381600087803b158015612ae157600080fd5b505af1158015612af5573d6000803e3d6000fd5b505050505b8c60010160009054906101000a90046001600160a01b03166001600160a01b031663181783586040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b4c57600080fd5b505af1158015612b60573d6000803e3d6000fd5b505050506000851115612b8357600254612b83906001600160a01b031686612c07565b8c54612b9d9061010090046001600160a01b031685612c07565b8b6001600160a01b03168e6001600160a01b03167fca1340aac4caf2122faa48803f9cafe2fca0c643e9c0cc5e876d0f7c436b7ab28d86604051612beb929190918252602082015260400190565b60405180910390a350909450505050505b979650505050505050565b80471015612c575760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610866565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ca4576040519150601f19603f3d011682016040523d82523d6000602084013e612ca9565b606091505b50509050806113ba5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610866565b60038190556040518181527fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1906020016127ae565b600061139183836134e7565b600082612e0f576000846001811115612d7c57612d7c613e1d565b1415612da65784612d95670de0b6b3a764000080614082565b612d9f91906140a1565b9050612824565b6001846001811115612dba57612dba613e1d565b1415612dc7575083612824565b60405162461bcd60e51b815260206004820152601960248201527f4973737565723a20696e76616c69642074776170206b696e64000000000000006044820152606401610866565b604080516001808252818301909252600091816020015b612e4b6040805160608101909152806000815260200160008152602001600081525090565b815260200190600190039081612e265790505060408051606081019091529091508060008152602001620151808152602001600081525081600081518110612e9557612e956140f0565b60200260200101819052506000876001600160a01b0316631dccd830836040518263ffffffff1660e01b8152600401612ece9190614106565b60006040518083038186803b158015612ee657600080fd5b505afa158015612efa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f229190810190614228565b90506000866001811115612f3857612f38613e1d565b1415612fa7578315612f825780600081518110612f5757612f576140f0565b6020026020010151670de0b6b3a764000080612f739190614082565b612f7d91906140a1565b612f9e565b80600081518110612f9557612f956140f0565b60200260200101515b92505050612824565b6001866001811115612fbb57612fbb613e1d565b1415612dc75783612f825780600081518110612f5757612f576140f0565b60006107e7825490565b600082815260208190526040902060010154612fff81336130f6565b6113ba8383613174565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16612629576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556130633390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008181526001830160205260408120546130ee575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107e7565b5060006107e7565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661262957613132816001600160a01b03166014613511565b61313d836020613511565b60405160200161314e92919061428d565b60408051601f198184030181529082905262461bcd60e51b82526108669160040161433a565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615612629576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156132dc5760006132176001836140c3565b855490915060009061322b906001906140c3565b905081811461329057600086600001828154811061324b5761324b6140f0565b906000526020600020015490508087600001848154811061326e5761326e6140f0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806132a1576132a161434d565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107e7565b60009150506107e7565b600185015460028601546000917f00000000000000000000000000000000000000000000000000000000000000009183916133309184916001600160a01b031690898b8a8a61373a565b905086156134b2576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038a16906340c10f1990604401600060405180830381600087803b15801561338057600080fd5b505af1158015613394573d6000803e3d6000fd5b50506040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018590528c16925063095ea7b39150604401602060405180830381600087803b1580156133fb57600080fd5b505af115801561340f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134339190614363565b5060028089015490546001600160a01b038085169263b95cac28928b923091166134608f88868e8e6138dd565b6040518663ffffffff1660e01b815260040161347f94939291906143bb565b6000604051808303818588803b15801561349857600080fd5b505af11580156134ac573d6000803e3d6000fd5b50505050505b98975050505050505050565b60006134d38368056bc75e2d631000006140c3565b6134dd8385614082565b61139191906140a1565b60008260000182815481106134fe576134fe6140f0565b9060005260206000200154905092915050565b60606000613520836002614082565b61352b90600261406a565b67ffffffffffffffff811115613543576135436140da565b6040519080825280601f01601f19166020018201604052801561356d576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106135a4576135a46140f0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613607576136076140f0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613643846002614082565b61364e90600161406a565b90505b60018111156136eb577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061368f5761368f6140f0565b1a60f81b8282815181106136a5576136a56140f0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936136e481614499565b9050613651565b5083156113915760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610866565b600080836138a3576000886001600160a01b031663f89f27ed6040518163ffffffff1660e01b815260040160006040518083038186803b15801561377d57600080fd5b505afa158015613791573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137b99190810190614228565b9050831561383157806001815181106137d4576137d46140f0565b6020026020010151670de0b6b3a76400006137ef9190614082565b81600081518110613802576138026140f0565b602002602001015188886138169190614082565b6138209190614082565b61382a91906140a1565b915061389d565b80600081518110613844576138446140f0565b6020026020010151670de0b6b3a764000061385f9190614082565b81600181518110613872576138726140f0565b602002602001015188886138869190614082565b6138909190614082565b61389a91906140a1565b91505b506134b2565b60006138b08a8986613b14565b60208101518151919250906138c59088614082565b6138cf91906140a1565b9a9950505050505050505050565b61390a60405180608001604052806060815260200160608152602001606081526020016000151581525090565b60008361391857600061391b565b60045b60408051600280825260608201835292935060009290916020830190803683375050604080516002808252606082018352939450600093909250906020830190803683370190505090508415613a1957888260008151811061397f5761397f6140f0565b60200260200101906001600160a01b031690816001600160a01b0316815250506000826001815181106139b4576139b46140f0565b60200260200101906001600160a01b031690816001600160a01b03168152505087816000815181106139e8576139e86140f0565b6020026020010181815250508681600181518110613a0857613a086140f0565b602002602001018181525050613ac3565b600082600081518110613a2e57613a2e6140f0565b60200260200101906001600160a01b031690816001600160a01b0316815250508882600181518110613a6257613a626140f0565b60200260200101906001600160a01b031690816001600160a01b0316815250508681600081518110613a9657613a966140f0565b6020026020010181815250508781600181518110613ab657613ab66140f0565b6020026020010181815250505b60405180608001604052808381526020018281526020018483604051602001613aed9291906144b0565b60408051808303601f19018152919052815260006020909101529998505050505050505050565b613b1c613c4d565b6040517ff94d4668000000000000000000000000000000000000000000000000000000008152600481018490526000906001600160a01b0386169063f94d46689060240160006040518083038186803b158015613b7857600080fd5b505afa158015613b8c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613bb491908101906144d9565b509150508215613c0f57604051806040016040528082600081518110613bdc57613bdc6140f0565b6020026020010151815260200182600181518110613bfc57613bfc6140f0565b6020026020010151815250915050611391565b604051806040016040528082600181518110613c2d57613c2d6140f0565b6020026020010151815260200182600081518110613bfc57613bfc6140f0565b60405180604001604052806002906020820280368337509192915050565b600060208284031215613c7d57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461139157600080fd5b6001600160a01b03811681146108f457600080fd5b600060208284031215613cd457600080fd5b813561139181613cad565b600060208284031215613cf157600080fd5b5035919050565b80151581146108f457600080fd5b60008060008060008060008060006101208a8c031215613d2557600080fd5b8935613d3081613cad565b985060208a0135613d4081613cad565b975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a0135613d7b81613cf8565b809150509295985092959850929598565b600080600060608486031215613da157600080fd5b8335613dac81613cad565b95602085013595506040909401359392505050565b60008060408385031215613dd457600080fd5b823591506020830135613de681613cad565b809150509250929050565b60008060408385031215613e0457600080fd5b8235613e0f81613cad565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600381106108f4576108f4613e1d565b6101408101613e518c613e33565b9a81526001600160a01b03998a1660208201529790981660408801526060870195909552608086019390935260a085019190915260c084015260e083015215156101008201529015156101209091015290565b60008060408385031215613eb757600080fd5b50508035926020909101359150565b60008060408385031215613ed957600080fd5b8235613ee481613cad565b9150602083013560028110613de657600080fd5b60a0810160048710613f0c57613f0c613e1d565b9581526001600160a01b039490941660208501526040840192909252606083015260809091015290565b610100808252602a908201527f4672616374696f6e616c697a6174696f6e20426f6f74737472617070696e67206101208201527f506f6f6c20546f6b656e00000000000000000000000000000000000000000000610140820152610160602082018190526004908201527f46425054000000000000000000000000000000000000000000000000000000006101808201526001600160a01b038781166040830152861660608201526101a081018560808301528460a08301528360c0830152612bfc60e083018415159052565b60006020828403121561401557600080fd5b815161139181613cad565b60006020828403121561403257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561406357614063614039565b5060010190565b6000821982111561407d5761407d614039565b500190565b600081600019048311821515161561409c5761409c614039565b500290565b6000826140be57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156140d5576140d5614039565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b602080825282518282018190526000919060409081850190868401855b8281101561415b578151805161413881613e33565b855280870151878601528501518585015260609093019290850190600101614123565b5091979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614191576141916140da565b604052919050565b600067ffffffffffffffff8211156141b3576141b36140da565b5060051b60200190565b600082601f8301126141ce57600080fd5b815160206141e36141de83614199565b614168565b82815260059290921b8401810191818101908684111561420257600080fd5b8286015b8481101561421d5780518352918301918301614206565b509695505050505050565b60006020828403121561423a57600080fd5b815167ffffffffffffffff81111561425157600080fd5b611f9d848285016141bd565b60005b83811015614278578181015183820152602001614260565b83811115614287576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516142c581601785016020880161425d565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161430281602884016020880161425d565b01602801949350505050565b6000815180845261432681602086016020860161425d565b601f01601f19169290920160200192915050565b602081526000611391602083018461430e565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561437557600080fd5b815161139181613cf8565b600081518084526020808501945080840160005b838110156143b057815187529582019590820190600101614394565b509495945050505050565b848152600060206001600160a01b038087168285015280861660408501526080606085015261010084018551608080870152818151808452610120880191508583019350600092505b8083101561442657835185168252928501926001929092019190850190614404565b508488015194507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff809350838782030160a08801526144648186614380565b94505050506040850151818584030160c0860152614482838261430e565b92505050606084015161421d60e085018215159052565b6000816144a8576144a8614039565b506000190190565b6000600584106144c2576144c2613e1d565b83825260406020830152611f9d6040830184614380565b6000806000606084860312156144ee57600080fd5b835167ffffffffffffffff8082111561450657600080fd5b818601915086601f83011261451a57600080fd5b8151602061452a6141de83614199565b82815260059290921b8401810191818101908a84111561454957600080fd5b948201945b8386101561457057855161456181613cad565b8252948201949082019061454e565b9189015191975090935050508082111561458957600080fd5b50614596868287016141bd565b92505060408401519050925092509256fea264697066735822122002d3941d95d88f92ccb17c558bf1d6a5dfd9bf8e91fd7c816540083df70b7a3364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptProposal(address,uint256)": {
        "params": {
          "proposalId": "The id of the issuance proposal.",
          "sERC20": "The sERC20 which was proposed to be issued."
        }
      },
      "close(address)": {
        "params": {
          "sERC20": "The sERC20 whose issuance to close."
        }
      },
      "createProposal(address,uint256,uint256)": {
        "details": "- We do not check that sERC20.cap() > sERC20.totalSupply().      - Indeed, to make sure the transaction does not revert, we would need to take both the price, LP reward and allocation into consideration.      - That would involve a lot of un-necessary computations as the sERC20 reverts in such a situation anyhow.",
        "params": {
          "lifespan": "The lifespan of the proposal [in seconds].",
          "price": "The price at which sERC20s are proposed to be issued [in sERC20 per ETH].",
          "sERC20": "The sERC20 to issue."
        }
      },
      "enableFlashIssuance(address)": {
        "params": {
          "sERC20": "The sERC20 to enable flash issuance for."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "issuanceOf(address)": {
        "params": {
          "sERC20": "The sERC20 whose issuance is queried."
        }
      },
      "issue(address,uint256)": {
        "details": "- We do not check that sERC20.cap() > sERC20.totalSupply().      - Indeed, to make sure the transaction does not revert, we would need to take both the price, LP reward and allocation into consideration.      - That would involve a lot of un-necessary computations as the sERC20 reverts in such a situation anyhow.",
        "params": {
          "expected": "The minimum amount of sERC20 to issue [reverts otherwise]."
        }
      },
      "priceOf(address)": {
        "params": {
          "sERC20": "The sERC20 whose current issuance price is to be returned."
        }
      },
      "register(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool)": {
        "details": "- We do not check neither that:        - `sERC20` actually is an sERC20        - nor that this contract is granted MINT_ROLE over `sERC20` to save gas.      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations and self-computing `allocation`, are supposed to be        granted REGISTER_ROLE.      - Pool-related parameters are checked by the FractionalizationBootstrappingPool's constructor.      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.",
        "params": {
          "allocation": "The pre-allocated percentage of sERC20s [expressed with 1e18 decimals].",
          "fee": "The issuance fee.",
          "flash": "True if flash issuance is enabled, false otherwise.",
          "guardian": "The account authorized to enable flash issuance and accept / reject proposals otherwise [also receives ETH proceeds].",
          "reserve": "The reserve price below which sERC20 tokens can be issued [expressed in sERC20 per ETH and 1e18 decimals].",
          "sERC20": "The sERC20 to initiate the issuance of.",
          "sMaxNormalizedWeight": "The maximum normalized weight of the sERC20 in the FractionalizationBootstrappingPool to be deployed.",
          "sMinNormalizedWeight": "The minimum normalized weight of the sERC20 in the FractionalizationBootstrappingPool to be deployed.",
          "swapFeePercentage": "The swap fee of the FractionalizationBootstrappingPool to be deployed [expressed with 1e16 decimals]."
        }
      },
      "rejectProposal(address,uint256)": {
        "details": "This function is open to re-entrancy for it would be harmless.",
        "params": {
          "proposalId": "The id of the issuance proposal.",
          "sERC20": "The sERC20 which was proposed to be issued."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "setReserve(address,uint256)": {
        "params": {
          "reserve": "The reserve price below which sERC20 tokens can be issued [expressed in sERC20 per ETH and 1e18 decimals].",
          "sERC20": "The sERC20 whose issuance reserve price is updated."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "twapOf(address,uint8)": {
        "params": {
          "kind": "TwapKind.ETH to return the TWAP in ETH per sERC20, TwapKind.sERC20 to return the TWAP in sERC20 per ETH.",
          "sERC20": "The sERC20 whose TWAP is to be returned."
        }
      },
      "withdrawProposal(address,uint256)": {
        "details": "This function is open to re-entrancy for it would be harmless.",
        "params": {
          "proposalId": "The id of the issuance proposal.",
          "sERC20": "The sERC20 which was proposed to be issued."
        }
      }
    },
    "title": "Issuer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "Return the issuer's WETH."
      },
      "acceptProposal(address,uint256)": {
        "notice": "Accept proposal #`proposalId` to issue `sERC20` tokens."
      },
      "bank()": {
        "notice": "Return the issuer's bank."
      },
      "close(address)": {
        "notice": "Close the issuance of `sERC20`."
      },
      "createProposal(address,uint256,uint256)": {
        "notice": "Create a proposal to issue `sERC20` tokens at a price of `price` sERC20 per ETH."
      },
      "enableFlashIssuance(address)": {
        "notice": "Enable flash issuance for `sERC20`."
      },
      "issuanceOf(address)": {
        "notice": "Return the issuance associated to `sERC20`."
      },
      "issue(address,uint256)": {
        "notice": "Issue at least `expected` `sERC20` tokens."
      },
      "poolFactory()": {
        "notice": "Return the issuer's pool factory."
      },
      "priceOf(address)": {
        "notice": "Return the current issuance price of `sERC20` [in sERC20 per ETH]."
      },
      "proposalFor(address,uint256)": {
        "notice": "Return the proposal #`proposalId` to issue `sERC20` tokens."
      },
      "protocolFee()": {
        "notice": "Return the issuer's protocol fee."
      },
      "register(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool)": {
        "notice": "Initiate the issuance of `sERC20`."
      },
      "rejectProposal(address,uint256)": {
        "notice": "Reject proposal #`proposalId` to issue `sERC20` tokens."
      },
      "setBank(address)": {
        "notice": "Set the issuer's bank [to which protocol fees are transferred]."
      },
      "setProtocolFee(uint256)": {
        "notice": "Set the issuer's protocol fee [expressed with 1e18 decimals]."
      },
      "setReserve(address,uint256)": {
        "notice": "Set the reserve price for the issuance of `sERC20`."
      },
      "splitter()": {
        "notice": "Return the issuer's splitter."
      },
      "twapOf(address,uint8)": {
        "notice": "Return the 24h time-weighted average price of `sERC20`."
      },
      "vault()": {
        "notice": "Return the issuer's Balancer vault."
      },
      "withdrawProposal(address,uint256)": {
        "notice": "Withdraw proposal #`proposalId` to issue `sERC20` tokens.."
      }
    },
    "notice": "Handles the issuance of sERC20 tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2413,
        "contract": "contracts/issuer/Issuer.sol:Issuer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2408_storage)"
      },
      {
        "astId": 2714,
        "contract": "contracts/issuer/Issuer.sol:Issuer",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)6087_storage)"
      },
      {
        "astId": 9474,
        "contract": "contracts/issuer/Issuer.sol:Issuer",
        "label": "_bank",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9476,
        "contract": "contracts/issuer/Issuer.sol:Issuer",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9482,
        "contract": "contracts/issuer/Issuer.sol:Issuer",
        "label": "_issuances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(sIERC20)13084,t_struct(Issuance)11778_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFractionalizationBootstrappingPool)11718": {
        "encoding": "inplace",
        "label": "contract IFractionalizationBootstrappingPool",
        "numberOfBytes": "20"
      },
      "t_contract(sIERC20)13084": {
        "encoding": "inplace",
        "label": "contract sIERC20",
        "numberOfBytes": "20"
      },
      "t_enum(State)11750": {
        "encoding": "inplace",
        "label": "enum Issuances.State",
        "numberOfBytes": "1"
      },
      "t_enum(State)11786": {
        "encoding": "inplace",
        "label": "enum Proposals.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)6087_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6087_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2408_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2408_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(sIERC20)13084,t_struct(Issuance)11778_storage)": {
        "encoding": "mapping",
        "key": "t_contract(sIERC20)13084",
        "label": "mapping(contract sIERC20 => struct Issuances.Issuance)",
        "numberOfBytes": "32",
        "value": "t_struct(Issuance)11778_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposal)11798_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Proposals.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)11798_storage"
      },
      "t_struct(AddressSet)6087_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6086,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5786_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Issuance)11778_storage": {
        "encoding": "inplace",
        "label": "struct Issuances.Issuance",
        "members": [
          {
            "astId": 11753,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(State)11750"
          },
          {
            "astId": 11755,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "guardian",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11758,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "pool",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IFractionalizationBootstrappingPool)11718"
          },
          {
            "astId": 11760,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "poolId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 11762,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "reserve",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11764,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "allocation",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11766,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "fee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11768,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "nbOfProposals",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11773,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "proposals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Proposal)11798_storage)"
          },
          {
            "astId": 11775,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "flash",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 11777,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "sERC20IsToken0",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Proposal)11798_storage": {
        "encoding": "inplace",
        "label": "struct Proposals.Proposal",
        "members": [
          {
            "astId": 11789,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "_state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(State)11786"
          },
          {
            "astId": 11791,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "buyer",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11793,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11795,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11797,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "expiration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)2408_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2405,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2407,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5786_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5781,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5785,
            "contract": "contracts/issuer/Issuer.sol:Issuer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}