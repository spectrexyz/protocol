{
  "language": "Solidity",
  "sources": {
    "contracts/broker/Broker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./IBroker.sol\";\nimport \"./libraries/Proposals.sol\";\nimport \"./libraries/Sales.sol\";\nimport {IIssuer} from \"../issuer/IIssuer.sol\";\nimport \"../token/sIERC20.sol\";\nimport \"../vault/IVault.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Broker\n * @notice Handles the buyout of fractionalized NFTs.\n */\ncontract Broker is Context, AccessControlEnumerable, IBroker {\n    using Address for address payable;\n    using Proposals for Proposals.Proposal;\n    using Sales for Sales.Sale;\n\n    bytes32 public constant ESCAPE_ROLE = keccak256(\"ESCAPE_ROLE\");\n    bytes32 public constant REGISTER_ROLE = keccak256(\"REGISTER_ROLE\");\n    uint256 public constant MINIMUM_TIMELOCK = 1 weeks;\n    uint256 public constant DECIMALS = 1e18; // !IMPORTANT: is the same as Issuer.DECIMALS\n    uint256 public constant HUNDRED = 1e20;\n\n    IVault private immutable _vault;\n    IIssuer private immutable _issuer;\n    address private _bank;\n    uint256 private _protocolFee;\n    mapping(sIERC20 => Sales.Sale) private _sales;\n\n    constructor(\n        IVault vault_,\n        IIssuer issuer_,\n        address bank_,\n        uint256 protocolFee_\n    ) {\n        require(address(vault_) != address(0), \"Broker: vault cannot be the zero address\");\n        require(address(issuer_) != address(0), \"Broker: issuer cannot be the zero address\");\n        require(address(bank_) != address(0), \"Broker: bank cannot be the zero address\");\n        require(protocolFee_ < HUNDRED, \"Broker: protocol fee must be inferior to 100%\");\n\n        _vault = vault_;\n        _issuer = issuer_;\n        _setBank(bank_);\n        _setProtocolFee(protocolFee_);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    /**\n     * @notice Put the NFT pegged to `sERC20` on sale.\n     * @param sERC20 The sERC20 whose pegged NFT is put on sale.\n     * @param guardian The account authorized to enable flash buyout and accept / reject proposals otherwise.\n     * @param reserve The reserve price above which the NFT can be bought out.\n     * @param multiplier The sale's buyout multiplier [expressed with 1e18 decimals].\n     * @param timelock The period of time after which the sale opens [in seconds].\n     * @param flash True if flash buyout is enabled, false otherwise.\n     * @param escape True if spectre's multisig is allowed to escape sERC20's pegged NFT, false otherwise.\n     * @param cap True if the buyout price should be based on the sERC20 cap, false if it should be based on its supply.\n     */\n    function register(\n        sIERC20 sERC20,\n        address guardian,\n        uint256 reserve,\n        uint256 multiplier,\n        uint256 timelock,\n        bool flash,\n        bool escape,\n        bool cap\n    ) external override {\n        Sales.Sale storage sale = _sales[sERC20];\n\n        require(hasRole(REGISTER_ROLE, _msgSender()), \"Broker: must have REGISTER_ROLE to register\");\n        require(sale.state() == Sales.State.Null, \"Broker: sale already registered\");\n        require(guardian != address(0), \"Broker: guardian cannot be the zero address\");\n        require(timelock >= MINIMUM_TIMELOCK, \"Broker: invalid timelock\");\n\n        sale._state = Sales.State.Pending;\n        sale.guardian = guardian;\n        sale.reserve = reserve;\n        sale.multiplier = multiplier;\n        sale.opening = block.timestamp + timelock;\n        sale.cap = cap;\n\n        emit Register(sERC20, guardian, reserve, multiplier, block.timestamp + timelock);\n\n        if (flash) _enableFlashBuyout(sERC20, sale);\n        if (escape) _enableEscape(sERC20, sale);\n    }\n\n    /**\n     * @notice Buyout the NFT pegged to `sERC20`.\n     * @dev This function requires flash buyout to be enabled.\n     * @param sERC20 The sERC20 whose pegged NFT is boughtout.\n     */\n    function buyout(sIERC20 sERC20) external payable override {\n        Sales.Sale storage sale = _sales[sERC20];\n\n        require(sale.state() == Sales.State.Opened, \"Broker: invalid sale state\");\n        require(sale.flash, \"Broker: flash buyout is disabled\");\n\n        address buyer = _msgSender();\n        (uint256 value, uint256 collateral) = _priceOfFor(sERC20, sale, buyer);\n\n        require(msg.value >= value, \"Broker: insufficient value\");\n\n        _buyout(sERC20, sale, buyer, msg.value, collateral, false);\n    }\n\n    /**\n     * @notice Create a proposal to buyout the NFT pegged to `sERC20`.\n     * @param sERC20 The sERC20 whose pegged NFT is proposed to be bought out.\n     * @param lifespan The lifespan of the proposal [in seconds].\n     */\n    function createProposal(sIERC20 sERC20, uint256 lifespan) external payable override returns (uint256) {\n        Sales.Sale storage sale = _sales[sERC20];\n\n        require(sale.state() == Sales.State.Opened, \"Broker: invalid sale state\");\n        require(!sale.flash, \"Broker: flash buyout is enabled\");\n\n        address buyer = _msgSender();\n        (uint256 value, uint256 collateral) = _priceOfFor(sERC20, sale, buyer);\n\n        require(msg.value >= value, \"Broker: insufficient value\");\n\n        if (collateral > 0) sERC20.transferFrom(buyer, address(this), collateral);\n\n        uint256 proposalId = sale.nbOfProposals++;\n        uint256 expiration = lifespan == 0 ? 0 : block.timestamp + lifespan;\n        sale.proposals[proposalId] = Proposals.Proposal({\n            _state: Proposals.State.Pending,\n            buyer: buyer,\n            value: msg.value,\n            collateral: collateral,\n            expiration: expiration\n        });\n\n        emit CreateProposal(sERC20, proposalId, buyer, msg.value, collateral, expiration);\n\n        return proposalId;\n    }\n\n    /**\n     * @notice Accept proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\n     * @param sERC20 The sERC20 whose pegged NFT was proposed to be bought out.\n     * @param proposalId The id of the buyout proposal.\n     */\n    function acceptProposal(sIERC20 sERC20, uint256 proposalId) external override {\n        Sales.Sale storage sale = _sales[sERC20];\n        Proposals.Proposal storage proposal = sale.proposals[proposalId];\n\n        require(_msgSender() == sale.guardian, \"Broker: must be sale's guardian to accept proposal\");\n        require(sale.state() == Sales.State.Opened, \"Broker: invalid sale state\");\n        require(proposal.state() == Proposals.State.Pending, \"Broker: invalid proposal state\");\n        require(!sale.flash, \"Broker: flash buyout is enabled\");\n\n        proposal._state = Proposals.State.Accepted;\n\n        emit AcceptProposal(sERC20, proposalId);\n\n        _buyout(sERC20, sale, proposal.buyer, proposal.value, proposal.collateral, true);\n    }\n\n    /**\n     * @notice Reject proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\n     * @dev This function is open to re-entrancy for it would be harmless.\n     * @param sERC20 The sERC20 whose pegged NFT was proposed to be bought out.\n     * @param proposalId The id of the buyout proposal.\n     */\n    function rejectProposal(sIERC20 sERC20, uint256 proposalId) external override {\n        Sales.Sale storage sale = _sales[sERC20];\n        Proposals.Proposal storage proposal = sale.proposals[proposalId];\n        Proposals.State state = proposal.state();\n\n        require(_msgSender() == sale.guardian, \"Broker: must be sale's guardian to reject proposal\");\n        require(state == Proposals.State.Pending || state == Proposals.State.Lapsed, \"Broker: invalid proposal state\");\n\n        address buyer = proposal.buyer;\n        uint256 value = proposal.value;\n        uint256 collateral = proposal.collateral;\n        delete sale.proposals[proposalId];\n\n        sERC20.transfer(buyer, collateral);\n        payable(buyer).sendValue(value);\n\n        emit RejectProposal(sERC20, proposalId);\n    }\n\n    /**\n     * @notice Withdraw proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\n     * @dev This function is open to re-entrancy for it would be harmless.\n     * @param sERC20 The sERC20 whose pegged NFT was proposed to be bought out.\n     * @param proposalId The id of the buyout proposal.\n     */\n    function withdrawProposal(sIERC20 sERC20, uint256 proposalId) external override {\n        Sales.Sale storage sale = _sales[sERC20];\n        Proposals.Proposal storage proposal = sale.proposals[proposalId];\n        Proposals.State state = proposal.state();\n\n        require(_msgSender() == proposal.buyer, \"Broker: must be proposal's buyer to withdraw proposal\");\n        require(state == Proposals.State.Pending || state == Proposals.State.Lapsed, \"Broker: invalid proposal state\");\n\n        address buyer = proposal.buyer;\n        uint256 value = proposal.value;\n        uint256 collateral = proposal.collateral;\n        delete sale.proposals[proposalId];\n\n        sERC20.transfer(buyer, collateral);\n        payable(buyer).sendValue(value);\n\n        emit WithdrawProposal(sERC20, proposalId);\n    }\n\n    /**\n     * @notice Claim shares of the buyout of the NFT pegged to `sERC20`.\n     * @dev This function is open to re-entrancy for it would be harmless.\n     * @param sERC20 The sERC20 whose buyout shares are claimed.\n     */\n    function claim(sIERC20 sERC20) external override {\n        Sales.Sale storage sale = _sales[sERC20];\n        address holder = _msgSender();\n        uint256 balance = sERC20.balanceOf(holder);\n\n        require(sale.state() == Sales.State.Closed, \"Broker: invalid sale state\");\n        require(balance > 0, \"Broker: nothing to claim\");\n\n        uint256 value = (sale.stock * balance) / sERC20.totalSupply();\n        sale.stock -= value;\n        sERC20.burnFrom(holder, balance);\n        payable(holder).sendValue(value);\n\n        emit Claim(sERC20, holder, value, balance);\n    }\n\n    /**\n     * @notice Enable flash buyout for the NFT pegged to `sERC20`.\n     * @param sERC20 The sERC20 whose pegged NFT is to be offered to flash buyout.\n     */\n    function enableFlashBuyout(sIERC20 sERC20) external override {\n        Sales.Sale storage sale = _sales[sERC20];\n        Sales.State state = sale.state();\n\n        require(_msgSender() == sale.guardian, \"Broker: must be sale's guardian to enable flash buyout\");\n        require(state == Sales.State.Pending || state == Sales.State.Opened, \"Broker: invalid sale state\");\n        require(!sale.flash, \"Broker: flash buyout already enabled\");\n\n        _enableFlashBuyout(sERC20, sale);\n    }\n\n    /**\n     * @notice Enable escape for the NFT pegged to `sERC20`.\n     * @param sERC20 The sERC20 whose pegged NFT is to be made escapable.\n     */\n    function enableEscape(sIERC20 sERC20) external override {\n        Sales.Sale storage sale = _sales[sERC20];\n        Sales.State state = sale.state();\n\n        require(_msgSender() == sale.guardian, \"Broker: must be sale's guardian to enable escape\");\n        require(state == Sales.State.Pending || state == Sales.State.Opened, \"Broker: invalid sale state\");\n        require(!sale.escape, \"Broker: escape already enabled\");\n\n        _enableEscape(sERC20, sale);\n    }\n\n    /**\n     * @notice Disable escape for the NFT pegged to `sERC20`.\n     * @param sERC20 The sERC20 whose pegged NFT is to be made un-escapable.\n     */\n    function disableEscape(sIERC20 sERC20) external override {\n        Sales.Sale storage sale = _sales[sERC20];\n        Sales.State state = sale.state();\n\n        require(_msgSender() == sale.guardian, \"Broker: must be sale's guardian to disable escape\");\n        require(state == Sales.State.Pending || state == Sales.State.Opened, \"Broker: invalid sale state\");\n        require(sale.escape, \"Broker: escape already disabled\");\n\n        _disableEscape(sERC20, sale);\n    }\n\n    /**\n     * @notice Set the reserve price for the NFT pegged to `sERC20`.\n     * @param sERC20 The sERC20 whose pegged NFT's reserve price is updated.\n     * @param reserve The new reserve price.\n     */\n    function setReserve(sIERC20 sERC20, uint256 reserve) external override {\n        Sales.Sale storage sale = _sales[sERC20];\n        Sales.State state = sale.state();\n\n        require(_msgSender() == sale.guardian, \"Broker: must be sale's guardian to set reserve\");\n        require(state == Sales.State.Pending || state == Sales.State.Opened, \"Broker: invalid sale state\");\n\n        sale.reserve = reserve;\n\n        emit SetReserve(sERC20, reserve);\n    }\n\n    function setBank(address bank_) external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Broker: must have DEFAULT_ADMIN_ROLE to set bank\");\n        require(bank_ != address(0), \"Broker: bank cannot be the zero address\");\n\n        _setBank(bank_);\n    }\n\n    function setProtocolFee(uint256 protocolFee_) external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Broker: must have DEFAULT_ADMIN_ROLE to set protocol fee\");\n        require(protocolFee_ < HUNDRED, \"Broker: protocol fee must be inferior to 100%\");\n\n        _setProtocolFee(protocolFee_);\n    }\n\n    /**\n     * @notice Transfer all the NFTs pegged to `sERC20s `to `beneficiaries` with `datas` as ERC721#safeTransferFrom callback datas.\n     * @dev This function is only meant to be used in case of an emergency or upgrade to transfer NFTs to a safer or up-to-date place.\n     * @param sERC20s The sERC20s whose pegged NFTs are transferred.\n     * @param beneficiaries The addresses escaped NFTs are transferred to.\n     * @param datas The ERC721#transfer callback datas.\n     */\n    function _escape_(\n        sIERC20[] calldata sERC20s,\n        address[] calldata beneficiaries,\n        bytes[] calldata datas\n    ) external override {\n        require(hasRole(ESCAPE_ROLE, _msgSender()), \"Broker: must have ESCAPE_ROLE to escape NFTs\");\n        require(sERC20s.length == beneficiaries.length && sERC20s.length == datas.length, \"Broker: parameters lengths mismatch\");\n\n        for (uint256 i = 0; i < sERC20s.length; i++) {\n            require(_sales[sERC20s[i]].escape, \"Broker: escape is disabled\");\n\n            _sales[sERC20s[i]]._state = Sales.State.Closed;\n            _vault.unlock(sERC20s[i], beneficiaries[i], datas[i]);\n\n            emit Escape(sERC20s[i], beneficiaries[i], datas[i]);\n        }\n    }\n\n    /**\n     * @notice Return the broker's vault.\n     */\n    function vault() public view override returns (IVault) {\n        return _vault;\n    }\n\n    /**\n     * @notice Return the broker's issuer.\n     */\n    function issuer() public view override returns (IIssuer) {\n        return _issuer;\n    }\n\n    /**\n     * @notice Return the broker's bank.\n     */\n    function bank() public view override returns (address) {\n        return _bank;\n    }\n\n    /**\n     * @notice Return the broker's protocol fee.\n     */\n    function protocolFee() public view override returns (uint256) {\n        return _protocolFee;\n    }\n\n    /**\n     * @notice Return what it costs for `buyer` to buyout the NFT pegged to `sERC20`.\n     */\n    function priceOfFor(sIERC20 sERC20, address buyer) public view override returns (uint256 value, uint256 collateral) {\n        return _priceOfFor(sERC20, _sales[sERC20], buyer);\n    }\n\n    /**\n     * @notice Return the sale of the NFT pegged to `sERC20`.\n     */\n    function saleOf(sIERC20 sERC20)\n        public\n        view\n        override\n        returns (\n            Sales.State state,\n            address guardian,\n            uint256 reserve,\n            uint256 multiplier,\n            uint256 opening,\n            uint256 stock,\n            uint256 nbOfProposals,\n            bool flash,\n            bool escape,\n            bool cap\n        )\n    {\n        Sales.Sale storage sale = _sales[sERC20];\n\n        state = sale.state();\n        guardian = sale.guardian;\n        reserve = sale.reserve;\n        multiplier = sale.multiplier;\n        opening = sale.opening;\n        stock = sale.stock;\n        nbOfProposals = sale.nbOfProposals;\n        flash = sale.flash;\n        escape = sale.escape;\n        cap = sale.cap;\n    }\n\n    /**\n     * @notice Return the proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\n     */\n    function proposalFor(sIERC20 sERC20, uint256 proposalId)\n        public\n        view\n        override\n        returns (\n            Proposals.State state,\n            address buyer,\n            uint256 value,\n            uint256 collateral,\n            uint256 expiration\n        )\n    {\n        Proposals.Proposal storage proposal = _sales[sERC20].proposals[proposalId];\n\n        state = proposal.state();\n        buyer = proposal.buyer;\n        value = proposal.value;\n        collateral = proposal.collateral;\n        expiration = proposal.expiration;\n    }\n\n    function _buyout(\n        sIERC20 sERC20,\n        Sales.Sale storage sale,\n        address buyer,\n        uint256 value,\n        uint256 collateral,\n        bool locked\n    ) private {\n        uint256 fee = (value * _protocolFee) / HUNDRED;\n\n        sale._state = Sales.State.Closed;\n        sale.stock = value - fee;\n\n        _issuer.close(sERC20);\n\n        if (sale.cap) {\n            uint256 cap = sERC20.cap();\n            uint256 supply = sERC20.totalSupply();\n            if (cap > supply) sERC20.mint(sale.guardian, cap - supply);\n        }\n\n        if (collateral > 0) {\n            if (locked) sERC20.burn(collateral);\n            else sERC20.burnFrom(buyer, collateral);\n        }\n\n        _vault.unlock(sERC20, buyer, \"\");\n        if (fee > 0) payable(_bank).sendValue(fee);\n\n        emit Buyout(sERC20, buyer, value, collateral, fee);\n    }\n\n    function _enableFlashBuyout(sIERC20 sERC20, Sales.Sale storage sale) private {\n        sale.flash = true;\n\n        emit EnableFlashBuyout(sERC20);\n    }\n\n    function _enableEscape(sIERC20 sERC20, Sales.Sale storage sale) private {\n        sale.escape = true;\n\n        emit EnableEscape(sERC20);\n    }\n\n    function _disableEscape(sIERC20 sERC20, Sales.Sale storage sale) private {\n        sale.escape = false;\n\n        emit DisableEscape(sERC20);\n    }\n\n    function _setBank(address bank_) private {\n        _bank = bank_;\n\n        emit SetBank(bank_);\n    }\n\n    function _setProtocolFee(uint256 protocolFee_) private {\n        _protocolFee = protocolFee_;\n\n        emit SetProtocolFee(protocolFee_);\n    }\n\n    function _priceOfFor(\n        sIERC20 sERC20,\n        Sales.Sale storage sale,\n        address buyer\n    ) private view returns (uint256 value, uint256 collateral) {\n        collateral = sERC20.balanceOf(buyer);\n        uint256 supply = sale.cap ? sERC20.cap() : sERC20.totalSupply();\n        uint256 marketValue = (((_issuer.twapOf(sERC20, IIssuer.TwapKind.ETH) * supply) / DECIMALS) * sale.multiplier) / DECIMALS;\n        uint256 reserve = sale.reserve;\n        uint256 rawValue = reserve >= marketValue ? reserve : marketValue;\n\n        value = supply > 0 ? (rawValue * (DECIMALS - (collateral * DECIMALS) / supply)) / DECIMALS : rawValue;\n    }\n}\n"
    },
    "contracts/broker/IBroker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./libraries/Sales.sol\";\nimport {IIssuer} from \"../issuer/IIssuer.sol\";\nimport \"../token/sIERC20.sol\";\nimport \"../vault/IVault.sol\";\n\ninterface IBroker {\n    event Register(sIERC20 indexed sERC20, address indexed guardian, uint256 reserve, uint256 multiplier, uint256 opening);\n    event CreateProposal(sIERC20 indexed sERC20, uint256 indexed proposalId, address indexed buyer, uint256 value, uint256 collateral, uint256 expiration);\n    event AcceptProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\n    event RejectProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\n    event WithdrawProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\n    event Claim(sIERC20 indexed sERC20, address indexed holder, uint256 value, uint256 collateral);\n    event Buyout(sIERC20 indexed sERC20, address indexed buyer, uint256 value, uint256 collateral, uint256 fee);\n    event EnableFlashBuyout(sIERC20 indexed sERC20);\n    event EnableEscape(sIERC20 indexed sERC20);\n    event DisableEscape(sIERC20 indexed sERC20);\n    event SetReserve(sIERC20 indexed sERC20, uint256 reserve);\n    event SetBank(address bank);\n    event SetProtocolFee(uint256 protocolFee);\n    event Escape(sIERC20 indexed sERC20, address indexed beneficiary, bytes data);\n\n    function register(\n        sIERC20 sERC20,\n        address guardian,\n        uint256 minimum,\n        uint256 multiplier,\n        uint256 timelock,\n        bool flash,\n        bool escape,\n        bool cap\n    ) external;\n\n    function buyout(sIERC20 sERC20) external payable;\n\n    function createProposal(sIERC20 sERC20, uint256 lifespan) external payable returns (uint256);\n\n    function acceptProposal(sIERC20 sERC20, uint256 proposalId) external;\n\n    function rejectProposal(sIERC20 sERC20, uint256 proposalId) external;\n\n    function withdrawProposal(sIERC20 sERC20, uint256 proposalId) external;\n\n    function claim(sIERC20 sERC20) external;\n\n    function enableFlashBuyout(sIERC20 sERC20) external;\n\n    function enableEscape(sIERC20 sERC20) external;\n\n    function disableEscape(sIERC20 sERC20) external;\n\n    function setReserve(sIERC20 sERC20, uint256 reserve) external;\n\n    function setBank(address bank_) external;\n\n    function setProtocolFee(uint256 protocolFee_) external;\n\n    function _escape_(\n        sIERC20[] calldata sERC20s,\n        address[] calldata beneficiaries,\n        bytes[] calldata datas\n    ) external;\n\n    function vault() external view returns (IVault);\n\n    function issuer() external view returns (IIssuer);\n\n    function bank() external view returns (address);\n\n    function protocolFee() external view returns (uint256);\n\n    function priceOfFor(sIERC20 sERC20, address buyer) external view returns (uint256 value, uint256 collateral);\n\n    function saleOf(sIERC20 sERC20)\n        external\n        view\n        returns (\n            Sales.State state,\n            address guardian,\n            uint256 reserve,\n            uint256 multiplier,\n            uint256 opening,\n            uint256 stock,\n            uint256 nbOfProposals,\n            bool flash,\n            bool escape,\n            bool cap\n        );\n\n    function proposalFor(sIERC20 sERC20, uint256 proposalId)\n        external\n        view\n        returns (\n            Proposals.State state,\n            address buyer,\n            uint256 value,\n            uint256 collateral,\n            uint256 expiration\n        );\n}\n"
    },
    "contracts/broker/libraries/Proposals.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nlibrary Proposals {\n    enum State {\n        Null,\n        Pending,\n        Accepted,\n        Lapsed\n    }\n\n    struct Proposal {\n        State _state;\n        address buyer;\n        uint256 value;\n        uint256 collateral;\n        uint256 expiration;\n    }\n\n    function state(Proposal storage proposal) internal view returns (State) {\n        State _state = proposal._state;\n        uint256 expiration = proposal.expiration;\n\n        if (_state == State.Pending && expiration != 0 && block.timestamp >= expiration) {\n            return State.Lapsed;\n        } else {\n            return _state;\n        }\n    }\n}\n"
    },
    "contracts/broker/libraries/Sales.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./Proposals.sol\";\n\nlibrary Sales {\n    enum State {\n        Null,\n        Pending,\n        Opened,\n        Closed\n    }\n\n    struct Sale {\n        State _state;\n        address guardian;\n        uint256 reserve;\n        uint256 multiplier;\n        uint256 opening;\n        uint256 stock;\n        uint256 nbOfProposals;\n        mapping(uint256 => Proposals.Proposal) proposals;\n        bool flash;\n        bool escape;\n        bool cap;\n    }\n\n    function state(Sale storage sale) internal view returns (State) {\n        State _state = sale._state;\n\n        if (_state == State.Pending && block.timestamp >= sale.opening) {\n            return State.Opened;\n        } else {\n            return _state;\n        }\n    }\n}\n"
    },
    "contracts/issuer/IIssuer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./interfaces/IBalancer.sol\";\nimport \"./interfaces/IFractionalizationBootstrappingPool.sol\";\nimport \"./interfaces/IFractionalizationBootstrappingPoolFactory.sol\";\nimport \"./libraries/Issuances.sol\";\nimport \"../token/sIERC20.sol\";\n\ninterface IIssuer {\n    enum TwapKind {\n        ETH,\n        sERC20\n    }\n\n    event Register(\n        sIERC20 indexed sERC20,\n        address indexed guardian,\n        IFractionalizationBootstrappingPool pool,\n        bytes32 poolId,\n        uint256 sMaxNormalizedWeight,\n        uint256 sMinNormalizedWeight,\n        uint256 swapFeePercentage,\n        uint256 reserve,\n        uint256 allocation,\n        uint256 fee\n    );\n    event Issue(sIERC20 indexed sERC20, address indexed recipient, uint256 value, uint256 amount);\n    event CreateProposal(sIERC20 indexed sERC20, uint256 indexed proposalId, address indexed buyer, uint256 value, uint256 price, uint256 expiration);\n    event AcceptProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\n    event RejectProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\n    event WithdrawProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\n    event Close(sIERC20 indexed sERC20);\n    event EnableFlashIssuance(sIERC20 indexed sERC20);\n    event SetReserve(sIERC20 indexed sERC20, uint256 reserve);\n    event SetBank(address bank);\n    event SetProtocolFee(uint256 protocolFee);\n\n    function register(\n        sIERC20 sERC20,\n        address guardian,\n        uint256 sMaxNormalizedWeight,\n        uint256 sMinNormalizedWeight,\n        uint256 swapFeePercentage,\n        uint256 reserve,\n        uint256 allocation,\n        uint256 fee,\n        bool flash\n    ) external;\n\n    function issue(sIERC20 sERC20, uint256 expected) external payable;\n\n    function createProposal(\n        sIERC20 sERC20,\n        uint256 price,\n        uint256 lifespan\n    ) external payable returns (uint256);\n\n    function acceptProposal(sIERC20 sERC20, uint256 proposalId) external;\n\n    function rejectProposal(sIERC20 sERC20, uint256 proposalId) external;\n\n    function withdrawProposal(sIERC20 sERC20, uint256 proposalId) external;\n\n    function close(sIERC20 sERC20) external;\n\n    function enableFlashIssuance(sIERC20 sERC20) external;\n\n    function setReserve(sIERC20 sERC20, uint256 reserve) external;\n\n    function setBank(address bank_) external;\n\n    function setProtocolFee(uint256 protocolFee_) external;\n\n    function vault() external view returns (IBVault);\n\n    function poolFactory() external view returns (IFractionalizationBootstrappingPoolFactory);\n\n    function splitter() external view returns (address);\n\n    function WETH() external view returns (address);\n\n    function bank() external view returns (address);\n\n    function protocolFee() external view returns (uint256);\n\n    function issuanceOf(sIERC20 sERC20)\n        external\n        view\n        returns (\n            Issuances.State state,\n            address guardian,\n            IFractionalizationBootstrappingPool pool,\n            bytes32 poolId,\n            uint256 reserve,\n            uint256 allocation,\n            uint256 fee,\n            uint256 nbOfProposals,\n            bool flash,\n            bool sERC20IsToken0\n        );\n\n    function proposalFor(sIERC20 sERC20, uint256 proposalId)\n        external\n        view\n        returns (\n            Proposals.State state,\n            address buyer,\n            uint256 value,\n            uint256 price,\n            uint256 expiration\n        );\n\n    function priceOf(sIERC20 sERC20) external view returns (uint256);\n\n    function twapOf(sIERC20 sERC20, TwapKind Kind) external view returns (uint256);\n}\n"
    },
    "contracts/token/sIERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"../vault/IVault.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n\ninterface sIERC20 is IAccessControlUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        uint256 cap_,\n        address admin\n    ) external;\n\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address account, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function snapshot() external returns (uint256);\n\n    function onERC1155Transferred(\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n\n    function vault() external view returns (IVault);\n\n    function cap() external view returns (uint256);\n\n    function paused() external view returns (bool);\n\n    function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256);\n\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256);\n}\n"
    },
    "contracts/vault/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./libraries/Spectres.sol\";\nimport \"../token/sIERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IVault {\n    event Fractionalize(IERC721 indexed collection, uint256 indexed tokenId, uint256 indexed id, sIERC20 sERC20, address broker);\n    event Unlock(uint256 indexed id, address recipient);\n\n    function fractionalize(\n        IERC721 collection,\n        uint256 tokenId,\n        string memory name,\n        string memory symbol,\n        uint256 cap,\n        address admin,\n        address broker\n    ) external returns (uint256);\n\n    function unlock(\n        sIERC20 sERC20,\n        address recipient,\n        bytes calldata data\n    ) external;\n\n    function setUnavailableURI(string memory unavailableURI_) external;\n\n    function setUnlockedURI(string memory unlockedURI_) external;\n\n    function onERC20Transferred(\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n\n    function sERC20Base() external view returns (address);\n\n    function unavailableURI() external view returns (string memory);\n\n    function unlockedURI() external view returns (string memory);\n\n    function isLocked(IERC721 collection, uint256 tokenId) external view returns (bool);\n\n    function tokenTypeOf(IERC721 collection, uint256 tokenId) external view returns (uint256);\n\n    function spectreOf(uint256 id) external view returns (Spectres.Spectre memory);\n\n    function spectreOf(sIERC20 sERC20) external view returns (Spectres.Spectre memory);\n\n    function sERC20Of(uint256 id) external pure returns (sIERC20);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/issuer/interfaces/IBalancer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IAsset {}\n\ninterface IPriceOracle {\n    enum Variable {\n        PAIR_PRICE,\n        BPT_PRICE,\n        INVARIANT\n    }\n\n    struct OracleAccumulatorQuery {\n        Variable variable;\n        uint256 ago;\n    }\n\n    struct OracleAverageQuery {\n        Variable variable;\n        uint256 secs;\n        uint256 ago;\n    }\n\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries) external view returns (uint256[] memory results);\n\n    function getLatest(Variable variable) external view returns (uint256);\n\n    function getLargestSafeQueryWindow() external view returns (uint256);\n\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries) external view returns (int256[] memory results);\n}\n\ninterface IBVault {\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    function WETH() external view returns (address);\n}\n"
    },
    "contracts/issuer/interfaces/IFractionalizationBootstrappingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./IBalancer.sol\";\n\ninterface IFractionalizationBootstrappingPool {\n    enum JoinKind {\n        INIT,\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n        REWARD\n    }\n\n    function poke() external;\n\n    function close() external;\n\n    function totalSupply() external view returns (uint256);\n\n    function getTimeWeightedAverage(IPriceOracle.OracleAverageQuery[] memory queries) external view returns (uint256[] memory prices);\n\n    function getLatest(IPriceOracle.Variable variable) external view returns (uint256);\n\n    function getNormalizedWeights() external view returns (uint256[] memory);\n\n    function getPoolId() external view returns (bytes32);\n\n    function sERC20IsToken0() external view returns (bool);\n}\n"
    },
    "contracts/issuer/interfaces/IFractionalizationBootstrappingPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\ninterface IFractionalizationBootstrappingPoolFactory {\n    function create(\n        string memory name,\n        string memory symbol,\n        address token0,\n        address token1,\n        uint256 sMaxNormalizedWeight,\n        uint256 sMinNormalizedWeight,\n        uint256 swapFeePercentage,\n        bool sERC20IsToken0\n    ) external returns (address);\n}\n"
    },
    "contracts/issuer/libraries/Issuances.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./Proposals.sol\";\nimport \"../interfaces/IFractionalizationBootstrappingPool.sol\";\n\nlibrary Issuances {\n    enum State {\n        Null,\n        Opened,\n        Closed\n    }\n\n    struct Issuance {\n        State state;\n        address guardian;\n        IFractionalizationBootstrappingPool pool;\n        bytes32 poolId;\n        uint256 reserve;\n        uint256 allocation;\n        uint256 fee;\n        uint256 nbOfProposals;\n        mapping(uint256 => Proposals.Proposal) proposals;\n        bool flash;\n        bool sERC20IsToken0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/issuer/libraries/Proposals.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nlibrary Proposals {\n    enum State {\n        Null,\n        Pending,\n        Accepted,\n        Lapsed\n    }\n\n    struct Proposal {\n        State _state;\n        address buyer;\n        uint256 value;\n        uint256 price;\n        uint256 expiration;\n    }\n\n    function state(Proposal storage proposal) internal view returns (State) {\n        State _state = proposal._state;\n        uint256 expiration = proposal.expiration;\n\n        if (_state == State.Pending && expiration != 0) {\n            if (block.timestamp < proposal.expiration) return State.Pending;\n            else return State.Lapsed;\n        } else {\n            return _state;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/vault/libraries/Spectres.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nlibrary Spectres {\n    enum State {\n        Null,\n        Locked,\n        Unlocked\n    }\n\n    struct Spectre {\n        State state;\n        IERC721 collection;\n        uint256 tokenId;\n        address broker;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/vault/Vault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./IVault.sol\";\nimport \"./libraries/Cast.sol\";\nimport \"./libraries/ERC165Ids.sol\";\nimport \"./libraries/Spectres.sol\";\nimport \"../token/sIERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\n/**\n * @title Vault\n * @notice ERC1155 token wrapping locked ERC721 tokens into sERC20 tokens.\n * @dev - This contract does not implement mint nor burn functions.\n *      - This is made on purpose to maintain some separation of concerns between:\n *        - financial / monetary primitives - handled by sERC20s, and\n *        - display / collectible primitives - handled by this Vault.\n *      - Let's note that the ERC1155 standard does not require neither mint nor burn functions.\n */\ncontract Vault is Context, ERC165, AccessControlEnumerable, IERC1155, IERC1155MetadataURI, IERC721Receiver, IVault {\n    using Address for address;\n    using Cast for address;\n    using Cast for bytes32;\n    using Cast for uint256;\n    using Cast for sIERC20;\n    using Clones for address;\n    using ERC165Checker for address;\n\n    bytes32 public constant FRACTIONALIZE_ROLE = keccak256(\"FRACTIONALIZE_ROLE\");\n    bytes32 public constant DERRIDA = 0x1d2496c631fd6d8be20fb18c5c1fa9499e1f28016c62da960ec6dcf752f2f7ce; // keccak256(\"Le spectral, ce sont ces autres, jamais présents comme tels, ni vivants ni morts, avec lesquels je m'entretiens\");\n\n    address private _sERC20Base;\n    string private _unavailableURI;\n    string private _unlockedURI;\n\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n    mapping(uint256 => Spectres.Spectre) private _spectres; // token type => Spectres.Spectre [immutable]\n    mapping(IERC721 => mapping(uint256 => uint256)) private _tokenTypes; // ERC721 => token type [re-initialized when unlocked]\n\n    /**\n     * @notice Vault constructor.\n     * @dev Neither Context, nor ERC165, nor AccessControlEnumerable have a constructor.\n     */\n    constructor(\n        address sERC20Base_,\n        string memory unavailableURI_,\n        string memory unlockedURI_\n    ) {\n        require(sERC20Base_ != address(0), \"Vault: sERC20 base cannot be the zero address\");\n\n        _sERC20Base = sERC20Base_;\n        _unavailableURI = unavailableURI_;\n        _unlockedURI = unlockedURI_;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    /** IERC165 */\n\n    /**\n     * @dev ERC165 and AccessControlEnumerable interfaces are supported through super.supportsInterface().\n     */\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, ERC165, AccessControlEnumerable) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            interfaceId == type(IERC721Receiver).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /** IERC1155 */\n\n    /**\n     * @notice Return the amount of tokens of type `id` owned by `account`.\n     * @dev `account` cannot be the zero address.\n     * @param account The account whose balance is queried.\n     * @param id The token type whose balance is queried.\n     * @return The amount of tokens of type `id` owned by `account`.\n     */\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\n        require(account != address(0), \"Vault: balance query for the zero address\");\n\n        return _spectres[id].state != Spectres.State.Null ? id.sERC20().balanceOf(account) : 0;\n    }\n\n    /**\n     * @notice Batched version of `balanceOf`.\n     * @dev - `accounts` and `ids` must have the same length.\n     *      - `accounts` entries cannot be the zero address.\n     * @param accounts The accounts whose balances are queried.\n     * @param ids The token types whose balances are queried.\n     * @return The amount of tokens of types `ids` owned by `accounts`.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) public view override returns (uint256[] memory) {\n        require(accounts.length == ids.length, \"Vault: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @notice Grant or revoke permission to `operator` to transfer the caller's tokens, according to `approved`.\n     * @dev Caller cannot set approval for self.\n     * @param operator The operator being approved.\n     * @param approved True if the operator is approved, false to revoke its approval.\n     */\n    function setApprovalForAll(address operator, bool approved) external override {\n        require(_msgSender() != operator, \"Vault: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @notice Transfer `amount` tokens of type `id` from `from` to `to`.\n     * @dev - `to` cannot be the zero address.\n     *      - If the caller is not `from`, it must be an approved operator of `from`.\n     *      - `from` must have a balance of tokens of type `id` of at least `amount`.\n     *      - If `to` refers to a smart contract, it must implement onERC1155Received and return the acceptance magic value.\n     * @param from The address to transfer the tokens from.\n     * @param to The address to transfer the tokens to.\n     * @param id The id of the token type to transfer.\n     * @param amount The amount of tokens to transfer.\n     * @param data The data to be passed to `onERC1155Received` on `_to` if it is a contract.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external override {\n        address operator = _msgSender();\n\n        require(to != address(0), \"Vault: transfer to the zero address\");\n        require(from == operator || _operatorApprovals[from][operator], \"Vault: must be owner or approved to transfer\");\n\n        id.sERC20().onERC1155Transferred(from, to, amount);\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @notice Batched version of `safeTransferFrom`.\n     * @dev - The same remarks as above apply, plus:\n     *      - `ids` and `amounts` must have the same length.\n     * @param from The address to transfer the tokens from.\n     * @param to The address to transfer the tokens to.\n     * @param ids The ids of the token types to transfer.\n     * @param amounts The amounts of tokens to transfer.\n     * @param data The data to be passed to `onERC1155Received` on `_to` if it is a contract.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external override {\n        address operator = _msgSender();\n\n        require(ids.length == amounts.length, \"Vault: ids and amounts length mismatch\");\n        require(to != address(0), \"Vault: transfer to the zero address\");\n        require(from == operator || _operatorApprovals[from][operator], \"Vault: must be owner or approved to transfer\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            ids[i].sERC20().onERC1155Transferred(from, to, amounts[i]);\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @notice Check whether `operator` is approved to transfer `account`'s tokens.\n     * @param account The account whose approval of `operator` is being queried.\n     * @param operator The operator whose approval from `account` is being queried.\n     * @return True if `operator` is approved to transfer `account`'s tokens, false otherwise.\n     */\n    function isApprovedForAll(address account, address operator) public view override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /** IERC1155MetadataURI */\n\n    /**\n     * @notice Return the URI for token type `id`.\n     * @dev - The ERC1155 standard requires this function to return the same value as the latest `URI` event for an `_id` if such events are emitted.\n     *      - Because we cannot control the wrapped NFT's URI updates, we do NOT emit such `URI` event at token type creation.\n     *      - See https://eips.ethereum.org/EIPS/eip-1155#metadata.\n     * @param id The id of the token type.\n     * @return - \"\" if the token type does not exist,\n     *         - `_unavailableURI` if the token type exists, its underlying ERC721 is still locked, but does not implement ERC721Metadata,\n     *         - `_unlockedURI` if the token type exists but its underlying ERC721 has been unlocked,\n     *         - the token type's underlying ERC721's URI otherwise.\n     *\n     */\n    function uri(uint256 id) public view override returns (string memory) {\n        Spectres.Spectre storage spectre = _spectres[id];\n\n        if (spectre.state == Spectres.State.Locked) {\n            try IERC721Metadata(address(spectre.collection)).tokenURI(spectre.tokenId) returns (string memory uri_) {\n                return uri_;\n            } catch {\n                return _unavailableURI;\n            }\n        }\n\n        if (spectre.state == Spectres.State.Unlocked) return _unlockedURI;\n\n        return \"\";\n    }\n\n    /** IERC721Receiver */\n\n    /**\n     * @notice Called whenever an NFT is transferred to this contract through ERC721#safeTransferFrom.\n     * @dev - We do not check that the NFT is not already locked as such a transfer could only be triggered by this very contract if the ERC721 contract itself\n     *        is not malicious. If the ERC721 is malicious, there is nothing we can do anyhow.\n     *      - We do not check that the NFT has actually been transferred as this function call should happen only after the transfer if the ERC721 contract\n     *        itself is not malicious. If the ERC721 is malicious, there is nothing we can do anyhow.\n     *      - This function extract the fractionalization parameters out of the data bytes.\n     *      - See `fractionalize` natspec for more details on those parameters.\n     *      - The data bytes are expected to look like this:\n     *        [\n     *          bytes32(name)    | 32 bytes\n     *          bytes32(symbol)  | 32 bytes\n     *          uint256(cap)     | 32 bytes\n     *          address(admin)   | 32 bytes\n     *          address(broker)  | 32 bytes\n     *          bytes32(DERRIDA) | 32 bytes\n     *        ]\n     */\n    function onERC721Received(\n        address, /* operator */\n        address, /* from */\n        uint256 tokenId,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        IERC721 collection = IERC721(_msgSender());\n        require(collection.supportsInterface(ERC165Ids.ERC721), \"Vault: NFT is not ERC721-compliant\");\n        require(data.length == 192, \"Vault: invalid fractionalization data length\");\n\n        bytes memory _data = data; // one cannot mload data located in calldata\n        bytes32 name;\n        bytes32 symbol;\n        uint256 cap;\n        address admin;\n        address broker;\n        bytes32 derrida;\n\n        assembly {\n            name := mload(add(_data, 32))\n            symbol := mload(add(_data, 64))\n            cap := mload(add(_data, 96))\n            admin := mload(add(_data, 128))\n            broker := mload(add(_data, 160))\n            derrida := mload(add(_data, 192))\n        }\n\n        require(derrida == DERRIDA, \"Vault: invalid fractionalization data\");\n\n        _fractionalize(collection, tokenId, address(collection), name.toString(), symbol.toString(), cap, admin, broker);\n\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /** IVault */\n\n    /**\n     * @notice Fractionalize the ERC721-compliant NFT belonging to `collection` and identified by `tokenId` into an sERC20.\n     * @dev - This contract must be approved to transfer the NFT before this function is called.\n     *      - sERC20-related parameters are checked in sERC20#initialize.\n     *      - This function is open to re-entrancy for it would be harmless.\n     * @param collection The address of the ERC721 contract the NFT to fractionalize belongs to.\n     * @param tokenId The tokenId of the NFT to fractionalize.\n     * @param name The name of the sERC20 to fractionalize the NFT into.\n     * @param symbol The symbol of the sERC20 to fractionalize the NFT into.\n     * @param cap The supply cap of the sERC20 to fractionalize the NFT into.\n     * @param admin The admin of the sERC20 to fractionalize the NFT into [allowed to manage its roles and permissions].\n     * @param broker The broker of the fractionalized NFT [allowed to unlock its spectre and release its NFT].\n     */\n    function fractionalize(\n        IERC721 collection,\n        uint256 tokenId,\n        string memory name,\n        string memory symbol,\n        uint256 cap,\n        address admin,\n        address broker\n    ) external override returns (uint256) {\n        require(\n            hasRole(FRACTIONALIZE_ROLE, _msgSender()) || _msgSender() == collection.ownerOf(tokenId),\n            \"Vault: must have FRACTIONALIZE_ROLE or be NFT owner to fractionalize\"\n        );\n        require(collection.supportsInterface(ERC165Ids.ERC721), \"Vault: NFT is not ERC721-compliant\");\n        require(_tokenTypes[collection][tokenId] == 0, \"Vault: NFT is already locked\");\n\n        address owner = collection.ownerOf(tokenId);\n        // in case the NFT accidentally ended up owned by this contract while un-fractionalized\n        require(owner != address(this), \"Vault: NFT is already owned by this vault\");\n\n        uint256 id = _fractionalize(collection, tokenId, _msgSender(), name, symbol, cap, admin, broker);\n        collection.transferFrom(owner, address(this), tokenId);\n\n        return id;\n    }\n\n    /**\n     * @notice Unlock the spectre tied to `sERC20` and transfer its underlying NFT to `recipient` with `data` as ERC721#safeTransferFrom callback data.\n     * @param sERC20 The sERC20 of the spectre to unlock.\n     * @param recipient The recipient of the spectre's underlying NFT.\n     * @param data The ERC721#safeTransferFrom callback data.\n     */\n    function unlock(\n        sIERC20 sERC20,\n        address recipient,\n        bytes calldata data\n    ) external override {\n        uint256 id = sERC20.id();\n        Spectres.Spectre storage spectre = _spectres[id];\n\n        require(spectre.state == Spectres.State.Locked, \"Vault: spectre is not locked\");\n        require(_msgSender() == spectre.broker, \"Vault: must be spectre's broker to unlock\");\n\n        _unlock(spectre.collection, spectre.tokenId, id, recipient, data);\n    }\n\n    /**\n     * @notice Set the URI associated to spectres whose underlying NFTs do not implement IERC721Metadata to `unavailableURI_`.\n     * @param unavailableURI_ The URI to associate to spectres whose underlying NFTs do not implement IERC721Metadata.\n     */\n    function setUnavailableURI(string memory unavailableURI_) external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Vault: must have DEFAULT_ADMIN_ROLE to set unavailableURI\");\n\n        _unavailableURI = unavailableURI_;\n    }\n\n    /**\n     * @notice Set the URI associated to unlocked spectres.\n     * @param unlockedURI_ The URI to associate to unlocked spectres.\n     */\n    function setUnlockedURI(string memory unlockedURI_) external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Vault: must have DEFAULT_ADMIN_ROLE to set unlockedURI\");\n\n        _unlockedURI = unlockedURI_;\n    }\n\n    /**\n     * @notice Mirror sERC20s transfers.\n     * @dev - This function is called by sERC20s whenever a transfer occurs at the sERC20 layer.\n     *      - This enable this vault to emit a `TransferSingle` event, as required per the ERC1155 standard, each time a transfer occurs [no matter which layer\n     *        this transfer is triggered from].\n     *      - If the recipient of the tokens implements ERC1155Receiver, its callback function is called.\n     * @param from The address the tokens have been transferred from.\n     * @param to The address the tokens have been transferred to.\n     * @param amount The amount of tokens which have been transferred.\n     */\n    function onERC20Transferred(\n        address from,\n        address to,\n        uint256 amount\n    ) external override {\n        address operator = _msgSender();\n        uint256 id = operator.id();\n\n        require(_spectres[id].state != Spectres.State.Null, \"Vault: must be sERC20 to use transfer hook\");\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        if (to.supportsInterface(ERC165Ids.ERC1155Receiver)) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, \"\") returns (\n                bytes4 /*response*/\n            ) {} catch Error(\n                string memory /*reason*/\n            ) {} catch {}\n        }\n    }\n\n    /**\n     * @notice Return the address of sERC20's implementation contract.\n     */\n    function sERC20Base() public view override returns (address) {\n        return _sERC20Base;\n    }\n\n    /**\n     * @notice Return the URI associated to spectres whose underlying NFTs do not implement IERC721Metadata.\n     */\n    function unavailableURI() public view override returns (string memory) {\n        return _unavailableURI;\n    }\n\n    /**\n     * @notice Return the URI associated to unlocked spectres.\n     */\n    function unlockedURI() public view override returns (string memory) {\n        return _unlockedURI;\n    }\n\n    /**\n     * @notice Check whether the NFT belonging to `collection` and identified by `tokenId` is locked into this vault or not.\n     */\n    function isLocked(IERC721 collection, uint256 tokenId) public view override returns (bool) {\n        return _tokenTypes[collection][tokenId] != 0;\n    }\n\n    /**\n     * @notice Return the token type associated to the NFT belonging to `collection` and identified by `tokenId` [return 0 if the NFT is not currently locked].\n     */\n    function tokenTypeOf(IERC721 collection, uint256 tokenId) public view override returns (uint256) {\n        return _tokenTypes[collection][tokenId];\n    }\n\n    /**\n     * @notice Return the spectre associated to the token type `id` .\n     * @param id The id of the token type whose spectre is queried.\n     */\n    function spectreOf(uint256 id) public view override returns (Spectres.Spectre memory) {\n        return _spectres[id];\n    }\n\n    /**\n     * @notice Return the spectre associated to the sERC20 `sERC20`.\n     * @param sERC20 The sERC20 whose spectre is queried.\n     */\n    function spectreOf(sIERC20 sERC20) public view override returns (Spectres.Spectre memory) {\n        return _spectres[sERC20.id()];\n    }\n\n    /**\n     * @notice Return the sERC20 associated to the token type `id`.\n     * @param id The id of the token type whose sERC20 is queried.\n     */\n    function sERC20Of(uint256 id) public pure override returns (sIERC20) {\n        return id.sERC20();\n    }\n\n    /** private */\n\n    function _fractionalize(\n        IERC721 collection,\n        uint256 tokenId,\n        address operator,\n        string memory name,\n        string memory symbol,\n        uint256 cap,\n        address admin,\n        address broker\n    ) private returns (uint256) {\n        address sERC20 = _sERC20Base.clone();\n        uint256 id = sERC20.id();\n\n        _spectres[id] = Spectres.Spectre({state: Spectres.State.Locked, collection: collection, tokenId: tokenId, broker: broker});\n        _tokenTypes[collection][tokenId] = id;\n\n        sIERC20(sERC20).initialize(name, symbol, cap, admin);\n\n        emit TransferSingle(operator, address(0), address(0), id, uint256(0));\n        emit Fractionalize(collection, tokenId, id, sIERC20(sERC20), broker);\n\n        return id;\n    }\n\n    function _unlock(\n        IERC721 collection,\n        uint256 tokenId,\n        uint256 id,\n        address recipient,\n        bytes memory data\n    ) private {\n        _spectres[id].state = Spectres.State.Unlocked;\n        delete _tokenTypes[collection][tokenId];\n\n        collection.safeTransferFrom(address(this), recipient, tokenId, data);\n\n        emit Unlock(id, recipient);\n    }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"Vault: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"Vault: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"Vault: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"Vault: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n}\n"
    },
    "contracts/vault/libraries/Cast.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"../../token/sIERC20.sol\";\n\n/**\n * @title Cast\n * @dev - Enables casting between ERC1155 token types ids and sERC20 addresses.\n *      - Enables casting from bytes32 to string.\n */\nlibrary Cast {\n    function id(address _sERC20) internal pure returns (uint256) {\n        return uint256(uint160(_sERC20));\n    }\n\n    function id(sIERC20 _sERC20) internal pure returns (uint256) {\n        return uint256(uint160(address(_sERC20)));\n    }\n\n    function sERC20(uint256 _id) internal pure returns (sIERC20) {\n        return sIERC20(address(uint160(_id)));\n    }\n\n    function toString(bytes32 _bytes32) internal pure returns (string memory) {\n        uint256 i = 0;\n        while (i < 32 && _bytes32[i] != 0) {\n            i++;\n        }\n\n        bytes memory characters = new bytes(i);\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\n            characters[i] = _bytes32[i];\n        }\n\n        return string(characters);\n    }\n}\n"
    },
    "contracts/vault/libraries/ERC165Ids.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nlibrary ERC165Ids {\n    bytes4 internal constant ERC721 = 0x80ac58cd;\n    bytes4 internal constant ERC1155Receiver = 0x4e2312e0;\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "contracts/mock/ERC1155ReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\ncontract ERC1155ReceiverMock is IERC1155Receiver {\n    bytes4 private _receiveValue;\n    bool private _receiveReverts;\n    bytes4 private _batchReceiveValue;\n    bool private _batchReceiveReverts;\n\n    event Received(address operator, address from, uint256 id, uint256 value);\n    event BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data);\n\n    constructor(\n        bytes4 receiveValue,\n        bool receiveReverts,\n        bytes4 batchReceiveValue,\n        bool batchReceiveReverts\n    ) {\n        _receiveValue = receiveValue;\n        _receiveReverts = receiveReverts;\n        _batchReceiveValue = batchReceiveValue;\n        _batchReceiveReverts = batchReceiveReverts;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure override(IERC165) returns (bool) {\n        return interfaceId == type(IERC165).interfaceId || interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata /*data*/\n    ) external override returns (bytes4) {\n        require(!_receiveReverts, \"ERC1155ReceiverMock: reverting on receive\");\n        emit Received(operator, from, id, value);\n\n        return _receiveValue;\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        require(!_batchReceiveReverts, \"ERC1155ReceiverMock: reverting on batch receive\");\n        emit BatchReceived(operator, from, ids, values, data);\n        return _batchReceiveValue;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/token/sERC721.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.0;\n\nimport \"./sIERC721.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract sERC721 is Context, AccessControlEnumerable, ERC721Burnable, ERC721Enumerable, ERC721Pausable, ERC721URIStorage, sIERC721 {\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINT_ROLE = keccak256(\"MINT_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function mint(address to, string memory _tokenURI) external override whenNotPaused returns (uint256) {\n        require(hasRole(MINT_ROLE, _msgSender()), \"sERC721: must have MINT_ROLE to mint\");\n\n        uint256 tokenId = _tokenIdTracker.current();\n\n        _mint(to, tokenId);\n        _setTokenURI(tokenId, _tokenURI);\n\n        _tokenIdTracker.increment();\n\n        return tokenId;\n    }\n\n    function pause() external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"sERC721: must have DEFAULT_ADMIN_ROLE to pause\");\n\n        _pause();\n    }\n\n    function unpause() external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"sERC721: must have DEFAULT_ADMIN_ROLE to unpause\");\n\n        _unpause();\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, AccessControlEnumerable, ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function tokenURI(uint256 tokenId) public view override(IERC721Metadata, ERC721, ERC721URIStorage) returns (string memory) {\n        return super.tokenURI(tokenId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override(ERC721, ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n        super._burn(tokenId);\n    }\n}\n"
    },
    "contracts/token/sIERC721.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface sIERC721 is IERC721, IERC721Metadata, IERC721Enumerable {\n    function mint(address to, string memory _tokenURI) external returns (uint256);\n\n    function pause() external;\n\n    function unpause() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/channeler/Channeler.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./IChanneler.sol\";\nimport \"../broker/IBroker.sol\";\nimport {IIssuer} from \"../issuer/IIssuer.sol\";\nimport \"../utils/ISplitter.sol\";\nimport \"../vault/IVault.sol\";\nimport \"../token/sIERC20.sol\";\nimport \"../token/sIERC721.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Channeler\n * @notice Wraps all the transactions needed to fractionalize an NFT into one atomic transaction.\n */\ncontract Channeler is Context, AccessControlEnumerable, Pausable, IChanneler {\n    bytes32 private constant MINT_ROLE = keccak256(\"MINT_ROLE\");\n\n    sIERC721 private immutable _sERC721;\n    IVault private immutable _vault;\n    IIssuer private immutable _issuer;\n    IBroker private immutable _broker;\n    ISplitter private immutable _splitter;\n\n    constructor(\n        address sERC721_,\n        address vault_,\n        address issuer_,\n        address broker_,\n        address splitter_\n    ) {\n        require(sERC721_ != address(0), \"Channeler: sERC721 cannot be the zero address\");\n        require(vault_ != address(0), \"Channeler: vault cannot be the zero address\");\n        require(issuer_ != address(0), \"Channeler: issuer cannot be the zero address\");\n        require(broker_ != address(0), \"Channeler: broker cannot be the zero address\");\n        require(splitter_ != address(0), \"Channeler: splitter cannot be the zero address\");\n\n        _sERC721 = sIERC721(sERC721_);\n        _vault = IVault(vault_);\n        _issuer = IIssuer(issuer_);\n        _broker = IBroker(broker_);\n        _splitter = ISplitter(splitter_);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function mintAndFractionalize(string memory _tokenURI, FractionalizationData calldata data) external override whenNotPaused {\n        uint256 tokenId = _sERC721.mint(_msgSender(), _tokenURI);\n        fractionalize(IERC721(_sERC721), tokenId, data);\n    }\n\n    function fractionalize(\n        IERC721 collection,\n        uint256 tokenId,\n        FractionalizationData calldata data\n    ) public override whenNotPaused {\n        require(_msgSender() == collection.ownerOf(tokenId), \"Channeler: must be NFT owner to fractionalize\");\n\n        sIERC20 sERC20 = _fractionalize(collection, tokenId, data.name, data.symbol, data.cap);\n        uint256 allocation = _splitter.register(sERC20, data.beneficiaries, data.shares);\n        _broker.register(sERC20, data.guardian, data.buyoutReserve, data.multiplier, data.timelock, data.buyoutFlash, true, false);\n        _issuer.register(\n            sERC20,\n            data.guardian,\n            data.sMaxNormalizedWeight,\n            data.sMinNormalizedWeight,\n            data.swapFeePercentage,\n            data.issuanceReserve,\n            allocation,\n            data.fee,\n            data.issuanceFlash\n        );\n        sIERC20(sERC20).grantRole(MINT_ROLE, address(_issuer));\n    }\n\n    function pause() external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Channeler: must have DEFAULT_ADMIN_ROLE to pause\");\n\n        _pause();\n    }\n\n    function unpause() external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Channeler: must have DEFAULT_ADMIN_ROLE to unpause\");\n\n        _unpause();\n    }\n\n    function sERC721() public view override returns (sIERC721) {\n        return _sERC721;\n    }\n\n    function vault() public view override returns (IVault) {\n        return _vault;\n    }\n\n    function issuer() public view override returns (IIssuer) {\n        return _issuer;\n    }\n\n    function broker() public view override returns (IBroker) {\n        return _broker;\n    }\n\n    function splitter() public view override returns (ISplitter) {\n        return _splitter;\n    }\n\n    function _fractionalize(\n        IERC721 collection,\n        uint256 tokenId,\n        string memory name,\n        string memory symbol,\n        uint256 cap\n    ) private returns (sIERC20) {\n        uint256 id = _vault.fractionalize(collection, tokenId, name, symbol, cap, address(this), address(_broker));\n        return _vault.sERC20Of(id);\n    }\n}\n"
    },
    "contracts/channeler/IChanneler.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"../broker/IBroker.sol\";\nimport {IIssuer} from \"../issuer/IIssuer.sol\";\nimport \"../utils/ISplitter.sol\";\nimport \"../vault/IVault.sol\";\nimport \"../token/sIERC20.sol\";\nimport \"../token/sIERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IChanneler {\n    struct FractionalizationData {\n        address guardian;\n        string name;\n        string symbol;\n        uint256 cap;\n        uint256 buyoutReserve;\n        uint256 multiplier;\n        uint256 timelock;\n        uint256 sMaxNormalizedWeight;\n        uint256 sMinNormalizedWeight;\n        address[] beneficiaries;\n        uint256[] shares;\n        uint256 swapFeePercentage;\n        uint256 issuanceReserve;\n        uint256 fee;\n        bool buyoutFlash;\n        bool issuanceFlash;\n    }\n\n    function mintAndFractionalize(string memory _tokenURI, FractionalizationData calldata data) external;\n\n    function fractionalize(\n        IERC721 collection,\n        uint256 tokenId,\n        FractionalizationData calldata data\n    ) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function sERC721() external view returns (sIERC721);\n\n    function vault() external view returns (IVault);\n\n    function issuer() external view returns (IIssuer);\n\n    function broker() external view returns (IBroker);\n\n    function splitter() external view returns (ISplitter);\n}\n"
    },
    "contracts/utils/ISplitter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"../token/sIERC20.sol\";\n\ninterface ISplitter {\n    struct Split {\n        uint256 totalWithdrawn;\n        mapping(address => uint256) shares;\n        mapping(address => uint256) withdrawn;\n    }\n\n    event Register(sIERC20 indexed sERC20, address[] beneficiaries, uint256[] shares, uint256 fee, uint256 allocation);\n    event Withdraw(sIERC20 indexed sERC20, address indexed beneficiary, uint256 amount);\n    event SetBank(address bank);\n    event SetProtocolFee(uint256 protocolFee);\n\n    function register(\n        sIERC20 sERC20,\n        address[] calldata beneficiaries,\n        uint256[] calldata shares\n    ) external returns (uint256);\n\n    function withdraw(sIERC20 sERC20, address beneficiary) external;\n\n    function withdrawBatch(sIERC20[] calldata sERC20s, address beneficiary) external;\n\n    function setBank(address bank_) external;\n\n    function setProtocolFee(uint256 fee_) external;\n\n    function bank() external view returns (address);\n\n    function protocolFee() external view returns (uint256);\n\n    function stateOf(sIERC20 sERC20) external view returns (uint256 received, uint256 totalWithdrawn);\n\n    function shareOf(sIERC20 sERC20, address beneficiary) external view returns (uint256);\n\n    function withdrawnBy(sIERC20 sERC20, address beneficiary) external view returns (uint256);\n}\n"
    },
    "contracts/utils/Splitter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./ISplitter.sol\";\nimport \"../token/sIERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Splitter\n * @notice Splits received sERC20s between registered beneficiaries.\n */\ncontract Splitter is Context, AccessControlEnumerable, ISplitter {\n    bytes32 public constant REGISTER_ROLE = keccak256(\"REGISTER_ROLE\");\n    uint256 public constant HUNDRED = 1e20; // 100% = 1e20 | 1% = 1e18 | 0% = 0\n\n    address private _bank;\n    uint256 private _protocolFee;\n\n    mapping(sIERC20 => Split) private _splits;\n\n    constructor(address bank_, uint256 protocolFee_) {\n        require(bank_ != address(0), \"Splitter: bank cannot be the zero address\");\n        require(protocolFee_ < HUNDRED, \"Splitter: protocol fee must be inferior to 100%\");\n\n        _setBank(bank_);\n        _setProtocolFee(protocolFee_);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    /**\n     * @notice Register an `sERC20` whose received tokens are to split between `beneficiaries` with respect to `shares`.\n     * @dev - We do not check neither that `sERC20` is unregistered nor that it actually is an sERC20 to save gas.\n     *      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations, are supposed to be granted REGISTER_ROLE.\n     *      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.\n     * @param sERC20 The sERC20 whose received tokens are to split between beneficiaries.\n     * @param beneficiaries The addresses between which to split the received sERC20s.\n     * @param shares The respective shares of the beneficiaries [expressed with 1e18 decimals].\n     */\n    function register(\n        sIERC20 sERC20,\n        address[] calldata beneficiaries,\n        uint256[] calldata shares\n    ) external override returns (uint256) {\n        Split storage split = _splits[sERC20];\n\n        require(hasRole(REGISTER_ROLE, _msgSender()), \"Splitter: must have REGISTER_ROLE to register\");\n        require(beneficiaries.length == shares.length, \"Splitter: beneficiaries and shares length mismatch\");\n\n        uint256 total;\n        uint256 share;\n        uint256 protocolFee_ = _protocolFee;\n\n        for (uint256 i = 0; i < shares.length; i++) {\n            share = shares[i];\n\n            require(beneficiaries[i] != address(0), \"Splitter: beneficiary cannot be the zero address\");\n            require(share != uint256(0), \"Splitter: share cannot be worth zero\");\n            total += share;\n        }\n\n        total += protocolFee_;\n\n        if (total > 0) {\n            uint256 normalizedShare;\n            uint256 normalizedTotal;\n\n            for (uint256 i = 0; i < beneficiaries.length; i++) {\n                normalizedShare = (shares[i] * HUNDRED) / total;\n                split.shares[beneficiaries[i]] = normalizedShare;\n                normalizedTotal += normalizedShare;\n            }\n\n            // avoid rounding issues\n            split.shares[_bank] = HUNDRED - normalizedTotal;\n        }\n\n        emit Register(sERC20, beneficiaries, shares, protocolFee_, total);\n\n        return total;\n    }\n\n    /**\n     * @notice Withdraw `sERC20` tokens due to `beneficiary`.\n     * @dev - We do not check neither that `sERC20` is registered nor that split.shares[beneficiary] != 0.\n     *      - Indeed, the contract already reverts in such a situation for due == withdrawn == 0.\n     * @param sERC20 The sERC20 to withdraw.\n     * @param beneficiary The beneficiary from whom to withdraw the due sERC20 tokens.\n     */\n    function withdraw(sIERC20 sERC20, address beneficiary) external override {\n        Split storage split = _splits[sERC20];\n\n        uint256 due = ((sERC20.balanceOf(address(this)) + split.totalWithdrawn) * split.shares[beneficiary]) / HUNDRED;\n        uint256 withdrawn = split.withdrawn[beneficiary];\n        uint256 amount = due - withdrawn;\n\n        require(due > withdrawn, \"Splitter: nothing to withdraw\");\n\n        split.withdrawn[beneficiary] += amount;\n        split.totalWithdrawn += amount;\n\n        sERC20.transfer(beneficiary, amount);\n\n        emit Withdraw(sERC20, beneficiary, amount);\n    }\n\n    /**\n     * @notice Batch withdraw `sERC20s` tokens due to `beneficiary`.\n     * @dev - The same security remarks as above apply, plus:\n     *      - It is up to the user not to include the same sERC20 twice in `sERC20s` - otherwise the transaction reverts.\n     *      - We do not check the sERC20s array length as the gas limit can rise in the future.\n     *      - Therefore, it is up to the user to make sure he does not run out of gas.\n     * @param sERC20s The sERC20s to withdraw.\n     * @param beneficiary The beneficiary from whom to withdraw the due sERC20s tokens.\n     */\n    function withdrawBatch(sIERC20[] calldata sERC20s, address beneficiary) external override {\n        sIERC20 sERC20;\n        uint256 due;\n        uint256 withdrawn;\n        uint256 amount;\n\n        for (uint256 i = 0; i < sERC20s.length; i++) {\n            sERC20 = sERC20s[i];\n            Split storage split = _splits[sERC20];\n\n            due = ((sERC20.balanceOf(address(this)) + split.totalWithdrawn) * split.shares[beneficiary]) / HUNDRED;\n            withdrawn = split.withdrawn[beneficiary];\n            amount = due - withdrawn;\n\n            require(due > withdrawn, \"Splitter: nothing to withdraw\");\n\n            split.withdrawn[beneficiary] += amount;\n            split.totalWithdrawn += amount;\n\n            sERC20.transfer(beneficiary, amount);\n\n            emit Withdraw(sERC20, beneficiary, amount);\n        }\n    }\n\n    /**\n     * @notice Set the splitter's bank.\n     * @param bank_ The bank to set.\n     */\n    function setBank(address bank_) external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Splitter: must have DEFAULT_ADMIN_ROLE to set bank\");\n        require(bank_ != address(0), \"Splitter: bank cannot be the zero address\");\n\n        _setBank(bank_);\n    }\n\n    /**\n     * @notice Set the splitter's fee.\n     * @param fee_ The fee to set [expressed with 1e18 decimals].\n     */\n    function setProtocolFee(uint256 fee_) external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Splitter: must have DEFAULT_ADMIN_ROLE to set protocol fee\");\n        require(fee_ < HUNDRED, \"Splitter: protocol fee must be inferior to 100%\");\n\n        _setProtocolFee(fee_);\n    }\n\n    /**\n     * @notice Return the splitter's bank.\n     */\n    function bank() public view override returns (address) {\n        return _bank;\n    }\n\n    /**\n     * @notice Return the splitter's fee.\n     */\n    function protocolFee() public view override returns (uint256) {\n        return _protocolFee;\n    }\n\n    /**\n     * @notice Return the amount of `sERC20` tokens received and whithdrawn.\n     */\n    function stateOf(sIERC20 sERC20) public view override returns (uint256 received, uint256 totalWithdrawn) {\n        Split storage split = _splits[sERC20];\n\n        totalWithdrawn = split.totalWithdrawn;\n        received = sERC20.balanceOf(address(this)) + totalWithdrawn;\n    }\n\n    /**\n     * @notice Return the share of `beneficiary` over the received `sERC20` tokens [expressed with 1e18 decimals].\n     */\n    function shareOf(sIERC20 sERC20, address beneficiary) public view override returns (uint256) {\n        return _splits[sERC20].shares[beneficiary];\n    }\n\n    /**\n     * @notice Return the amount of `sERC20` tokens already withdrawn by `beneficiary`.\n     */\n    function withdrawnBy(sIERC20 sERC20, address beneficiary) public view override returns (uint256) {\n        return _splits[sERC20].withdrawn[beneficiary];\n    }\n\n    function _setBank(address bank_) private {\n        _bank = bank_;\n\n        emit SetBank(bank_);\n    }\n\n    function _setProtocolFee(uint256 protocolFee_) private {\n        _protocolFee = protocolFee_;\n\n        emit SetProtocolFee(protocolFee_);\n    }\n}\n"
    },
    "contracts/issuer/Issuer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"./IIssuer.sol\";\nimport \"./interfaces/IBalancer.sol\";\nimport \"./interfaces/IFractionalizationBootstrappingPool.sol\";\nimport \"./interfaces/IFractionalizationBootstrappingPoolFactory.sol\";\nimport \"./libraries/Issuances.sol\";\nimport \"../token/sIERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Issuer\n * @notice Handles the issuance of sERC20 tokens.\n */\ncontract Issuer is Context, AccessControlEnumerable, IIssuer {\n    using Address for address payable;\n    using Proposals for Proposals.Proposal;\n\n    bytes32 public constant CLOSE_ROLE = keccak256(\"CLOSE_ROLE\");\n    bytes32 public constant REGISTER_ROLE = keccak256(\"REGISTER_ROLE\");\n    uint256 public constant DECIMALS = 1e18;\n    uint256 public constant HUNDRED = 1e20;\n\n    IBVault private immutable _vault;\n    IFractionalizationBootstrappingPoolFactory private immutable _poolFactory;\n    address private immutable _splitter;\n    address private immutable _WETH;\n    address private _bank;\n    uint256 private _protocolFee;\n    mapping(sIERC20 => Issuances.Issuance) private _issuances;\n\n    constructor(\n        IBVault vault_,\n        IFractionalizationBootstrappingPoolFactory poolFactory_,\n        address splitter_,\n        address bank_,\n        uint256 protocolFee_\n    ) {\n        require(address(vault_) != address(0), \"Issuer: vault cannot be the zero address\");\n        require(address(poolFactory_) != address(0), \"Issuer: pool factory cannot be the zero address\");\n        require(splitter_ != address(0), \"Issuer: splitter cannot be the zero address\");\n        require(bank_ != address(0), \"Issuer: bank cannot be the zero address\");\n        require(protocolFee_ < HUNDRED, \"Issuer: protocol fee must be inferior to 100%\");\n\n        _vault = vault_;\n        _poolFactory = poolFactory_;\n        _splitter = splitter_;\n        _WETH = vault_.WETH();\n        _setBank(bank_);\n        _setProtocolFee(protocolFee_);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    /**\n     * @notice Initiate the issuance of `sERC20`.\n     * @dev - We do not check neither that:\n     *        - `sERC20` actually is an sERC20\n     *        - nor that this contract is granted MINT_ROLE over `sERC20`\n              to save gas.\n     *      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations and self-computing `allocation`, are supposed to be\n     *        granted REGISTER_ROLE.\n     *      - Pool-related parameters are checked by the FractionalizationBootstrappingPool's constructor.\n     *      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.\n     * @param sERC20 The sERC20 to initiate the issuance of.\n     * @param guardian The account authorized to enable flash issuance and accept / reject proposals otherwise [also receives ETH proceeds].\n     * @param sMaxNormalizedWeight The maximum normalized weight of the sERC20 in the FractionalizationBootstrappingPool to be deployed.\n     * @param sMinNormalizedWeight The minimum normalized weight of the sERC20 in the FractionalizationBootstrappingPool to be deployed.\n     * @param swapFeePercentage The swap fee of the FractionalizationBootstrappingPool to be deployed [expressed with 1e16 decimals].\n     * @param reserve The reserve price below which sERC20 tokens can be issued [expressed in sERC20 per ETH and 1e18 decimals].\n     * @param allocation The pre-allocated percentage of sERC20s [expressed with 1e18 decimals].\n     * @param fee The issuance fee.\n     * @param flash True if flash issuance is enabled, false otherwise.\n     */\n    function register(\n        sIERC20 sERC20,\n        address guardian,\n        uint256 sMaxNormalizedWeight,\n        uint256 sMinNormalizedWeight,\n        uint256 swapFeePercentage,\n        uint256 reserve,\n        uint256 allocation,\n        uint256 fee,\n        bool flash\n    ) external override {\n        IFractionalizationBootstrappingPool pool;\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n        bool sERC20IsToken0 = address(sERC20) <= _WETH;\n\n        require(hasRole(REGISTER_ROLE, _msgSender()), \"Issuer: must have REGISTER_ROLE to register\");\n        require(issuance.state == Issuances.State.Null, \"Issuer: issuance already registered\");\n        require(guardian != address(0), \"Issuer: guardian cannot be the zero address\");\n        require(reserve != 0, \"Issuer: reserve price cannot be null\");\n        require(allocation < HUNDRED, \"Issuer: allocation must be inferior to 100%\");\n        require(fee < HUNDRED, \"Issuer: issuance fee must be inferior to 100%\");\n\n        if (sERC20IsToken0) {\n            pool = IFractionalizationBootstrappingPool(\n                _poolFactory.create(\n                    \"Fractionalization Bootstrapping Pool Token\",\n                    \"FBPT\",\n                    address(sERC20),\n                    _WETH,\n                    sMaxNormalizedWeight,\n                    sMinNormalizedWeight,\n                    swapFeePercentage,\n                    true\n                )\n            );\n        } else {\n            pool = IFractionalizationBootstrappingPool(\n                _poolFactory.create(\n                    \"Fractionalization Bootstrapping Pool Token\",\n                    \"FBPT\",\n                    _WETH,\n                    address(sERC20),\n                    sMaxNormalizedWeight,\n                    sMinNormalizedWeight,\n                    swapFeePercentage,\n                    false\n                )\n            );\n        }\n\n        bytes32 poolId = pool.getPoolId();\n        issuance.state = Issuances.State.Opened;\n        issuance.guardian = guardian;\n        issuance.pool = pool;\n        issuance.poolId = poolId;\n        issuance.reserve = reserve;\n        issuance.allocation = allocation;\n        issuance.fee = fee;\n        issuance.sERC20IsToken0 = sERC20IsToken0;\n\n        emit Register(sERC20, guardian, pool, poolId, sMaxNormalizedWeight, sMinNormalizedWeight, swapFeePercentage, reserve, allocation, fee);\n\n        if (flash) _enableFlashIssuance(sERC20, issuance);\n    }\n\n    /**\n     * @notice Issue at least `expected` `sERC20` tokens.\n     * @dev - We do not check that sERC20.cap() > sERC20.totalSupply().\n     *      - Indeed, to make sure the transaction does not revert, we would need to take both the price, LP reward and allocation into consideration.\n     *      - That would involve a lot of un-necessary computations as the sERC20 reverts in such a situation anyhow.\n     * @param expected The minimum amount of sERC20 to issue [reverts otherwise].\n     */\n    function issue(sIERC20 sERC20, uint256 expected) external payable override {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n\n        require(issuance.state == Issuances.State.Opened, \"Issuer: invalid issuance state\");\n        require(issuance.flash, \"Issuer: flash issuance is disabled\");\n        require(msg.value != 0, \"Issuer: issuance value cannot be null\");\n\n        bool poolIsInitialized = issuance.pool.totalSupply() > 0;\n        bool sERC20IsToken0 = issuance.sERC20IsToken0;\n\n        uint256 price = _priceOf(issuance.pool, issuance.reserve, poolIsInitialized, sERC20IsToken0);\n        uint256 amount = _issue(sERC20, issuance, _msgSender(), msg.value, price, poolIsInitialized, sERC20IsToken0);\n\n        require(amount >= expected, \"Issuer: insufficient issuance return\");\n    }\n\n    /**\n     * @notice Create a proposal to issue `sERC20` tokens at a price of `price` sERC20 per ETH.\n     * @dev - We do not check that sERC20.cap() > sERC20.totalSupply().\n     *      - Indeed, to make sure the transaction does not revert, we would need to take both the price, LP reward and allocation into consideration.\n     *      - That would involve a lot of un-necessary computations as the sERC20 reverts in such a situation anyhow.\n     * @param sERC20 The sERC20 to issue.\n     * @param price The price at which sERC20s are proposed to be issued [in sERC20 per ETH].\n     * @param lifespan The lifespan of the proposal [in seconds].\n     */\n    function createProposal(\n        sIERC20 sERC20,\n        uint256 price,\n        uint256 lifespan\n    ) external payable override returns (uint256) {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n        address buyer = _msgSender();\n\n        require(issuance.state == Issuances.State.Opened, \"Issuer: invalid issuance state\");\n        require(!issuance.flash, \"Issuer: flash issuance is enabled\");\n        require(msg.value > 0, \"Issuer: issuance value cannot be null\");\n        require(\n            price > 0 && price <= _priceOf(issuance.pool, issuance.reserve, issuance.pool.totalSupply() > 0, issuance.sERC20IsToken0),\n            \"Issuer: invalid issuance price\"\n        );\n\n        uint256 proposalId = issuance.nbOfProposals++;\n        uint256 expiration = lifespan == 0 ? 0 : block.timestamp + lifespan;\n        issuance.proposals[proposalId] = Proposals.Proposal({\n            _state: Proposals.State.Pending,\n            buyer: buyer,\n            value: msg.value,\n            price: price,\n            expiration: expiration\n        });\n\n        emit CreateProposal(sERC20, proposalId, buyer, msg.value, price, expiration);\n\n        return proposalId;\n    }\n\n    /**\n     * @notice Accept proposal #`proposalId` to issue `sERC20` tokens.\n     * @param sERC20 The sERC20 which was proposed to be issued.\n     * @param proposalId The id of the issuance proposal.\n     */\n    function acceptProposal(sIERC20 sERC20, uint256 proposalId) external override {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n        Proposals.Proposal storage proposal = issuance.proposals[proposalId];\n\n        require(_msgSender() == issuance.guardian, \"Issuer: must be issuance's guardian to accept proposal\");\n        require(issuance.state == Issuances.State.Opened, \"Issuer: invalid issuance state\");\n        require(proposal.state() == Proposals.State.Pending, \"Issuer: invalid proposal state\");\n        require(!issuance.flash, \"Issuer: flash issuance is enabled\");\n\n        proposal._state = Proposals.State.Accepted;\n\n        emit AcceptProposal(sERC20, proposalId);\n\n        _issue(sERC20, issuance, proposal.buyer, proposal.value, proposal.price, issuance.pool.totalSupply() > 0, issuance.sERC20IsToken0);\n    }\n\n    /**\n     * @notice Reject proposal #`proposalId` to issue `sERC20` tokens.\n     * @dev This function is open to re-entrancy for it would be harmless.\n     * @param sERC20 The sERC20 which was proposed to be issued.\n     * @param proposalId The id of the issuance proposal.\n     */\n    function rejectProposal(sIERC20 sERC20, uint256 proposalId) external override {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n        Proposals.Proposal storage proposal = issuance.proposals[proposalId];\n        Proposals.State state = proposal.state();\n\n        require(_msgSender() == issuance.guardian, \"Issuer: must be issuance's guardian to reject proposal\");\n        require(state == Proposals.State.Pending || state == Proposals.State.Lapsed, \"Issuer: invalid proposal state\");\n\n        address buyer = proposal.buyer;\n        uint256 value = proposal.value;\n        delete issuance.proposals[proposalId];\n\n        payable(buyer).sendValue(value);\n\n        emit RejectProposal(sERC20, proposalId);\n    }\n\n    /**\n     * @notice Withdraw proposal #`proposalId` to issue `sERC20` tokens..\n     * @dev This function is open to re-entrancy for it would be harmless.\n     * @param sERC20 The sERC20 which was proposed to be issued.\n     * @param proposalId The id of the issuance proposal.\n     */\n    function withdrawProposal(sIERC20 sERC20, uint256 proposalId) external override {\n        Proposals.Proposal storage proposal = _issuances[sERC20].proposals[proposalId];\n        Proposals.State state = proposal.state();\n\n        require(_msgSender() == proposal.buyer, \"Issuer: must be proposal's buyer to withdraw proposal\");\n        require(state == Proposals.State.Pending || state == Proposals.State.Lapsed, \"Issuer: invalid proposal state\");\n\n        address buyer = proposal.buyer;\n        uint256 value = proposal.value;\n        delete _issuances[sERC20].proposals[proposalId];\n\n        payable(buyer).sendValue(value);\n\n        emit WithdrawProposal(sERC20, proposalId);\n    }\n\n    /**\n     * @notice Close the issuance of `sERC20`.\n     * @param sERC20 The sERC20 whose issuance to close.\n     */\n    function close(sIERC20 sERC20) external override {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n\n        require(hasRole(CLOSE_ROLE, _msgSender()), \"Issuer: must have CLOSE_ROLE to close issuance\");\n        require(issuance.state == Issuances.State.Opened, \"Issuer: invalid issuance state\");\n\n        issuance.state = Issuances.State.Closed;\n        issuance.pool.close();\n\n        emit Close(sERC20);\n    }\n\n    /**\n     * @notice Enable flash issuance for `sERC20`.\n     * @param sERC20 The sERC20 to enable flash issuance for.\n     */\n    function enableFlashIssuance(sIERC20 sERC20) external override {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n\n        require(_msgSender() == issuance.guardian, \"Issuer: must be issuance's guardian to enable flash issuance\");\n        require(issuance.state == Issuances.State.Opened, \"Issuer: invalid issuance state\");\n        require(!issuance.flash, \"Issuer: flash issuance already enabled\");\n\n        _enableFlashIssuance(sERC20, issuance);\n    }\n\n    /**\n     * @notice Set the reserve price for the issuance of `sERC20`.\n     * @param sERC20 The sERC20 whose issuance reserve price is updated.\n     * @param reserve The reserve price below which sERC20 tokens can be issued [expressed in sERC20 per ETH and 1e18 decimals].\n     */\n    function setReserve(sIERC20 sERC20, uint256 reserve) external override {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n\n        require(_msgSender() == issuance.guardian, \"Issuer: must be issuance's guardian to set reserve\");\n        require(issuance.state == Issuances.State.Opened, \"Issuer: invalid issuance state\");\n        require(reserve != 0, \"Issuer: reserve price cannot be null\");\n\n        issuance.reserve = reserve;\n\n        emit SetReserve(sERC20, reserve);\n    }\n\n    /**\n     * @notice Set the issuer's bank [to which protocol fees are transferred].\n     */\n    function setBank(address bank_) external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Issuer: must have DEFAULT_ADMIN_ROLE to set bank\");\n        require(bank_ != address(0), \"Issuer: bank cannot be the zero address\");\n\n        _setBank(bank_);\n    }\n\n    /**\n     * @notice Set the issuer's protocol fee [expressed with 1e18 decimals].\n     */\n    function setProtocolFee(uint256 protocolFee_) external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Issuer: must have DEFAULT_ADMIN_ROLE to set protocol fee\");\n        require(protocolFee_ < HUNDRED, \"Issuer: protocol fee must be inferior to 100%\");\n\n        _setProtocolFee(protocolFee_);\n    }\n\n    /**\n     * @notice Return the issuer's Balancer vault.\n     */\n    function vault() public view override returns (IBVault) {\n        return _vault;\n    }\n\n    /**\n     * @notice Return the issuer's pool factory.\n     */\n    function poolFactory() public view override returns (IFractionalizationBootstrappingPoolFactory) {\n        return _poolFactory;\n    }\n\n    /**\n     * @notice Return the issuer's splitter.\n     */\n    function splitter() public view override returns (address) {\n        return _splitter;\n    }\n\n    /**\n     * @notice Return the issuer's WETH.\n     */\n    function WETH() public view override returns (address) {\n        return _WETH;\n    }\n\n    /**\n     * @notice Return the issuer's bank.\n     */\n    function bank() public view override returns (address) {\n        return _bank;\n    }\n\n    /**\n     * @notice Return the issuer's protocol fee.\n     */\n    function protocolFee() public view override returns (uint256) {\n        return _protocolFee;\n    }\n\n    /**\n     * @notice Return the issuance associated to `sERC20`.\n     * @param sERC20 The sERC20 whose issuance is queried.\n     */\n    function issuanceOf(sIERC20 sERC20)\n        public\n        view\n        override\n        returns (\n            Issuances.State state,\n            address guardian,\n            IFractionalizationBootstrappingPool pool,\n            bytes32 poolId,\n            uint256 reserve,\n            uint256 allocation,\n            uint256 fee,\n            uint256 nbOfProposals,\n            bool flash,\n            bool sERC20IsToken0\n        )\n    {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n\n        state = issuance.state;\n        guardian = issuance.guardian;\n        pool = issuance.pool;\n        poolId = issuance.poolId;\n        reserve = issuance.reserve;\n        allocation = issuance.allocation;\n        fee = issuance.fee;\n        nbOfProposals = issuance.nbOfProposals;\n        flash = issuance.flash;\n        sERC20IsToken0 = issuance.sERC20IsToken0;\n    }\n\n    /**\n     * @notice Return the proposal #`proposalId` to issue `sERC20` tokens.\n     */\n    function proposalFor(sIERC20 sERC20, uint256 proposalId)\n        public\n        view\n        override\n        returns (\n            Proposals.State state,\n            address buyer,\n            uint256 value,\n            uint256 price,\n            uint256 expiration\n        )\n    {\n        Proposals.Proposal storage proposal = _issuances[sERC20].proposals[proposalId];\n\n        state = proposal.state();\n        buyer = proposal.buyer;\n        value = proposal.value;\n        price = proposal.price;\n        expiration = proposal.expiration;\n    }\n\n    /**\n     * @notice Return the current issuance price of `sERC20` [in sERC20 per ETH].\n     * @param sERC20 The sERC20 whose current issuance price is to be returned.\n     */\n    function priceOf(sIERC20 sERC20) public view override returns (uint256) {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n\n        require(issuance.state != Issuances.State.Null, \"Issuer: invalid issuance state\");\n\n        return _priceOf(issuance.pool, issuance.reserve, issuance.pool.totalSupply() > 0, issuance.sERC20IsToken0);\n    }\n\n    /**\n     * @notice Return the 24h time-weighted average price of `sERC20`.\n     * @param sERC20 The sERC20 whose TWAP is to be returned.\n     * @param kind TwapKind.ETH to return the TWAP in ETH per sERC20, TwapKind.sERC20 to return the TWAP in sERC20 per ETH.\n     */\n    function twapOf(sIERC20 sERC20, TwapKind kind) public view override returns (uint256) {\n        Issuances.Issuance storage issuance = _issuances[sERC20];\n\n        require(issuance.state != Issuances.State.Null, \"Issuer: invalid issuance state\");\n\n        return _twapOf(issuance.pool, issuance.reserve, kind, issuance.pool.totalSupply() > 0, issuance.sERC20IsToken0);\n    }\n\n    function _issue(\n        sIERC20 sERC20,\n        Issuances.Issuance storage issuance,\n        address buyer,\n        uint256 value,\n        uint256 price,\n        bool poolIsInitialized,\n        bool sERC20IsToken0\n    ) private returns (uint256) {\n        uint256 fee = (value * issuance.fee) / HUNDRED;\n        uint256 protocolFee_ = ((value - fee) * _protocolFee) / HUNDRED;\n        uint256 remaining = value - fee - protocolFee_;\n        uint256 amount = (remaining * price) / DECIMALS;\n\n        // pool LP reward\n        uint256 reward = _doReward(sERC20, issuance, fee, price, poolIsInitialized, sERC20IsToken0);\n        // mint recipient tokens\n        sERC20.mint(buyer, amount);\n        // mint allocation tokens\n        uint256 allocation = _allocation(issuance.allocation, amount + reward);\n        if (allocation > 0) sERC20.mint(_splitter, allocation);\n        // poke weights\n        issuance.pool.poke();\n        // collect protocol fee\n        if (protocolFee_ > 0) payable(_bank).sendValue(protocolFee_);\n        // pay guardian\n        payable(issuance.guardian).sendValue(remaining);\n\n        emit Issue(sERC20, buyer, value, amount);\n\n        return amount;\n    }\n\n    function _enableFlashIssuance(sIERC20 sERC20, Issuances.Issuance storage issuance) private {\n        issuance.flash = true;\n\n        emit EnableFlashIssuance(sERC20);\n    }\n\n    function _setBank(address bank_) private {\n        _bank = bank_;\n\n        emit SetBank(bank_);\n    }\n\n    function _setProtocolFee(uint256 protocolFee_) private {\n        _protocolFee = protocolFee_;\n\n        emit SetProtocolFee(protocolFee_);\n    }\n\n    function _doReward(\n        sIERC20 sERC20,\n        Issuances.Issuance storage issuance,\n        uint256 value,\n        uint256 price,\n        bool poolIsInitialized,\n        bool sERC20IsToken0\n    ) private returns (uint256) {\n        IBVault vault_ = _vault;\n        uint256 reward = _reward(vault_, issuance.pool, issuance.poolId, price, value, poolIsInitialized, sERC20IsToken0);\n\n        if (value > 0) {\n            sERC20.mint(address(this), reward);\n            sERC20.approve(address(vault_), reward);\n            vault_.joinPool{value: value}(issuance.poolId, address(this), _bank, _request(sERC20, reward, value, poolIsInitialized, sERC20IsToken0));\n        }\n\n        return reward;\n    }\n\n    function _reward(\n        IBVault vault_,\n        IFractionalizationBootstrappingPool pool,\n        bytes32 poolId,\n        uint256 price,\n        uint256 value,\n        bool poolIsInitialized,\n        bool sERC20IsToken0\n    ) private view returns (uint256) {\n        uint256 reward;\n\n        if (!poolIsInitialized) {\n            uint256[] memory weights = pool.getNormalizedWeights();\n            if (sERC20IsToken0) reward = (value * price * weights[0]) / (DECIMALS * weights[1]);\n            else reward = (value * price * weights[1]) / (DECIMALS * weights[0]);\n        } else {\n            uint256[2] memory balances = _balances(vault_, poolId, sERC20IsToken0);\n            reward = (value * balances[0]) / balances[1];\n        }\n\n        return reward;\n    }\n\n    /**\n     * @notice Return the current sERC20 price [in sERC20 per ETH].\n     * @dev - All prices are expressed in sERC20 per ETH.\n     *      - Thus, if `reserve` is lower than `twap`, it means the reserve price in ETH per sERC20 is higher than the TWAP in ETH per sERC20.\n     */\n    function _priceOf(\n        IFractionalizationBootstrappingPool pool,\n        uint256 reserve,\n        bool poolIsInitialized,\n        bool sERC20IsToken0\n    ) private view returns (uint256) {\n        uint256 twap = _twapOf(pool, reserve, TwapKind.sERC20, poolIsInitialized, sERC20IsToken0);\n\n        if (reserve < twap) return reserve;\n        else return twap;\n    }\n\n    /**\n     * @notice Return the 24h time-weighted average price of `issuance`'s sERC20.\n     * @dev - We do not care about decimals for both ETH and sERC20s have 18 decimals.\n     *      - See PriceOracle.sol for details.\n     */\n    function _twapOf(\n        IFractionalizationBootstrappingPool pool,\n        uint256 reserve,\n        TwapKind kind,\n        bool poolIsInitialized,\n        bool sERC20IsToken0\n    ) private view returns (uint256) {\n        if (!poolIsInitialized) {\n            if (kind == TwapKind.ETH) return (DECIMALS * DECIMALS) / reserve;\n            else if (kind == TwapKind.sERC20) return reserve;\n            else revert(\"Issuer: invalid twap kind\");\n        }\n\n        IPriceOracle.OracleAverageQuery[] memory query = new IPriceOracle.OracleAverageQuery[](1);\n        query[0] = IPriceOracle.OracleAverageQuery({variable: IPriceOracle.Variable.PAIR_PRICE, secs: 1 days, ago: 0});\n        uint256[] memory prices = pool.getTimeWeightedAverage(query);\n\n        if (kind == TwapKind.ETH) {\n            return !sERC20IsToken0 ? prices[0] : (DECIMALS * DECIMALS) / prices[0];\n        } else if (kind == TwapKind.sERC20) {\n            return sERC20IsToken0 ? prices[0] : (DECIMALS * DECIMALS) / prices[0];\n        } else {\n            revert(\"Issuer: invalid twap kind\");\n        }\n    }\n\n    /**\n     * @dev Return [sERC20, WETH] pool's balances.\n     */\n    function _balances(\n        IBVault vault_,\n        bytes32 poolId,\n        bool sERC20IsToken0\n    ) private view returns (uint256[2] memory) {\n        (, uint256[] memory balances, ) = vault_.getPoolTokens(poolId);\n\n        if (sERC20IsToken0) return [balances[0], balances[1]];\n        else return [balances[1], balances[0]];\n    }\n\n    /**\n     * @notice Return the amount of tokens to additionally issue to preserve the `allocation` ratio when `amount` sERC20s are issued.\n     */\n    function _allocation(uint256 allocation, uint256 amount) private pure returns (uint256) {\n        return (allocation * amount) / (HUNDRED - allocation);\n    }\n\n    function _request(\n        sIERC20 sERC20,\n        uint256 amount,\n        uint256 value,\n        bool poolIsInitialized,\n        bool sERC20IsToken0\n    ) private pure returns (IBVault.JoinPoolRequest memory) {\n        IFractionalizationBootstrappingPool.JoinKind kind = poolIsInitialized\n            ? IFractionalizationBootstrappingPool.JoinKind.REWARD\n            : IFractionalizationBootstrappingPool.JoinKind.INIT;\n\n        IAsset[] memory assets = new IAsset[](2);\n        uint256[] memory amounts = new uint256[](2);\n\n        if (sERC20IsToken0) {\n            assets[0] = IAsset(address(sERC20));\n            assets[1] = IAsset(address(0));\n            amounts[0] = amount;\n            amounts[1] = value;\n        } else {\n            assets[0] = IAsset(address(0));\n            assets[1] = IAsset(address(sERC20));\n            amounts[0] = value;\n            amounts[1] = amount;\n        }\n\n        return IBVault.JoinPoolRequest({assets: assets, maxAmountsIn: amounts, userData: abi.encode(kind, amounts), fromInternalBalance: false});\n    }\n}\n"
    },
    "contracts/mock/IssuerMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.9;\n\nimport \"../issuer/IIssuer.sol\";\nimport \"../token/sIERC20.sol\";\n\ncontract IssuerMock {\n    event Close(sIERC20 indexed sERC20);\n\n    function twapOf(sIERC20, IIssuer.TwapKind) external pure returns (uint256) {\n        return 2e18; // 2 ETH per sERC20\n    }\n\n    function close(sIERC20 sERC20) external {\n        emit Close(sERC20);\n    }\n}\n"
    },
    "contracts/token/sERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.0;\n\nimport \"./sIERC20.sol\";\nimport \"../vault/IVault.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\n/**\n * @title sERC20\n * @notice ERC20 of fractionalized ERC721.\n * @dev - This contract is meant to be used as the implementation contract of EIP-1167 minimal proxies.\n *      - See https://eips.ethereum.org/EIPS/eip-1167.\n */\ncontract sERC20 is\n    Initializable,\n    ContextUpgradeable,\n    AccessControlUpgradeable,\n    ERC20Upgradeable,\n    ERC20CappedUpgradeable,\n    ERC20BurnableUpgradeable,\n    ERC20PausableUpgradeable,\n    ERC20SnapshotUpgradeable,\n    sIERC20\n{\n    bytes32 public constant MINT_ROLE = keccak256(\"MINT_ROLE\");\n    bytes32 public constant PAUSE_ROLE = keccak256(\"PAUSE_ROLE\");\n    bytes32 public constant SNAPSHOT_ROLE = keccak256(\"SNAPSHOT_ROLE\");\n\n    IVault private _vault;\n    bool private _isHooked;\n\n    /**\n     * @dev - This contract is meant to be used as the implementation contract of EIP-1167 minimal proxies.\n     *      - The initializer modifier prevents the base implementation of being actually initialized.\n     *      - See https://eips.ethereum.org/EIPS/eip-1167.\n     */\n    constructor() initializer {}\n\n    /**\n     * @notice Initialize sERC20.\n     * @dev - `name_` is left unchecked as per the ERC20 standard.\n     *      - `symbol_` is left unchecked as per the ERC20 standard.\n     *      - `cap_` > 0 is checked in __ERC20Capped_init().\n     *      - `admin` can be set to the zero address to neutralize its privileges.\n     * @param name_ The name of the sERC20.\n     * @param symbol_ The symbol of the sERC20.\n     * @param cap_ The supply cap of the sERC20.\n     * @param admin The admin of the sERC20 [allowed to manage its permissions].\n     */\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        uint256 cap_,\n        address admin\n    ) external override initializer {\n        // __Initializable_init()  // does not exist\n        // __Context_init();       // does nothing so let's save gas\n        // __AccessControl_init(); // does nothing so let's save gas\n        __ERC20_init(name_, symbol_);\n        __ERC20Capped_init(cap_);\n        // __ERC20Burnable_init(); // does nothing so let's save gas\n        // __ERC20Pausable_init(); // does nothing so let's save gas\n        // __ERC20Snapshot_init(); // does nothing so let's save gas\n\n        _vault = IVault(_msgSender());\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /**\n     * @notice Set `adminRole` as `role`'s admin role.\n     */\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external override {\n        require(hasRole(getRoleAdmin(role), _msgSender()), \"sERC20: must be role admin to set role admin\");\n\n        _setRoleAdmin(role, adminRole);\n    }\n\n    /**\n     * @notice Destroy `amount` tokens.\n     * @param amount The amount of tokens to destroy.\n     */\n    function burn(uint256 amount) public override(ERC20BurnableUpgradeable, sIERC20) {\n        ERC20BurnableUpgradeable.burn(amount);\n    }\n\n    /**\n     * @notice Destroy `amount` tokens from `account`, deducting from the caller's allowance.\n     * @param account The account whose tokens to destroy.\n     * @param amount  The amount of tokens to destroy.\n     */\n    function burnFrom(address account, uint256 amount) public override(ERC20BurnableUpgradeable, sIERC20) {\n        ERC20BurnableUpgradeable.burnFrom(account, amount);\n    }\n\n    /**\n     * @notice Mint `amount` new tokens for `to`.\n     * @dev Caller must have MINT_ROLE.\n     * @param to The recipient of the tokens to mint.\n     * @param amount The amount of tokens to mint.\n     */\n    function mint(address to, uint256 amount) external override {\n        require(hasRole(MINT_ROLE, _msgSender()), \"sERC20: must have MINT_ROLE to mint\");\n\n        _mint(to, amount);\n    }\n\n    /**\n     * @notice Pause tokens transfer, minting and burning.\n     * @dev Caller must have PAUSE_ROLE.\n     */\n    function pause() external override {\n        require(hasRole(PAUSE_ROLE, _msgSender()), \"sERC20: must have PAUSE_ROLE to pause\");\n\n        _pause();\n    }\n\n    /**\n     * @notice Unpause tokens transfer, minting and burning.\n     * @dev Caller must have PAUSE_ROLE.\n     */\n    function unpause() external override {\n        require(hasRole(PAUSE_ROLE, _msgSender()), \"sERC20: must have PAUSE_ROLE to unpause\");\n\n        _unpause();\n    }\n\n    /**\n     * @notice Create a new snapshot and returns its snapshot id.\n     * @dev - This function can potentially be used by attackers in two ways.\n     *      - First, it can be used to increase the cost of retrieval of values from snapshots although it will grow logarithmically thus rendering this attack\n     *        ineffective in the long term.\n     *      - Second, it can be used to target specific accounts and increase the cost of sERC20 transfers for them.\n     *      - That's the reason why this function is protected by SNAPSHOT_ROLE.\n     */\n    function snapshot() external override returns (uint256) {\n        require(hasRole(SNAPSHOT_ROLE, _msgSender()), \"sERC20: must have SNAPSHOT_ROLE to snapshot\");\n\n        return _snapshot();\n    }\n\n    /**\n     * @notice Handle ERC1155 transfers.\n     * @dev - This function is called by the sERC20's pegged ERC1155 whenever a transfer is triggered at the vault layer.\n     *      - This function can only be called by the sERC20's vault.\n     * @param from The address the tokens have been transferred from.\n     * @param to The address the tokens have been transferred to.\n     * @param amount The amount of tokens which have been transferred.\n     */\n    function onERC1155Transferred(\n        address from,\n        address to,\n        uint256 amount\n    ) external override {\n        require(_msgSender() == address(_vault), \"sERC20: must be vault to use transfer hook\");\n\n        _isHooked = true;\n        _transfer(from, to, amount);\n        _isHooked = false;\n    }\n\n    /**\n     * @notice Return the sERC20's vault address.\n     */\n    function vault() public view override returns (IVault) {\n        return _vault;\n    }\n\n    /**\n     * @notice Return the sERC20's total supply cap.\n     */\n    function cap() public view override(ERC20CappedUpgradeable, sIERC20) returns (uint256) {\n        return ERC20CappedUpgradeable.cap();\n    }\n\n    /**\n     * @notice Return true if the contract is paused, false otherwise.\n     */\n    function paused() public view override(PausableUpgradeable, sIERC20) returns (bool) {\n        return PausableUpgradeable.paused();\n    }\n\n    /**\n     * @notice Return the sERC20 balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId) public view override(ERC20SnapshotUpgradeable, sIERC20) returns (uint256) {\n        return ERC20SnapshotUpgradeable.balanceOfAt(account, snapshotId);\n    }\n\n    /**\n     * @notice Return the sERC20's total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId) public view override(ERC20SnapshotUpgradeable, sIERC20) returns (uint256) {\n        return ERC20SnapshotUpgradeable.totalSupplyAt(snapshotId);\n    }\n\n    function _mint(address account, uint256 amount) internal override(ERC20Upgradeable, ERC20CappedUpgradeable) {\n        super._mint(account, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20Upgradeable, ERC20PausableUpgradeable, ERC20SnapshotUpgradeable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        super._afterTokenTransfer(from, to, amount);\n\n        if (!_isHooked) _vault.onERC20Transferred(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC20Burnable_init_unchained();\n    }\n\n    function __ERC20Burnable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20CappedUpgradeable is Initializable, ERC20Upgradeable {\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    function __ERC20Capped_init(uint256 cap_) internal initializer {\n        __Context_init_unchained();\n        __ERC20Capped_init_unchained(cap_);\n    }\n\n    function __ERC20Capped_init_unchained(uint256 cap_) internal initializer {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20Upgradeable.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../security/PausableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\n    function __ERC20Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20Pausable_init_unchained();\n    }\n\n    function __ERC20Pausable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ArraysUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n * total supply at the time are recorded for later access.\n *\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n * used to create an efficient ERC20 forking mechanism.\n *\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n * and the account address.\n *\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\n *\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\n * alternative consider {ERC20Votes}.\n *\n * ==== Gas Costs\n *\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\n *\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n * transfers will have normal cost until the next snapshot, and so on.\n */\n\nabstract contract ERC20SnapshotUpgradeable is Initializable, ERC20Upgradeable {\n    function __ERC20Snapshot_init() internal initializer {\n        __Context_init_unchained();\n        __ERC20Snapshot_init_unchained();\n    }\n\n    function __ERC20Snapshot_init_unchained() internal initializer {\n    }\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n\n    using ArraysUpgradeable for uint256[];\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n    // Snapshot struct, but that would impede usage of functions that work on an array.\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalSupplySnapshots;\n\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\n    CountersUpgradeable.Counter private _currentSnapshotId;\n\n    /**\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n     */\n    event Snapshot(uint256 id);\n\n    /**\n     * @dev Creates a new snapshot and returns its snapshot id.\n     *\n     * Emits a {Snapshot} event that contains the same id.\n     *\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\n     *\n     * [WARNING]\n     * ====\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n     * you must consider that it can potentially be used by attackers in two ways.\n     *\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n     * section above.\n     *\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n     * ====\n     */\n    function _snapshot() internal virtual returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _getCurrentSnapshotId();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n     * @dev Get the current snapshotId\n     */\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\n        return _currentSnapshotId.current();\n    }\n\n    /**\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n        return snapshotted ? value : balanceOf(account);\n    }\n\n    /**\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n        return snapshotted ? value : totalSupply();\n    }\n\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) {\n            // mint\n            _updateAccountSnapshot(to);\n            _updateTotalSupplySnapshot();\n        } else if (to == address(0)) {\n            // burn\n            _updateAccountSnapshot(from);\n            _updateTotalSupplySnapshot();\n        } else {\n            // transfer\n            _updateAccountSnapshot(from);\n            _updateAccountSnapshot(to);\n        }\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n    }\n\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _getCurrentSnapshotId();\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n        if (ids.length == 0) {\n            return 0;\n        } else {\n            return ids[ids.length - 1];\n        }\n    }\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary ArraysUpgradeable {\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/mock/ERC721SenderMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC721SenderMock {\n    function supportsInterface(bytes4) public pure returns (bool) {\n        return false;\n    }\n\n    function onERC721Received(IERC721Receiver to, bytes calldata data) external {\n        to.onERC721Received(address(0), address(0), 0, data);\n    }\n}\n"
    },
    "contracts/mock/ERC721Mock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC721Mock {\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\n        return interfaceId != 0xffffffff;\n    }\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public pure {\n        // do nothing\n    }\n\n    function ownerOf(uint256) public view returns (address) {\n        return address(this);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}