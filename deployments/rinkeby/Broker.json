{
  "address": "0xE0063a885bC7eb184c66933865db0C0e5369faE2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "contract IIssuer",
          "name": "issuer_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "AcceptProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Buyout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "CreateProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "DisableEscape",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "EnableEscape",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "EnableFlashBuyout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Escape",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "opening",
          "type": "uint256"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "RejectProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "SetBank",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawProposal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ESCAPE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUNDRED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_TIMELOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20[]",
          "name": "sERC20s",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "_escape_",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "acceptProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "buyout",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lifespan",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "disableEscape",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "enableEscape",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "enableFlashBuyout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuer",
      "outputs": [
        {
          "internalType": "contract IIssuer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "priceOfFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalFor",
      "outputs": [
        {
          "internalType": "enum Proposals.State",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "flash",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "escape",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "rejectProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "saleOf",
      "outputs": [
        {
          "internalType": "enum Sales.State",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "opening",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nbOfProposals",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "flash",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "escape",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        }
      ],
      "name": "setBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee_",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "withdrawProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc4721116ad2d5d4af01a86e658fae5ae00f35cd2d08ae8038ca0bb94c75a5078",
  "receipt": {
    "to": null,
    "from": "0x8873b045d40A458e46E356a96279aE1820a898bA",
    "contractAddress": "0xE0063a885bC7eb184c66933865db0C0e5369faE2",
    "transactionIndex": 34,
    "gasUsed": "3437539",
    "logsBloom": "0x
    "blockHash": "0x9d38e8b769aa5a288bbe88b3fbb06ddd902ac402552a11f1dabed74cea930f5d",
    "transactionHash": "0xc4721116ad2d5d4af01a86e658fae5ae00f35cd2d08ae8038ca0bb94c75a5078",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 9464564,
        "transactionHash": "0xc4721116ad2d5d4af01a86e658fae5ae00f35cd2d08ae8038ca0bb94c75a5078",
        "address": "0xE0063a885bC7eb184c66933865db0C0e5369faE2",
        "topics": [
          "0x10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067"
        ],
        "data": "0x0000000000000000000000008873b045d40a458e46e356a96279ae1820a898ba",
        "logIndex": 58,
        "blockHash": "0x9d38e8b769aa5a288bbe88b3fbb06ddd902ac402552a11f1dabed74cea930f5d"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 9464564,
        "transactionHash": "0xc4721116ad2d5d4af01a86e658fae5ae00f35cd2d08ae8038ca0bb94c75a5078",
        "address": "0xE0063a885bC7eb184c66933865db0C0e5369faE2",
        "topics": [
          "0xdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000029a2241af62c0000",
        "logIndex": 59,
        "blockHash": "0x9d38e8b769aa5a288bbe88b3fbb06ddd902ac402552a11f1dabed74cea930f5d"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 9464564,
        "transactionHash": "0xc4721116ad2d5d4af01a86e658fae5ae00f35cd2d08ae8038ca0bb94c75a5078",
        "address": "0xE0063a885bC7eb184c66933865db0C0e5369faE2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008873b045d40a458e46e356a96279ae1820a898ba",
          "0x0000000000000000000000008873b045d40a458e46e356a96279ae1820a898ba"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0x9d38e8b769aa5a288bbe88b3fbb06ddd902ac402552a11f1dabed74cea930f5d"
      }
    ],
    "blockNumber": 9464564,
    "cumulativeGasUsed": "6308036",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4BfDa8ba81cfB378702b502516548a960fbF0438",
    "0x64D5221C37fe62A77266A8b9c113e4B6FEd76a12",
    "0x8873b045d40a458e46e356a96279ae1820a898ba",
    "3000000000000000000"
  ],
  "solcInputHash": "e063610f6b9cf6ecd84ffa013d639e0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"contract IIssuer\",\"name\":\"issuer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"AcceptProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Buyout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"CreateProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"DisableEscape\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"EnableEscape\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"EnableFlashBuyout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Escape\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opening\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"RejectProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"SetBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"WithdrawProposal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ESCAPE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TIMELOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20[]\",\"name\":\"sERC20s\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"_escape_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"buyout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lifespan\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"disableEscape\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"enableEscape\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"enableFlashBuyout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"contract IIssuer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"priceOfFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalFor\",\"outputs\":[{\"internalType\":\"enum Proposals.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flash\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"escape\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"rejectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"saleOf\",\"outputs\":[{\"internalType\":\"enum Sales.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"opening\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nbOfProposals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flash\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"escape\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"withdrawProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_escape_(address[],address[],bytes[])\":{\"details\":\"This function is only meant to be used in case of an emergency or upgrade to transfer NFTs to a safer or up-to-date place.\",\"params\":{\"beneficiaries\":\"The addresses escaped NFTs are transferred to.\",\"datas\":\"The ERC721#transfer callback datas.\",\"sERC20s\":\"The sERC20s whose pegged NFTs are transferred.\"}},\"acceptProposal(address,uint256)\":{\"params\":{\"proposalId\":\"The id of the buyout proposal.\",\"sERC20\":\"The sERC20 whose pegged NFT was proposed to be bought out.\"}},\"buyout(address)\":{\"details\":\"This function requires flash buyout to be enabled.\",\"params\":{\"sERC20\":\"The sERC20 whose pegged NFT is boughtout.\"}},\"claim(address)\":{\"details\":\"This function is open to re-entrancy for it would be harmless.\",\"params\":{\"sERC20\":\"The sERC20 whose buyout shares are claimed.\"}},\"createProposal(address,uint256)\":{\"params\":{\"lifespan\":\"The lifespan of the proposal [in seconds].\",\"sERC20\":\"The sERC20 whose pegged NFT is proposed to be bought out.\"}},\"disableEscape(address)\":{\"params\":{\"sERC20\":\"The sERC20 whose pegged NFT is to be made un-escapable.\"}},\"enableEscape(address)\":{\"params\":{\"sERC20\":\"The sERC20 whose pegged NFT is to be made escapable.\"}},\"enableFlashBuyout(address)\":{\"params\":{\"sERC20\":\"The sERC20 whose pegged NFT is to be offered to flash buyout.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"register(address,address,uint256,uint256,uint256,bool,bool)\":{\"details\":\"- We do not check neither that `sERC20` is unregistered nor that it actually is an sERC20 to save gas.      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations, are supposed to be granted REGISTER_ROLE.      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.\",\"params\":{\"escape\":\"True if spectre's multisig is allowed to escape sERC20's pegged NFT, false otherwise.\",\"flash\":\"True if flash buyout is enabled, false otherwise.\",\"guardian\":\"The account authorized to enable flash buyout and accept / reject proposals otherwise.\",\"multiplier\":\"The sale's buyout multiplier [expressed with 1e18 decimals].\",\"reserve\":\"The reserve price above which the NFT can be bought out.\",\"sERC20\":\"The sERC20 whose pegged NFT is put on sale.\",\"timelock\":\"The period of time after which the sale opens [in seconds].\"}},\"rejectProposal(address,uint256)\":{\"details\":\"This function is open to re-entrancy for it would be harmless.\",\"params\":{\"proposalId\":\"The id of the buyout proposal.\",\"sERC20\":\"The sERC20 whose pegged NFT was proposed to be bought out.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawProposal(address,uint256)\":{\"details\":\"This function is open to re-entrancy for it would be harmless.\",\"params\":{\"proposalId\":\"The id of the buyout proposal.\",\"sERC20\":\"The sERC20 whose pegged NFT was proposed to be bought out.\"}}},\"title\":\"Broker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_escape_(address[],address[],bytes[])\":{\"notice\":\"Transfer all the NFTs pegged to `sERC20s `to `beneficiaries` with `datas` as ERC721#safeTransferFrom callback datas.\"},\"acceptProposal(address,uint256)\":{\"notice\":\"Accept proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\"},\"bank()\":{\"notice\":\"Return the broker's bank.\"},\"buyout(address)\":{\"notice\":\"Buyout the NFT pegged to `sERC20`.\"},\"claim(address)\":{\"notice\":\"Claim shares of the buyout of the NFT pegged to `sERC20`.\"},\"createProposal(address,uint256)\":{\"notice\":\"Create a proposal to buyout the NFT pegged to `sERC20`.\"},\"disableEscape(address)\":{\"notice\":\"Disable escape for the NFT pegged to `sERC20`.\"},\"enableEscape(address)\":{\"notice\":\"Enable escape for the NFT pegged to `sERC20`.\"},\"enableFlashBuyout(address)\":{\"notice\":\"Enable flash buyout for the NFT pegged to `sERC20`.\"},\"issuer()\":{\"notice\":\"Return the broker's issuer.\"},\"priceOfFor(address,address)\":{\"notice\":\"Return what it costs for `buyer` to buyout the NFT pegged to `sERC20`.\"},\"proposalFor(address,uint256)\":{\"notice\":\"Return the proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\"},\"protocolFee()\":{\"notice\":\"Return the broker's protocol fee.\"},\"register(address,address,uint256,uint256,uint256,bool,bool)\":{\"notice\":\"Put the NFT pegged to `sERC20` on sale.\"},\"rejectProposal(address,uint256)\":{\"notice\":\"Reject proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\"},\"saleOf(address)\":{\"notice\":\"Return the sale of the NFT pegged to `sERC20`.\"},\"vault()\":{\"notice\":\"Return the broker's vault.\"},\"withdrawProposal(address,uint256)\":{\"notice\":\"Withdraw proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\"}},\"notice\":\"Handles the buyout of fractionalized NFTs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/broker/Broker.sol\":\"Broker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/broker/Broker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBroker.sol\\\";\\nimport \\\"./libraries/Proposals.sol\\\";\\nimport \\\"./libraries/Sales.sol\\\";\\nimport {IIssuer} from \\\"../issuer/IIssuer.sol\\\";\\nimport \\\"../token/sIERC20.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Broker\\n * @notice Handles the buyout of fractionalized NFTs.\\n */\\ncontract Broker is Context, AccessControlEnumerable, IBroker {\\n    using Address for address payable;\\n    using Proposals for Proposals.Proposal;\\n    using Sales for Sales.Sale;\\n\\n    bytes32 public constant ESCAPE_ROLE = keccak256(\\\"ESCAPE_ROLE\\\");\\n    bytes32 public constant REGISTER_ROLE = keccak256(\\\"REGISTER_ROLE\\\");\\n    uint256 public constant MINIMUM_TIMELOCK = 1 weeks;\\n    uint256 public constant DECIMALS = 1e18; // !IMPORTANT: is the same as Issuer.DECIMALS\\n    uint256 public constant HUNDRED = 1e20;\\n\\n    IVault private immutable _vault;\\n    IIssuer private immutable _issuer;\\n    address private _bank;\\n    uint256 private _protocolFee;\\n    mapping(sIERC20 => Sales.Sale) private _sales;\\n\\n    constructor(\\n        IVault vault_,\\n        IIssuer issuer_,\\n        address bank_,\\n        uint256 protocolFee_\\n    ) {\\n        require(address(vault_) != address(0), \\\"Broker: vault cannot be the zero address\\\");\\n        require(address(issuer_) != address(0), \\\"Broker: issuer cannot be the zero address\\\");\\n        require(address(bank_) != address(0), \\\"Broker: bank cannot be the zero address\\\");\\n        require(protocolFee_ < HUNDRED, \\\"Broker: protocol fee must be inferior to 100%\\\");\\n\\n        _vault = vault_;\\n        _issuer = issuer_;\\n        _setBank(bank_);\\n        _setProtocolFee(protocolFee_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Put the NFT pegged to `sERC20` on sale.\\n     * @dev - We do not check neither that `sERC20` is unregistered nor that it actually is an sERC20 to save gas.\\n     *      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations, are supposed to be granted REGISTER_ROLE.\\n     *      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.\\n     * @param sERC20 The sERC20 whose pegged NFT is put on sale.\\n     * @param guardian The account authorized to enable flash buyout and accept / reject proposals otherwise.\\n     * @param reserve The reserve price above which the NFT can be bought out.\\n     * @param multiplier The sale's buyout multiplier [expressed with 1e18 decimals].\\n     * @param timelock The period of time after which the sale opens [in seconds].\\n     * @param flash True if flash buyout is enabled, false otherwise.\\n     * @param escape True if spectre's multisig is allowed to escape sERC20's pegged NFT, false otherwise.\\n     */\\n    function register(\\n        sIERC20 sERC20,\\n        address guardian,\\n        uint256 reserve,\\n        uint256 multiplier,\\n        uint256 timelock,\\n        bool flash,\\n        bool escape\\n    ) external override {\\n        Sales.Sale storage sale = _sales[sERC20];\\n\\n        require(hasRole(REGISTER_ROLE, _msgSender()), \\\"Broker: must have REGISTER_ROLE to register\\\");\\n        require(guardian != address(0), \\\"Broker: guardian cannot be the zero address\\\");\\n        require(timelock >= MINIMUM_TIMELOCK, \\\"Broker: invalid timelock\\\");\\n\\n        sale._state = Sales.State.Pending;\\n        sale.guardian = guardian;\\n        sale.reserve = reserve;\\n        sale.multiplier = multiplier;\\n        sale.opening = block.timestamp + timelock;\\n\\n        emit Register(sERC20, guardian, reserve, multiplier, block.timestamp + timelock);\\n\\n        if (flash) _enableFlashBuyout(sERC20, sale);\\n        if (escape) _enableEscape(sERC20, sale);\\n    }\\n\\n    /**\\n     * @notice Buyout the NFT pegged to `sERC20`.\\n     * @dev This function requires flash buyout to be enabled.\\n     * @param sERC20 The sERC20 whose pegged NFT is boughtout.\\n     */\\n    function buyout(sIERC20 sERC20) external payable override {\\n        Sales.Sale storage sale = _sales[sERC20];\\n\\n        require(sale.state() == Sales.State.Opened, \\\"Broker: invalid sale state\\\");\\n        require(sale.flash, \\\"Broker: flash buyout is disabled\\\");\\n\\n        address buyer = _msgSender();\\n        (uint256 value, uint256 collateral) = _priceOfFor(sERC20, sale, buyer);\\n\\n        require(msg.value >= value, \\\"Broker: insufficient value\\\");\\n\\n        _buyout(sERC20, sale, buyer, msg.value, collateral, false);\\n    }\\n\\n    /**\\n     * @notice Create a proposal to buyout the NFT pegged to `sERC20`.\\n     * @param sERC20 The sERC20 whose pegged NFT is proposed to be bought out.\\n     * @param lifespan The lifespan of the proposal [in seconds].\\n     */\\n    function createProposal(sIERC20 sERC20, uint256 lifespan) external payable override returns (uint256) {\\n        Sales.Sale storage sale = _sales[sERC20];\\n\\n        require(sale.state() == Sales.State.Opened, \\\"Broker: invalid sale state\\\");\\n        require(!sale.flash, \\\"Broker: flash buyout is enabled\\\");\\n\\n        address buyer = _msgSender();\\n        (uint256 value, uint256 collateral) = _priceOfFor(sERC20, sale, buyer);\\n\\n        require(msg.value >= value, \\\"Broker: insufficient value\\\");\\n\\n        if (collateral > 0) sERC20.transferFrom(buyer, address(this), collateral);\\n\\n        uint256 proposalId = sale.nbOfProposals++;\\n        uint256 expiration = lifespan == 0 ? 0 : block.timestamp + lifespan;\\n        sale.proposals[proposalId] = Proposals.Proposal({\\n            _state: Proposals.State.Pending,\\n            buyer: buyer,\\n            value: msg.value,\\n            collateral: collateral,\\n            expiration: expiration\\n        });\\n\\n        emit CreateProposal(sERC20, proposalId, buyer, msg.value, collateral, expiration);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @notice Accept proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\\n     * @param sERC20 The sERC20 whose pegged NFT was proposed to be bought out.\\n     * @param proposalId The id of the buyout proposal.\\n     */\\n    function acceptProposal(sIERC20 sERC20, uint256 proposalId) external override {\\n        Sales.Sale storage sale = _sales[sERC20];\\n        Proposals.Proposal storage proposal = sale.proposals[proposalId];\\n\\n        require(_msgSender() == sale.guardian, \\\"Broker: must be sale's guardian to accept proposal\\\");\\n        require(sale.state() == Sales.State.Opened, \\\"Broker: invalid sale state\\\");\\n        require(proposal.state() == Proposals.State.Pending, \\\"Broker: invalid proposal state\\\");\\n        require(!sale.flash, \\\"Broker: flash buyout is enabled\\\");\\n\\n        proposal._state = Proposals.State.Accepted;\\n\\n        emit AcceptProposal(sERC20, proposalId);\\n\\n        _buyout(sERC20, sale, proposal.buyer, proposal.value, proposal.collateral, true);\\n    }\\n\\n    /**\\n     * @notice Reject proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\\n     * @dev This function is open to re-entrancy for it would be harmless.\\n     * @param sERC20 The sERC20 whose pegged NFT was proposed to be bought out.\\n     * @param proposalId The id of the buyout proposal.\\n     */\\n    function rejectProposal(sIERC20 sERC20, uint256 proposalId) external override {\\n        Sales.Sale storage sale = _sales[sERC20];\\n        Proposals.Proposal storage proposal = sale.proposals[proposalId];\\n        Proposals.State state = proposal.state();\\n\\n        require(_msgSender() == sale.guardian, \\\"Broker: must be sale's guardian to reject proposal\\\");\\n        require(state == Proposals.State.Pending || state == Proposals.State.Lapsed, \\\"Broker: invalid proposal state\\\");\\n\\n        address buyer = proposal.buyer;\\n        proposal._state = Proposals.State.Rejected;\\n        sERC20.transfer(buyer, proposal.collateral);\\n        payable(buyer).sendValue(proposal.value);\\n\\n        emit RejectProposal(sERC20, proposalId);\\n    }\\n\\n    /**\\n     * @notice Withdraw proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\\n     * @dev This function is open to re-entrancy for it would be harmless.\\n     * @param sERC20 The sERC20 whose pegged NFT was proposed to be bought out.\\n     * @param proposalId The id of the buyout proposal.\\n     */\\n    function withdrawProposal(sIERC20 sERC20, uint256 proposalId) external override {\\n        Sales.Sale storage sale = _sales[sERC20];\\n        Proposals.Proposal storage proposal = sale.proposals[proposalId];\\n        Proposals.State state = proposal.state();\\n\\n        require(_msgSender() == proposal.buyer, \\\"Broker: must be proposal's buyer to withdraw proposal\\\");\\n        require(state == Proposals.State.Pending || state == Proposals.State.Lapsed, \\\"Broker: invalid proposal state\\\");\\n\\n        address buyer = proposal.buyer;\\n        proposal._state = Proposals.State.Withdrawn;\\n        sERC20.transfer(buyer, proposal.collateral);\\n        payable(buyer).sendValue(proposal.value);\\n\\n        emit WithdrawProposal(sERC20, proposalId);\\n    }\\n\\n    /**\\n     * @notice Claim shares of the buyout of the NFT pegged to `sERC20`.\\n     * @dev This function is open to re-entrancy for it would be harmless.\\n     * @param sERC20 The sERC20 whose buyout shares are claimed.\\n     */\\n    function claim(sIERC20 sERC20) external override {\\n        Sales.Sale storage sale = _sales[sERC20];\\n        address holder = _msgSender();\\n        uint256 balance = sERC20.balanceOf(holder);\\n\\n        require(sale.state() == Sales.State.Closed, \\\"Broker: invalid sale state\\\");\\n        require(balance > 0, \\\"Broker: nothing to claim\\\");\\n\\n        uint256 value = (sale.stock * balance) / sERC20.totalSupply();\\n        sale.stock -= value;\\n        sERC20.burnFrom(holder, balance);\\n        payable(holder).sendValue(value);\\n\\n        emit Claim(sERC20, holder, value, balance);\\n    }\\n\\n    /**\\n     * @notice Enable flash buyout for the NFT pegged to `sERC20`.\\n     * @param sERC20 The sERC20 whose pegged NFT is to be offered to flash buyout.\\n     */\\n    function enableFlashBuyout(sIERC20 sERC20) external override {\\n        Sales.Sale storage sale = _sales[sERC20];\\n        Sales.State state = sale.state();\\n\\n        require(_msgSender() == sale.guardian, \\\"Broker: must be sale's guardian to enable flash buyout\\\");\\n        require(state == Sales.State.Pending || state == Sales.State.Opened, \\\"Broker: invalid sale state\\\");\\n        require(!sale.flash, \\\"Broker: flash buyout already enabled\\\");\\n\\n        _enableFlashBuyout(sERC20, sale);\\n    }\\n\\n    /**\\n     * @notice Enable escape for the NFT pegged to `sERC20`.\\n     * @param sERC20 The sERC20 whose pegged NFT is to be made escapable.\\n     */\\n    function enableEscape(sIERC20 sERC20) external override {\\n        Sales.Sale storage sale = _sales[sERC20];\\n        Sales.State state = sale.state();\\n\\n        require(_msgSender() == sale.guardian, \\\"Broker: must be sale's guardian to enable escape\\\");\\n        require(state == Sales.State.Pending || state == Sales.State.Opened, \\\"Broker: invalid sale state\\\");\\n        require(!sale.escape, \\\"Broker: escape already enabled\\\");\\n\\n        _enableEscape(sERC20, sale);\\n    }\\n\\n    /**\\n     * @notice Disable escape for the NFT pegged to `sERC20`.\\n     * @param sERC20 The sERC20 whose pegged NFT is to be made un-escapable.\\n     */\\n    function disableEscape(sIERC20 sERC20) external override {\\n        Sales.Sale storage sale = _sales[sERC20];\\n        Sales.State state = sale.state();\\n\\n        require(_msgSender() == sale.guardian, \\\"Broker: must be sale's guardian to disable escape\\\");\\n        require(state == Sales.State.Pending || state == Sales.State.Opened, \\\"Broker: invalid sale state\\\");\\n        require(sale.escape, \\\"Broker: escape already disabled\\\");\\n\\n        _disableEscape(sERC20, sale);\\n    }\\n\\n    function setBank(address bank_) external override {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Broker: must have DEFAULT_ADMIN_ROLE to set bank\\\");\\n        require(bank_ != address(0), \\\"Broker: bank cannot be the zero address\\\");\\n\\n        _setBank(bank_);\\n    }\\n\\n    function setProtocolFee(uint256 protocolFee_) external override {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Broker: must have DEFAULT_ADMIN_ROLE to set protocol fee\\\");\\n        require(protocolFee_ < HUNDRED, \\\"Broker: protocol fee must be inferior to 100%\\\");\\n\\n        _setProtocolFee(protocolFee_);\\n    }\\n\\n    /**\\n     * @notice Transfer all the NFTs pegged to `sERC20s `to `beneficiaries` with `datas` as ERC721#safeTransferFrom callback datas.\\n     * @dev This function is only meant to be used in case of an emergency or upgrade to transfer NFTs to a safer or up-to-date place.\\n     * @param sERC20s The sERC20s whose pegged NFTs are transferred.\\n     * @param beneficiaries The addresses escaped NFTs are transferred to.\\n     * @param datas The ERC721#transfer callback datas.\\n     */\\n    function _escape_(\\n        sIERC20[] calldata sERC20s,\\n        address[] calldata beneficiaries,\\n        bytes[] calldata datas\\n    ) external override {\\n        require(hasRole(ESCAPE_ROLE, _msgSender()), \\\"Broker: must have ESCAPE_ROLE to escape NFTs\\\");\\n        require(sERC20s.length == beneficiaries.length && sERC20s.length == datas.length, \\\"Broker: parameters lengths mismatch\\\");\\n\\n        for (uint256 i = 0; i < sERC20s.length; i++) {\\n            require(_sales[sERC20s[i]].escape, \\\"Broker: escape is disabled\\\");\\n\\n            _vault.unlock(sERC20s[i], beneficiaries[i], datas[i]);\\n\\n            emit Escape(sERC20s[i], beneficiaries[i], datas[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Return the broker's vault.\\n     */\\n    function vault() public view override returns (IVault) {\\n        return _vault;\\n    }\\n\\n    /**\\n     * @notice Return the broker's issuer.\\n     */\\n    function issuer() public view override returns (IIssuer) {\\n        return _issuer;\\n    }\\n\\n    /**\\n     * @notice Return the broker's bank.\\n     */\\n    function bank() public view override returns (address) {\\n        return _bank;\\n    }\\n\\n    /**\\n     * @notice Return the broker's protocol fee.\\n     */\\n    function protocolFee() public view override returns (uint256) {\\n        return _protocolFee;\\n    }\\n\\n    /**\\n     * @notice Return what it costs for `buyer` to buyout the NFT pegged to `sERC20`.\\n     */\\n    function priceOfFor(sIERC20 sERC20, address buyer) public view override returns (uint256 value, uint256 collateral) {\\n        return _priceOfFor(sERC20, _sales[sERC20], buyer);\\n    }\\n\\n    /**\\n     * @notice Return the sale of the NFT pegged to `sERC20`.\\n     */\\n    function saleOf(sIERC20 sERC20)\\n        public\\n        view\\n        override\\n        returns (\\n            Sales.State state,\\n            address guardian,\\n            uint256 reserve,\\n            uint256 multiplier,\\n            uint256 opening,\\n            uint256 stock,\\n            uint256 nbOfProposals,\\n            bool flash,\\n            bool escape\\n        )\\n    {\\n        Sales.Sale storage sale = _sales[sERC20];\\n\\n        state = sale.state();\\n        guardian = sale.guardian;\\n        reserve = sale.reserve;\\n        multiplier = sale.multiplier;\\n        opening = sale.opening;\\n        stock = sale.stock;\\n        nbOfProposals = sale.nbOfProposals;\\n        flash = sale.flash;\\n        escape = sale.escape;\\n    }\\n\\n    /**\\n     * @notice Return the proposal #`proposalId` to buyout the NFT pegged to `sERC20`.\\n     */\\n    function proposalFor(sIERC20 sERC20, uint256 proposalId)\\n        public\\n        view\\n        override\\n        returns (\\n            Proposals.State state,\\n            address buyer,\\n            uint256 value,\\n            uint256 collateral,\\n            uint256 expiration\\n        )\\n    {\\n        Proposals.Proposal storage proposal = _sales[sERC20].proposals[proposalId];\\n\\n        state = proposal.state();\\n        buyer = proposal.buyer;\\n        value = proposal.value;\\n        collateral = proposal.collateral;\\n        expiration = proposal.expiration;\\n    }\\n\\n    function _buyout(\\n        sIERC20 sERC20,\\n        Sales.Sale storage sale,\\n        address buyer,\\n        uint256 value,\\n        uint256 collateral,\\n        bool locked\\n    ) private {\\n        uint256 fee = (value * _protocolFee) / HUNDRED;\\n\\n        sale._state = Sales.State.Closed;\\n        sale.stock = value - fee;\\n\\n        _issuer.close(sERC20);\\n\\n        if (collateral > 0) {\\n            if (locked) sERC20.burn(collateral);\\n            else sERC20.burnFrom(buyer, collateral);\\n        }\\n\\n        _vault.unlock(sERC20, buyer, \\\"\\\");\\n        if (fee > 0) payable(_bank).sendValue(fee);\\n\\n        emit Buyout(sERC20, buyer, value, collateral, fee);\\n    }\\n\\n    function _enableFlashBuyout(sIERC20 sERC20, Sales.Sale storage sale) private {\\n        sale.flash = true;\\n\\n        emit EnableFlashBuyout(sERC20);\\n    }\\n\\n    function _enableEscape(sIERC20 sERC20, Sales.Sale storage sale) private {\\n        sale.escape = true;\\n\\n        emit EnableEscape(sERC20);\\n    }\\n\\n    function _disableEscape(sIERC20 sERC20, Sales.Sale storage sale) private {\\n        sale.escape = false;\\n\\n        emit DisableEscape(sERC20);\\n    }\\n\\n    function _setBank(address bank_) private {\\n        _bank = bank_;\\n\\n        emit SetBank(bank_);\\n    }\\n\\n    function _setProtocolFee(uint256 protocolFee_) private {\\n        _protocolFee = protocolFee_;\\n\\n        emit SetProtocolFee(protocolFee_);\\n    }\\n\\n    function _priceOfFor(\\n        sIERC20 sERC20,\\n        Sales.Sale storage sale,\\n        address buyer\\n    ) private view returns (uint256 value, uint256 collateral) {\\n        collateral = sERC20.balanceOf(buyer);\\n        uint256 supply = sERC20.totalSupply();\\n        uint256 marketValue = (((_issuer.twapOf(sERC20, IIssuer.TwapKind.ETH) * supply) / DECIMALS) * sale.multiplier) / DECIMALS;\\n        uint256 reserve = sale.reserve;\\n        uint256 rawValue = reserve >= marketValue ? reserve : marketValue;\\n\\n        value = supply > 0 ? (rawValue * (DECIMALS - (collateral * DECIMALS) / supply)) / DECIMALS : rawValue;\\n    }\\n}\\n\",\"keccak256\":\"0xe86af95651e0241a9a90e8372ff633850b5766a074e9c55f7101cc833326866b\",\"license\":\"GPL-3.0\"},\"contracts/broker/IBroker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/Sales.sol\\\";\\nimport {IIssuer} from \\\"../issuer/IIssuer.sol\\\";\\nimport \\\"../token/sIERC20.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\n\\ninterface IBroker {\\n    event Register(sIERC20 indexed sERC20, address indexed guardian, uint256 reserve, uint256 multiplier, uint256 opening);\\n    event CreateProposal(sIERC20 indexed sERC20, uint256 indexed proposalId, address indexed buyer, uint256 value, uint256 collateral, uint256 expiration);\\n    event AcceptProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\\n    event RejectProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\\n    event WithdrawProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\\n    event Claim(sIERC20 indexed sERC20, address indexed holder, uint256 value, uint256 collateral);\\n    event Buyout(sIERC20 indexed sERC20, address indexed buyer, uint256 value, uint256 collateral, uint256 fee);\\n    event EnableFlashBuyout(sIERC20 indexed sERC20);\\n    event EnableEscape(sIERC20 indexed sERC20);\\n    event DisableEscape(sIERC20 indexed sERC20);\\n    event SetBank(address bank);\\n    event SetProtocolFee(uint256 protocolFee);\\n    event Escape(sIERC20 indexed sERC20, address indexed beneficiary, bytes data);\\n\\n    function register(\\n        sIERC20 sERC20,\\n        address guardian,\\n        uint256 minimum,\\n        uint256 multiplier,\\n        uint256 timelock,\\n        bool flash,\\n        bool escape\\n    ) external;\\n\\n    function buyout(sIERC20 sERC20) external payable;\\n\\n    function createProposal(sIERC20 sERC20, uint256 lifespan) external payable returns (uint256);\\n\\n    function acceptProposal(sIERC20 sERC20, uint256 proposalId) external;\\n\\n    function rejectProposal(sIERC20 sERC20, uint256 proposalId) external;\\n\\n    function withdrawProposal(sIERC20 sERC20, uint256 proposalId) external;\\n\\n    function claim(sIERC20 sERC20) external;\\n\\n    function enableFlashBuyout(sIERC20 sERC20) external;\\n\\n    function enableEscape(sIERC20 sERC20) external;\\n\\n    function disableEscape(sIERC20 sERC20) external;\\n\\n    function setBank(address bank_) external;\\n\\n    function setProtocolFee(uint256 protocolFee_) external;\\n\\n    function _escape_(\\n        sIERC20[] calldata sERC20s,\\n        address[] calldata beneficiaries,\\n        bytes[] calldata datas\\n    ) external;\\n\\n    function vault() external view returns (IVault);\\n\\n    function issuer() external view returns (IIssuer);\\n\\n    function bank() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function priceOfFor(sIERC20 sERC20, address buyer) external view returns (uint256 value, uint256 collateral);\\n\\n    function saleOf(sIERC20 sERC20)\\n        external\\n        view\\n        returns (\\n            Sales.State state,\\n            address guardian,\\n            uint256 reserve,\\n            uint256 multiplier,\\n            uint256 opening,\\n            uint256 stock,\\n            uint256 nbOfProposals,\\n            bool flash,\\n            bool escape\\n        );\\n\\n    function proposalFor(sIERC20 sERC20, uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            Proposals.State state,\\n            address buyer,\\n            uint256 value,\\n            uint256 collateral,\\n            uint256 expiration\\n        );\\n}\\n\",\"keccak256\":\"0x5e420dc512e7cce354464910c726a73f4b498703c3d4ae580bea464b2d63c869\",\"license\":\"GPL-3.0\"},\"contracts/broker/libraries/Proposals.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Proposals {\\n    enum State {\\n        Null,\\n        Pending,\\n        Accepted,\\n        Rejected,\\n        Lapsed,\\n        Withdrawn\\n    }\\n\\n    struct Proposal {\\n        State _state;\\n        address buyer;\\n        uint256 value;\\n        uint256 collateral;\\n        uint256 expiration;\\n    }\\n\\n    function state(Proposal storage proposal) internal view returns (State) {\\n        State _state = proposal._state;\\n        uint256 expiration = proposal.expiration;\\n\\n        if (_state == State.Pending && expiration != 0 && block.timestamp >= expiration) {\\n            return State.Lapsed;\\n        } else {\\n            return _state;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x24af68f352c66b628b9c6b15350794b3ba7abe79aab253a614585657da4bd0a3\",\"license\":\"GPL-3.0\"},\"contracts/broker/libraries/Sales.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposals.sol\\\";\\n\\nlibrary Sales {\\n    enum State {\\n        Null,\\n        Pending,\\n        Opened,\\n        Closed\\n    }\\n\\n    struct Sale {\\n        State _state;\\n        address guardian;\\n        uint256 reserve;\\n        uint256 multiplier;\\n        uint256 opening;\\n        uint256 stock;\\n        uint256 nbOfProposals;\\n        mapping(uint256 => Proposals.Proposal) proposals;\\n        bool flash;\\n        bool escape;\\n    }\\n\\n    function state(Sale storage sale) internal view returns (State) {\\n        State _state = sale._state;\\n\\n        if (_state == State.Pending && block.timestamp >= sale.opening) {\\n            return State.Opened;\\n        } else {\\n            return _state;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2555f032d23e58c616f855f69d40dd11ecf2a9afd9aef20691c392e452166711\",\"license\":\"GPL-3.0\"},\"contracts/issuer/IIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IBalancer.sol\\\";\\nimport \\\"./interfaces/IFractionalizationBootstrappingPool.sol\\\";\\nimport \\\"./interfaces/IFractionalizationBootstrappingPoolFactory.sol\\\";\\nimport \\\"./libraries/Issuances.sol\\\";\\nimport \\\"../token/sIERC20.sol\\\";\\n\\ninterface IIssuer {\\n    enum TwapKind {\\n        ETH,\\n        sERC20\\n    }\\n\\n    event Register(\\n        sIERC20 indexed sERC20,\\n        address indexed guardian,\\n        IFractionalizationBootstrappingPool pool,\\n        bytes32 poolId,\\n        uint256 sMaxNormalizedWeight,\\n        uint256 sMinNormalizedWeight,\\n        uint256 swapFeePercentage,\\n        uint256 reserve,\\n        uint256 allocation,\\n        uint256 fee\\n    );\\n    event Issue(sIERC20 indexed sERC20, address indexed recipient, uint256 value, uint256 amount);\\n    event CreateProposal(sIERC20 indexed sERC20, uint256 indexed proposalId, address indexed buyer, uint256 value, uint256 price, uint256 expiration);\\n    event AcceptProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\\n    event RejectProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\\n    event WithdrawProposal(sIERC20 indexed sERC20, uint256 indexed proposalId);\\n    event Close(sIERC20);\\n    event EnableFlashIssuance(sIERC20 indexed sERC20);\\n    event SetBank(address bank);\\n    event SetProtocolFee(uint256 protocolFee);\\n\\n    function register(\\n        sIERC20 sERC20,\\n        address guardian,\\n        uint256 sMaxNormalizedWeight,\\n        uint256 sMinNormalizedWeight,\\n        uint256 swapFeePercentage,\\n        uint256 reserve,\\n        uint256 allocation,\\n        uint256 fee,\\n        bool flash\\n    ) external;\\n\\n    function issue(sIERC20 sERC20, uint256 expected) external payable;\\n\\n    function createProposal(\\n        sIERC20 sERC20,\\n        uint256 amount,\\n        uint256 lifespan\\n    ) external payable returns (uint256);\\n\\n    function acceptProposal(sIERC20 sERC20, uint256 proposalId) external;\\n\\n    function rejectProposal(sIERC20 sERC20, uint256 proposalId) external;\\n\\n    function withdrawProposal(sIERC20 sERC20, uint256 proposalId) external;\\n\\n    function close(sIERC20 sERC20) external;\\n\\n    function enableFlashIssuance(sIERC20 sERC20) external;\\n\\n    function setBank(address bank_) external;\\n\\n    function setProtocolFee(uint256 protocolFee_) external;\\n\\n    function vault() external view returns (IBVault);\\n\\n    function poolFactory() external view returns (IFractionalizationBootstrappingPoolFactory);\\n\\n    function splitter() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function bank() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function issuanceOf(sIERC20 sERC20)\\n        external\\n        view\\n        returns (\\n            Issuances.State state,\\n            address guardian,\\n            IFractionalizationBootstrappingPool pool,\\n            bytes32 poolId,\\n            uint256 reserve,\\n            uint256 allocation,\\n            uint256 fee,\\n            uint256 nbOfProposals,\\n            bool flash,\\n            bool sERC20IsToken0\\n        );\\n\\n    function proposalFor(sIERC20 sERC20, uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            Proposals.State state,\\n            address buyer,\\n            uint256 value,\\n            uint256 price,\\n            uint256 expiration\\n        );\\n\\n    function priceOf(sIERC20 sERC20) external view returns (uint256);\\n\\n    function twapOf(sIERC20 sERC20, TwapKind Kind) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7de413f8f1e25ab0966976860355eafcbdf32a852b69c0f28692834aee8656f0\",\"license\":\"GPL-3.0\"},\"contracts/issuer/interfaces/IBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAsset {}\\n\\ninterface IPriceOracle {\\n    enum Variable {\\n        PAIR_PRICE,\\n        BPT_PRICE,\\n        INVARIANT\\n    }\\n\\n    struct OracleAccumulatorQuery {\\n        Variable variable;\\n        uint256 ago;\\n    }\\n\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries) external view returns (uint256[] memory results);\\n\\n    function getLatest(Variable variable) external view returns (uint256);\\n\\n    function getLargestSafeQueryWindow() external view returns (uint256);\\n\\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries) external view returns (int256[] memory results);\\n}\\n\\ninterface IBVault {\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function WETH() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9ca751514b91a10c014d7ebd54d419a5ef8c1169f7b3f36feb30b71f64d7fdf1\",\"license\":\"GPL-3.0\"},\"contracts/issuer/interfaces/IFractionalizationBootstrappingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBalancer.sol\\\";\\n\\ninterface IFractionalizationBootstrappingPool {\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\\n        REWARD\\n    }\\n\\n    function poke() external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getTimeWeightedAverage(IPriceOracle.OracleAverageQuery[] memory queries) external view returns (uint256[] memory prices);\\n\\n    function getLatest(IPriceOracle.Variable variable) external view returns (uint256);\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function sERC20IsToken0() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xafabce08dedeb644aed86973c1c3949635458de22a04748a2fa488c31427dae8\",\"license\":\"GPL-3.0\"},\"contracts/issuer/interfaces/IFractionalizationBootstrappingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IFractionalizationBootstrappingPoolFactory {\\n    function create(\\n        string memory name,\\n        string memory symbol,\\n        address token0,\\n        address token1,\\n        uint256 sMaxNormalizedWeight,\\n        uint256 sMinNormalizedWeight,\\n        uint256 swapFeePercentage,\\n        bool sERC20IsToken0\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x16512eca6047f7903ff81f079cdc9e4759d8ca327bebeda3be8a34c0a4efc86a\",\"license\":\"GPL-3.0\"},\"contracts/issuer/libraries/Issuances.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposals.sol\\\";\\nimport \\\"../interfaces/IFractionalizationBootstrappingPool.sol\\\";\\n\\nlibrary Issuances {\\n    enum State {\\n        Null,\\n        Opened,\\n        Closed\\n    }\\n\\n    struct Issuance {\\n        State state;\\n        address guardian;\\n        IFractionalizationBootstrappingPool pool;\\n        bytes32 poolId;\\n        uint256 reserve;\\n        uint256 allocation;\\n        uint256 fee;\\n        uint256 nbOfProposals;\\n        mapping(uint256 => Proposals.Proposal) proposals;\\n        bool flash;\\n        bool sERC20IsToken0;\\n    }\\n}\\n\",\"keccak256\":\"0x49203104a38f10af1f556b2239c507542c86aa81ad76edf9c9112e0c11b62fcf\",\"license\":\"GPL-3.0\"},\"contracts/issuer/libraries/Proposals.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Proposals {\\n    enum State {\\n        Null,\\n        Pending,\\n        Accepted,\\n        Rejected,\\n        Lapsed,\\n        Withdrawn\\n    }\\n\\n    struct Proposal {\\n        State _state;\\n        address buyer;\\n        uint256 value;\\n        uint256 price;\\n        uint256 expiration;\\n    }\\n\\n    function state(Proposal storage proposal) internal view returns (State) {\\n        State _state = proposal._state;\\n        uint256 expiration = proposal.expiration;\\n\\n        if (_state == State.Pending && expiration != 0) {\\n            if (block.timestamp < proposal.expiration) return State.Pending;\\n            else return State.Lapsed;\\n        } else {\\n            return _state;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe244e750d3be88ffe8d142f002b0908eaa25b10b97f649cc57fe457273ee8b1a\",\"license\":\"GPL-3.0\"},\"contracts/token/sIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n\\ninterface sIERC20 is IAccessControlUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable, IERC20PermitUpgradeable {\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 cap_,\\n        address admin\\n    ) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function snapshot() external returns (uint256);\\n\\n    function onERC1155Transferred(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function vault() external view returns (IVault);\\n\\n    function cap() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x95d231be55706de5a81526647312e6a8d95ada1ec6ece6280513c35373c54766\",\"license\":\"GPL-3.0\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/Spectres.sol\\\";\\nimport \\\"../token/sIERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IVault {\\n    event Fractionalize(IERC721 indexed collection, uint256 indexed tokenId, uint256 indexed id, sIERC20 sERC20, address broker);\\n    event Unlock(uint256 indexed id, address recipient);\\n    event Escape(IERC721 collection, uint256 tokenId, address recipient);\\n\\n    function fractionalize(\\n        IERC721 collection,\\n        uint256 tokenId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 cap,\\n        address admin,\\n        address broker\\n    ) external returns (uint256);\\n\\n    function unlock(\\n        uint256 id,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    function unlock(\\n        sIERC20 sERC20,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    function escape(\\n        IERC721 collection,\\n        uint256 tokenId,\\n        address recipient,\\n        bytes memory data\\n    ) external;\\n\\n    function setUnavailableURI(string memory unavailableURI_) external;\\n\\n    function setUnlockedURI(string memory unlockedURI_) external;\\n\\n    function onERC20Transferred(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function sERC20Base() external view returns (address);\\n\\n    function unavailableURI() external view returns (string memory);\\n\\n    function unlockedURI() external view returns (string memory);\\n\\n    function isLocked(IERC721 collection, uint256 tokenId) external view returns (bool);\\n\\n    function tokenTypeOf(IERC721 collection, uint256 tokenId) external view returns (uint256);\\n\\n    function spectreOf(uint256 id) external view returns (Spectres.Spectre memory);\\n\\n    function spectreOf(sIERC20 sERC20) external view returns (Spectres.Spectre memory);\\n\\n    function sERC20Of(uint256 id) external pure returns (sIERC20);\\n}\\n\",\"keccak256\":\"0x621c606282bc397425be5b3931693cd61ecc5f6d4154fe0531ad986a292e80d9\",\"license\":\"GPL-3.0\"},\"contracts/vault/libraries/Spectres.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary Spectres {\\n    enum State {\\n        Null,\\n        Locked,\\n        Unlocked\\n    }\\n\\n    struct Spectre {\\n        State state;\\n        IERC721 collection;\\n        uint256 tokenId;\\n        address broker;\\n    }\\n}\\n\",\"keccak256\":\"0x5b9c9658375bbaf1060c6276d06453f3a7497c50501cba763ecbd8ff5d0da1c0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003f6438038062003f6483398101604081905262000034916200042c565b6001600160a01b038416620000a15760405162461bcd60e51b815260206004820152602860248201527f42726f6b65723a207661756c742063616e6e6f7420626520746865207a65726f604482015267206164647265737360c01b60648201526084015b60405180910390fd5b6001600160a01b0383166200010b5760405162461bcd60e51b815260206004820152602960248201527f42726f6b65723a206973737565722063616e6e6f7420626520746865207a65726044820152686f206164647265737360b81b606482015260840162000098565b6001600160a01b038216620001735760405162461bcd60e51b815260206004820152602760248201527f42726f6b65723a2062616e6b2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b606482015260840162000098565b68056bc75e2d631000008110620001e35760405162461bcd60e51b815260206004820152602d60248201527f42726f6b65723a2070726f746f636f6c20666565206d75737420626520696e6660448201526c6572696f7220746f203130302560981b606482015260840162000098565b6001600160a01b03808516608052831660a052620002018262000223565b6200020c8162000278565b62000219600033620002ae565b5050505062000486565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067906020015b60405180910390a150565b60038190556040518181527fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1906020016200026d565b620002c58282620002f160201b620024761760201c565b6000828152600160209081526040909120620002ec9183906200248462000301821b17901c565b505050565b620002fd828262000321565b5050565b600062000318836001600160a01b038416620003c1565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002fd576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200037d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008181526001830160205260408120546200040a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200031b565b5060006200031b565b6001600160a01b03811681146200042957600080fd5b50565b600080600080608085870312156200044357600080fd5b8451620004508162000413565b6020860151909450620004638162000413565b6040860151909350620004768162000413565b6060959095015193969295505050565b60805160a051613a9c620004c8600039600081816102a4015281816128bd0152612cc80152600081816106ee015281816122470152612a820152613a9c6000f3fe6080604052600436106102195760003560e01c8063787dce3d1161011d578063ca15c873116100b0578063eb3aebbf1161007f578063f3df1e3211610064578063f3df1e3214610691578063f85fc0ab146106c2578063fbfa77cf146106df57600080fd5b8063eb3aebbf1461063d578063edc6b9bd1461065d57600080fd5b8063ca15c873146105ca578063d547741f146105ea578063dfc51a251461060a578063e1f01ca41461061d57600080fd5b8063ad34b245116100ec578063ad34b2451461052b578063b0913a1314610560578063b0e21e8a14610580578063c0f0a4c81461059557600080fd5b8063787dce3d146104925780639010d07c146104b257806391d14854146104d2578063a217fddf1461051657600080fd5b806336568abe116101b057806360b191cb1161017f57806373f96d8e1161016457806373f96d8e1461042057806374f533171461044057806376cdb03b1461047457600080fd5b806360b191cb146103ed57806367e9bdad1461040d57600080fd5b806336568abe146103765780634209f150146103965780634bbeb413146103b65780635168e1a1146103cd57600080fd5b80631e83409a116101ec5780631e83409a146102dc578063248a9ca3146102fc5780632e0f26251461033a5780632f2ff15d1461035657600080fd5b806301ffc9a71461021e57806303eb017614610253578063090d23b9146102755780631d14384814610295575b600080fd5b34801561022a57600080fd5b5061023e6102393660046133f3565b610712565b60405190151581526020015b60405180910390f35b34801561025f57600080fd5b5061027361026e36600461344a565b61076e565b005b34801561028157600080fd5b5061027361029036600461344a565b61090a565b3480156102a157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161024a565b3480156102e857600080fd5b506102736102f736600461344a565b610a0f565b34801561030857600080fd5b5061032c610317366004613467565b60009081526020819052604090206001015490565b60405190815260200161024a565b34801561034657600080fd5b5061032c670de0b6b3a764000081565b34801561036257600080fd5b50610273610371366004613480565b610d10565b34801561038257600080fd5b50610273610391366004613480565b610d32565b3480156103a257600080fd5b506102736103b13660046134b0565b610d54565b3480156103c257600080fd5b5061032c62093a8081565b3480156103d957600080fd5b506102736103e83660046134b0565b610fa2565b3480156103f957600080fd5b5061027361040836600461344a565b6111f1565b61027361041b36600461344a565b6113a4565b34801561042c57600080fd5b5061027361043b36600461344a565b6114f2565b34801561044c57600080fd5b5061032c7fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe81565b34801561048057600080fd5b506002546001600160a01b03166102c4565b34801561049e57600080fd5b506102736104ad366004613467565b611685565b3480156104be57600080fd5b506102c46104cd3660046134dc565b611789565b3480156104de57600080fd5b5061023e6104ed366004613480565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561052257600080fd5b5061032c600081565b34801561053757600080fd5b5061054b61054636600461344a565b6117a8565b60405161024a99989796959493929190613514565b34801561056c57600080fd5b5061027361057b3660046134b0565b61184e565b34801561058c57600080fd5b5060035461032c565b3480156105a157600080fd5b506105b56105b0366004613572565b611a9d565b6040805192835260208301919091520161024a565b3480156105d657600080fd5b5061032c6105e5366004613467565b611acf565b3480156105f657600080fd5b50610273610605366004613480565b611ae6565b61032c6106183660046134b0565b611af0565b34801561062957600080fd5b506102736106383660046135ae565b611e26565b34801561064957600080fd5b5061027361065836600461366e565b612082565b34801561066957600080fd5b5061032c7f12630b13fc535892fff29cd260a4eee87eac2069149688d850fa73ac0322e12081565b34801561069d57600080fd5b506106b16106ac3660046134b0565b61240d565b60405161024a959493929190613708565b3480156106ce57600080fd5b5061032c68056bc75e2d6310000081565b3480156106eb57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102c4565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f000000000000000000000000000000000000000000000000000000001480610768575061076882612499565b92915050565b6001600160a01b03811660009081526004602052604081209061079082612530565b825490915061010090046001600160a01b0316336001600160a01b0316146108255760405162461bcd60e51b815260206004820152603160248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f2064697361626c652065736361706500000000000000000000000000000060648201526084015b60405180910390fd5b6001816003811115610839576108396134fe565b148061085657506002816003811115610854576108546134fe565b145b6108a25760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b6007820154610100900460ff166108fb5760405162461bcd60e51b815260206004820152601f60248201527f42726f6b65723a2065736361706520616c72656164792064697361626c656400604482015260640161081c565b610905838361256b565b505050565b6109156000336104ed565b6109875760405162461bcd60e51b815260206004820152603060248201527f42726f6b65723a206d75737420686176652044454641554c545f41444d494e5f60448201527f524f4c4520746f207365742062616e6b00000000000000000000000000000000606482015260840161081c565b6001600160a01b038116610a035760405162461bcd60e51b815260206004820152602760248201527f42726f6b65723a2062616e6b2063616e6e6f7420626520746865207a65726f2060448201527f6164647265737300000000000000000000000000000000000000000000000000606482015260840161081c565b610a0c816125b0565b50565b6001600160a01b038116600090815260046020526040812090336040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918516906370a082319060240160206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190613746565b90506003610ace84612530565b6003811115610adf57610adf6134fe565b14610b2c5760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b60008111610b7c5760405162461bcd60e51b815260206004820152601860248201527f42726f6b65723a206e6f7468696e6720746f20636c61696d0000000000000000604482015260640161081c565b6000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb757600080fd5b505afa158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef9190613746565b828560040154610bff9190613775565b610c099190613794565b905080846004016000828254610c1f91906137b6565b90915550506040517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490528616906379cc679090604401600060405180830381600087803b158015610c8757600080fd5b505af1158015610c9b573d6000803e3d6000fd5b50610cb3925050506001600160a01b0384168261261d565b826001600160a01b0316856001600160a01b03167f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e946458385604051610d01929190918252602082015260400190565b60405180910390a35050505050565b610d1a8282612736565b60008281526001602052604090206109059082612484565b610d3c828261275c565b600082815260016020526040902061090590826127e4565b6001600160a01b03828116600090815260046020908152604080832085845260068101909252909120815491929091610100900416336001600160a01b031614610e065760405162461bcd60e51b815260206004820152603260248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f206163636570742070726f706f73616c0000000000000000000000000000606482015260840161081c565b6002610e1183612530565b6003811115610e2257610e226134fe565b14610e6f5760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b6001610e7a826127f9565b6005811115610e8b57610e8b6134fe565b14610ed85760405162461bcd60e51b815260206004820152601e60248201527f42726f6b65723a20696e76616c69642070726f706f73616c2073746174650000604482015260640161081c565b600782015460ff1615610f2d5760405162461bcd60e51b815260206004820152601f60248201527f42726f6b65723a20666c617368206275796f757420697320656e61626c656400604482015260640161081c565b805460ff1916600217815560405183906001600160a01b038616907fb68b23f18c187dede5027186d7dae9fda610a1ce0d025876dd7fb1fa9c52250790600090a3610f9c84838360000160019054906101000a90046001600160a01b0316846001015485600201546001612849565b50505050565b6001600160a01b03821660009081526004602090815260408083208484526006810190925282209091610fd4826127f9565b825490915061010090046001600160a01b0316336001600160a01b0316146110645760405162461bcd60e51b815260206004820152603560248201527f42726f6b65723a206d7573742062652070726f706f73616c277320627579657260448201527f20746f2077697468647261772070726f706f73616c0000000000000000000000606482015260840161081c565b6001816005811115611078576110786134fe565b148061109557506004816005811115611093576110936134fe565b145b6110e15760405162461bcd60e51b815260206004820152601e60248201527f42726f6b65723a20696e76616c69642070726f706f73616c2073746174650000604482015260640161081c565b815460ff198116600517835560028301546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526101009092046001600160a01b0390811660048401819052602484019290925290919087169063a9059cbb90604401602060405180830381600087803b15801561116157600080fd5b505af1158015611175573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119991906137cd565b5060018301546111b3906001600160a01b0383169061261d565b60405185906001600160a01b038816907ffb591de3f595328713bb4313a53f62d518cfcdbc6b8efd8e1824d80d1d0d03fb90600090a3505050505050565b6001600160a01b03811660009081526004602052604081209061121382612530565b825490915061010090046001600160a01b0316336001600160a01b0316146112a35760405162461bcd60e51b815260206004820152603660248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f20656e61626c6520666c617368206275796f757400000000000000000000606482015260840161081c565b60018160038111156112b7576112b76134fe565b14806112d4575060028160038111156112d2576112d26134fe565b145b6113205760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b600782015460ff161561139a5760405162461bcd60e51b8152602060048201526024808201527f42726f6b65723a20666c617368206275796f757420616c726561647920656e6160448201527f626c656400000000000000000000000000000000000000000000000000000000606482015260840161081c565b6109058383612b57565b6001600160a01b038116600090815260046020526040902060026113c782612530565b60038111156113d8576113d86134fe565b146114255760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b600781015460ff166114795760405162461bcd60e51b815260206004820181905260248201527f42726f6b65723a20666c617368206275796f75742069732064697361626c6564604482015260640161081c565b33600080611488858585612b9e565b91509150813410156114dc5760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e73756666696369656e742076616c7565000000000000604482015260640161081c565b6114eb85858534856000612849565b5050505050565b6001600160a01b03811660009081526004602052604081209061151482612530565b825490915061010090046001600160a01b0316336001600160a01b0316146115a45760405162461bcd60e51b815260206004820152603060248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f20656e61626c652065736361706500000000000000000000000000000000606482015260840161081c565b60018160038111156115b8576115b86134fe565b14806115d5575060028160038111156115d3576115d36134fe565b145b6116215760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b6007820154610100900460ff161561167b5760405162461bcd60e51b815260206004820152601e60248201527f42726f6b65723a2065736361706520616c726561647920656e61626c65640000604482015260640161081c565b6109058383612e09565b6116906000336104ed565b6117025760405162461bcd60e51b815260206004820152603860248201527f42726f6b65723a206d75737420686176652044454641554c545f41444d494e5f60448201527f524f4c4520746f207365742070726f746f636f6c206665650000000000000000606482015260840161081c565b68056bc75e2d6310000081106117805760405162461bcd60e51b815260206004820152602d60248201527f42726f6b65723a2070726f746f636f6c20666565206d75737420626520696e6660448201527f6572696f7220746f203130302500000000000000000000000000000000000000606482015260840161081c565b610a0c81612e52565b60008281526001602052604081206117a19083612e87565b9392505050565b6001600160a01b0381166000908152600460205260408120819081908190819081908190819081906117d981612530565b99508060000160019054906101000a90046001600160a01b0316985080600101549750806002015496508060030154955080600401549450806005015493508060070160009054906101000a900460ff1692508060070160019054906101000a900460ff169150509193959799909294969850565b6001600160a01b03821660009081526004602090815260408083208484526006810190925282209091611880826127f9565b835490915061010090046001600160a01b0316336001600160a01b0316146119105760405162461bcd60e51b815260206004820152603260248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f2072656a6563742070726f706f73616c0000000000000000000000000000606482015260840161081c565b6001816005811115611924576119246134fe565b14806119415750600481600581111561193f5761193f6134fe565b145b61198d5760405162461bcd60e51b815260206004820152601e60248201527f42726f6b65723a20696e76616c69642070726f706f73616c2073746174650000604482015260640161081c565b815460ff198116600317835560028301546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526101009092046001600160a01b0390811660048401819052602484019290925290919087169063a9059cbb90604401602060405180830381600087803b158015611a0d57600080fd5b505af1158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4591906137cd565b506001830154611a5f906001600160a01b0383169061261d565b60405185906001600160a01b038816907f123432125627249bc47aca642b7e775249fbacf9c32f467ef8eade2c0bd859e990600090a3505050505050565b6001600160a01b03821660009081526004602052604081208190611ac390859085612b9e565b915091505b9250929050565b600081815260016020526040812061076890612e93565b610d3c8282612e9d565b6001600160a01b03821660009081526004602052604081206002611b1382612530565b6003811115611b2457611b246134fe565b14611b715760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b600781015460ff1615611bc65760405162461bcd60e51b815260206004820152601f60248201527f42726f6b65723a20666c617368206275796f757420697320656e61626c656400604482015260640161081c565b33600080611bd5878585612b9e565b9150915081341015611c295760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e73756666696369656e742076616c7565000000000000604482015260640161081c565b8015611cd2576040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152306024830152604482018390528816906323b872dd90606401602060405180830381600087803b158015611c9857600080fd5b505af1158015611cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd091906137cd565b505b60058401805460009182611ce5836137ea565b90915550905060008715611d0257611cfd8842613805565b611d05565b60005b6040805160a0810190915290915080600181526001600160a01b03871660208083019190915234604080840191909152606083018790526080909201849052600085815260068a019091522081518154829060ff19166001836005811115611d6f57611d6f6134fe565b021790555060208281015182547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03928316021783556040808501516001850155606080860151600286015560809095015160039094019390935582513481529182018790529181018490528782169285928d16917f2e0ff6e48a8a48aff6ceabfca8b39f5468c5d8537cda6f84bf3d138a057d63a9910160405180910390a450979650505050505050565b6001600160a01b0387166000908152600460205260409020611e687fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe336104ed565b611eda5760405162461bcd60e51b815260206004820152602b60248201527f42726f6b65723a206d75737420686176652052454749535445525f524f4c452060448201527f746f207265676973746572000000000000000000000000000000000000000000606482015260840161081c565b6001600160a01b038716611f565760405162461bcd60e51b815260206004820152602b60248201527f42726f6b65723a20677561726469616e2063616e6e6f7420626520746865207a60448201527f65726f2061646472657373000000000000000000000000000000000000000000606482015260840161081c565b62093a80841015611fa95760405162461bcd60e51b815260206004820152601860248201527f42726f6b65723a20696e76616c69642074696d656c6f636b0000000000000000604482015260640161081c565b805460017fffffffffffffffffffffff0000000000000000000000000000000000000000009091166101006001600160a01b038a16021781178255810186905560028101859055611ffa8442613805565b60038201556001600160a01b038088169089167f960433c4e2767afac577684c6535af583fc391eb4d68dd65ec195cc868415f3e888861203a8942613805565b6040805193845260208401929092529082015260600160405180910390a38215612068576120688882612b57565b8115612078576120788882612e09565b5050505050505050565b6120ac7f12630b13fc535892fff29cd260a4eee87eac2069149688d850fa73ac0322e120336104ed565b61211e5760405162461bcd60e51b815260206004820152602c60248201527f42726f6b65723a206d7573742068617665204553434150455f524f4c4520746f60448201527f20657363617065204e4654730000000000000000000000000000000000000000606482015260840161081c565b848314801561212c57508481145b61219e5760405162461bcd60e51b815260206004820152602360248201527f42726f6b65723a20706172616d6574657273206c656e67746873206d69736d6160448201527f7463680000000000000000000000000000000000000000000000000000000000606482015260840161081c565b60005b8581101561240457600460008888848181106121bf576121bf61381d565b90506020020160208101906121d4919061344a565b6001600160a01b03168152602081019190915260400160002060070154610100900460ff166122455760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a206573636170652069732064697361626c6564000000000000604482015260640161081c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663331d8e5d8888848181106122865761228661381d565b905060200201602081019061229b919061344a565b8787858181106122ad576122ad61381d565b90506020020160208101906122c2919061344a565b8686868181106122d4576122d461381d565b90506020028101906122e69190613833565b6040518563ffffffff1660e01b815260040161230594939291906138c3565b600060405180830381600087803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050508484828181106123495761234961381d565b905060200201602081019061235e919061344a565b6001600160a01b03168787838181106123795761237961381d565b905060200201602081019061238e919061344a565b6001600160a01b03167f9e96f699a3921fe6afbe2c81ca67fd4e9be84b27e8de6ae8e3c2eed964069b4f8585858181106123ca576123ca61381d565b90506020028101906123dc9190613833565b6040516123ea9291906138fa565b60405180910390a3806123fc816137ea565b9150506121a1565b50505050505050565b6001600160a01b038216600090815260046020908152604080832084845260060190915281208190819081908190612444816127f9565b815460018301546002840154600390940154929b6101009092046001600160a01b03169a509850919650945092505050565b6124808282612ec3565b5050565b60006117a1836001600160a01b038416612f61565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061076857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610768565b805460009060ff16600181600381111561254c5761254c6134fe565b14801561255d575082600301544210155b156107685750600292915050565b60078101805461ff00191690556040516001600160a01b038316907f21f4c01ab6a34520ceec1edd87fd455cf97bce35cec51f04a1f49c17b6466f3790600090a25050565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067906020015b60405180910390a150565b8047101561266d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161081c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146126ba576040519150601f19603f3d011682016040523d82523d6000602084013e6126bf565b606091505b50509050806109055760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161081c565b6000828152602081905260409020600101546127528133612fb0565b6109058383612ec3565b6001600160a01b03811633146127da5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161081c565b612480828261302e565b60006117a1836001600160a01b0384166130ad565b8054600382015460009160ff1690600182600581111561281b5761281b6134fe565b14801561282757508015155b80156128335750804210155b15612842575060049392505050565b5092915050565b600068056bc75e2d63100000600354856128639190613775565b61286d9190613794565b865460ff19166003178755905061288481856137b6565b6004808801919091556040517fc74073a10000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c74073a1916128ff918b91016001600160a01b0391909116815260200190565b600060405180830381600087803b15801561291957600080fd5b505af115801561292d573d6000803e3d6000fd5b505050506000831115612a345781156129b8576040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b038816906342966c6890602401600060405180830381600087803b15801561299b57600080fd5b505af11580156129af573d6000803e3d6000fd5b50505050612a34565b6040517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018590528816906379cc679090604401600060405180830381600087803b158015612a1b57600080fd5b505af1158015612a2f573d6000803e3d6000fd5b505050505b6040517f331d8e5d0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152868116602483015260606044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063331d8e5d90608401600060405180830381600087803b158015612ac657600080fd5b505af1158015612ada573d6000803e3d6000fd5b505050506000811115612afd57600254612afd906001600160a01b03168261261d565b60408051858152602081018590529081018290526001600160a01b0380871691908916907f010566ed1f1638146fb035e3ac42796e2ae2df2045dfc2d6c92a4b07f04ad6919060600160405180910390a350505050505050565b60078101805460ff191660011790556040516001600160a01b038316907fc06afb3e82286e0c8c7ebc246d8cb1463083152f95c756f6b07113e2275a42a190600090a25050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260009182918616906370a082319060240160206040518083038186803b158015612bfd57600080fd5b505afa158015612c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c359190613746565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c7257600080fd5b505afa158015612c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612caa9190613746565b90506000670de0b6b3a76400008660020154670de0b6b3a7640000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0058b3d8c60006040518363ffffffff1660e01b8152600401612d15929190613916565b60206040518083038186803b158015612d2d57600080fd5b505afa158015612d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d659190613746565b612d6f9190613775565b612d799190613794565b612d839190613775565b612d8d9190613794565b6001870154909150600082821015612da55782612da7565b815b905060008411612db75780612dfb565b670de0b6b3a764000084612dcb8288613775565b612dd59190613794565b612de790670de0b6b3a76400006137b6565b612df19083613775565b612dfb9190613794565b955050505050935093915050565b60078101805461ff0019166101001790556040516001600160a01b038316907f6d1caeda9382fb9391d2939838457563371f88d39b58b7509411bb381e3c62f490600090a25050565b60038190556040518181527fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b190602001612612565b60006117a183836131a0565b6000610768825490565b600082815260208190526040902060010154612eb98133612fb0565b610905838361302e565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16612480576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055612f1d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054612fa857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610768565b506000610768565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661248057612fec816001600160a01b031660146131ca565b612ff78360206131ca565b60405160200161300892919061396f565b60408051601f198184030181529082905262461bcd60e51b825261081c916004016139f0565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615612480576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156131965760006130d16001836137b6565b85549091506000906130e5906001906137b6565b905081811461314a5760008660000182815481106131055761310561381d565b90600052602060002001549050808760000184815481106131285761312861381d565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061315b5761315b613a23565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610768565b6000915050610768565b60008260000182815481106131b7576131b761381d565b9060005260206000200154905092915050565b606060006131d9836002613775565b6131e4906002613805565b67ffffffffffffffff8111156131fc576131fc613a39565b6040519080825280601f01601f191660200182016040528015613226576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061325d5761325d61381d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106132c0576132c061381d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006132fc846002613775565b613307906001613805565b90505b60018111156133a4577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106133485761334861381d565b1a60f81b82828151811061335e5761335e61381d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361339d81613a4f565b905061330a565b5083156117a15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161081c565b60006020828403121561340557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146117a157600080fd5b6001600160a01b0381168114610a0c57600080fd5b60006020828403121561345c57600080fd5b81356117a181613435565b60006020828403121561347957600080fd5b5035919050565b6000806040838503121561349357600080fd5b8235915060208301356134a581613435565b809150509250929050565b600080604083850312156134c357600080fd5b82356134ce81613435565b946020939093013593505050565b600080604083850312156134ef57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b610120810160048b10613529576135296134fe565b9981526001600160a01b0398909816602089015260408801969096526060870194909452608086019290925260a085015260c0840152151560e083015215156101009091015290565b6000806040838503121561358557600080fd5b823561359081613435565b915060208301356134a581613435565b8015158114610a0c57600080fd5b600080600080600080600060e0888a0312156135c957600080fd5b87356135d481613435565b965060208801356135e481613435565b955060408801359450606088013593506080880135925060a0880135613609816135a0565b915060c0880135613619816135a0565b8091505092959891949750929550565b60008083601f84011261363b57600080fd5b50813567ffffffffffffffff81111561365357600080fd5b6020830191508360208260051b8501011115611ac857600080fd5b6000806000806000806060878903121561368757600080fd5b863567ffffffffffffffff8082111561369f57600080fd5b6136ab8a838b01613629565b909850965060208901359150808211156136c457600080fd5b6136d08a838b01613629565b909650945060408901359150808211156136e957600080fd5b506136f689828a01613629565b979a9699509497509295939492505050565b60a081016006871061371c5761371c6134fe565b9581526001600160a01b039490941660208501526040840192909252606083015260809091015290565b60006020828403121561375857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561378f5761378f61375f565b500290565b6000826137b157634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156137c8576137c861375f565b500390565b6000602082840312156137df57600080fd5b81516117a1816135a0565b60006000198214156137fe576137fe61375f565b5060010190565b600082198211156138185761381861375f565b500190565b634e487b7160e01b600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261386857600080fd5b83018035915067ffffffffffffffff82111561388357600080fd5b602001915036819003821315611ac857600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b038087168352808616602084015250606060408301526138f0606083018486613898565b9695505050505050565b60208152600061390e602083018486613898565b949350505050565b6001600160a01b03831681526040810160028310613936576139366134fe565b8260208301529392505050565b60005b8381101561395e578181015183820152602001613946565b83811115610f9c5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516139a7816017850160208801613943565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516139e4816028840160208801613943565b01602801949350505050565b6020815260008251806020840152613a0f816040850160208701613943565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600081613a5e57613a5e61375f565b50600019019056fea264697066735822122045f988eab0ae20e01a4f2c1f36049e72613f50be846db0096c604ef3fb01f42664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102195760003560e01c8063787dce3d1161011d578063ca15c873116100b0578063eb3aebbf1161007f578063f3df1e3211610064578063f3df1e3214610691578063f85fc0ab146106c2578063fbfa77cf146106df57600080fd5b8063eb3aebbf1461063d578063edc6b9bd1461065d57600080fd5b8063ca15c873146105ca578063d547741f146105ea578063dfc51a251461060a578063e1f01ca41461061d57600080fd5b8063ad34b245116100ec578063ad34b2451461052b578063b0913a1314610560578063b0e21e8a14610580578063c0f0a4c81461059557600080fd5b8063787dce3d146104925780639010d07c146104b257806391d14854146104d2578063a217fddf1461051657600080fd5b806336568abe116101b057806360b191cb1161017f57806373f96d8e1161016457806373f96d8e1461042057806374f533171461044057806376cdb03b1461047457600080fd5b806360b191cb146103ed57806367e9bdad1461040d57600080fd5b806336568abe146103765780634209f150146103965780634bbeb413146103b65780635168e1a1146103cd57600080fd5b80631e83409a116101ec5780631e83409a146102dc578063248a9ca3146102fc5780632e0f26251461033a5780632f2ff15d1461035657600080fd5b806301ffc9a71461021e57806303eb017614610253578063090d23b9146102755780631d14384814610295575b600080fd5b34801561022a57600080fd5b5061023e6102393660046133f3565b610712565b60405190151581526020015b60405180910390f35b34801561025f57600080fd5b5061027361026e36600461344a565b61076e565b005b34801561028157600080fd5b5061027361029036600461344a565b61090a565b3480156102a157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161024a565b3480156102e857600080fd5b506102736102f736600461344a565b610a0f565b34801561030857600080fd5b5061032c610317366004613467565b60009081526020819052604090206001015490565b60405190815260200161024a565b34801561034657600080fd5b5061032c670de0b6b3a764000081565b34801561036257600080fd5b50610273610371366004613480565b610d10565b34801561038257600080fd5b50610273610391366004613480565b610d32565b3480156103a257600080fd5b506102736103b13660046134b0565b610d54565b3480156103c257600080fd5b5061032c62093a8081565b3480156103d957600080fd5b506102736103e83660046134b0565b610fa2565b3480156103f957600080fd5b5061027361040836600461344a565b6111f1565b61027361041b36600461344a565b6113a4565b34801561042c57600080fd5b5061027361043b36600461344a565b6114f2565b34801561044c57600080fd5b5061032c7fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe81565b34801561048057600080fd5b506002546001600160a01b03166102c4565b34801561049e57600080fd5b506102736104ad366004613467565b611685565b3480156104be57600080fd5b506102c46104cd3660046134dc565b611789565b3480156104de57600080fd5b5061023e6104ed366004613480565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561052257600080fd5b5061032c600081565b34801561053757600080fd5b5061054b61054636600461344a565b6117a8565b60405161024a99989796959493929190613514565b34801561056c57600080fd5b5061027361057b3660046134b0565b61184e565b34801561058c57600080fd5b5060035461032c565b3480156105a157600080fd5b506105b56105b0366004613572565b611a9d565b6040805192835260208301919091520161024a565b3480156105d657600080fd5b5061032c6105e5366004613467565b611acf565b3480156105f657600080fd5b50610273610605366004613480565b611ae6565b61032c6106183660046134b0565b611af0565b34801561062957600080fd5b506102736106383660046135ae565b611e26565b34801561064957600080fd5b5061027361065836600461366e565b612082565b34801561066957600080fd5b5061032c7f12630b13fc535892fff29cd260a4eee87eac2069149688d850fa73ac0322e12081565b34801561069d57600080fd5b506106b16106ac3660046134b0565b61240d565b60405161024a959493929190613708565b3480156106ce57600080fd5b5061032c68056bc75e2d6310000081565b3480156106eb57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102c4565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f000000000000000000000000000000000000000000000000000000001480610768575061076882612499565b92915050565b6001600160a01b03811660009081526004602052604081209061079082612530565b825490915061010090046001600160a01b0316336001600160a01b0316146108255760405162461bcd60e51b815260206004820152603160248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f2064697361626c652065736361706500000000000000000000000000000060648201526084015b60405180910390fd5b6001816003811115610839576108396134fe565b148061085657506002816003811115610854576108546134fe565b145b6108a25760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b6007820154610100900460ff166108fb5760405162461bcd60e51b815260206004820152601f60248201527f42726f6b65723a2065736361706520616c72656164792064697361626c656400604482015260640161081c565b610905838361256b565b505050565b6109156000336104ed565b6109875760405162461bcd60e51b815260206004820152603060248201527f42726f6b65723a206d75737420686176652044454641554c545f41444d494e5f60448201527f524f4c4520746f207365742062616e6b00000000000000000000000000000000606482015260840161081c565b6001600160a01b038116610a035760405162461bcd60e51b815260206004820152602760248201527f42726f6b65723a2062616e6b2063616e6e6f7420626520746865207a65726f2060448201527f6164647265737300000000000000000000000000000000000000000000000000606482015260840161081c565b610a0c816125b0565b50565b6001600160a01b038116600090815260046020526040812090336040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918516906370a082319060240160206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190613746565b90506003610ace84612530565b6003811115610adf57610adf6134fe565b14610b2c5760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b60008111610b7c5760405162461bcd60e51b815260206004820152601860248201527f42726f6b65723a206e6f7468696e6720746f20636c61696d0000000000000000604482015260640161081c565b6000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb757600080fd5b505afa158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef9190613746565b828560040154610bff9190613775565b610c099190613794565b905080846004016000828254610c1f91906137b6565b90915550506040517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490528616906379cc679090604401600060405180830381600087803b158015610c8757600080fd5b505af1158015610c9b573d6000803e3d6000fd5b50610cb3925050506001600160a01b0384168261261d565b826001600160a01b0316856001600160a01b03167f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e946458385604051610d01929190918252602082015260400190565b60405180910390a35050505050565b610d1a8282612736565b60008281526001602052604090206109059082612484565b610d3c828261275c565b600082815260016020526040902061090590826127e4565b6001600160a01b03828116600090815260046020908152604080832085845260068101909252909120815491929091610100900416336001600160a01b031614610e065760405162461bcd60e51b815260206004820152603260248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f206163636570742070726f706f73616c0000000000000000000000000000606482015260840161081c565b6002610e1183612530565b6003811115610e2257610e226134fe565b14610e6f5760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b6001610e7a826127f9565b6005811115610e8b57610e8b6134fe565b14610ed85760405162461bcd60e51b815260206004820152601e60248201527f42726f6b65723a20696e76616c69642070726f706f73616c2073746174650000604482015260640161081c565b600782015460ff1615610f2d5760405162461bcd60e51b815260206004820152601f60248201527f42726f6b65723a20666c617368206275796f757420697320656e61626c656400604482015260640161081c565b805460ff1916600217815560405183906001600160a01b038616907fb68b23f18c187dede5027186d7dae9fda610a1ce0d025876dd7fb1fa9c52250790600090a3610f9c84838360000160019054906101000a90046001600160a01b0316846001015485600201546001612849565b50505050565b6001600160a01b03821660009081526004602090815260408083208484526006810190925282209091610fd4826127f9565b825490915061010090046001600160a01b0316336001600160a01b0316146110645760405162461bcd60e51b815260206004820152603560248201527f42726f6b65723a206d7573742062652070726f706f73616c277320627579657260448201527f20746f2077697468647261772070726f706f73616c0000000000000000000000606482015260840161081c565b6001816005811115611078576110786134fe565b148061109557506004816005811115611093576110936134fe565b145b6110e15760405162461bcd60e51b815260206004820152601e60248201527f42726f6b65723a20696e76616c69642070726f706f73616c2073746174650000604482015260640161081c565b815460ff198116600517835560028301546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526101009092046001600160a01b0390811660048401819052602484019290925290919087169063a9059cbb90604401602060405180830381600087803b15801561116157600080fd5b505af1158015611175573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119991906137cd565b5060018301546111b3906001600160a01b0383169061261d565b60405185906001600160a01b038816907ffb591de3f595328713bb4313a53f62d518cfcdbc6b8efd8e1824d80d1d0d03fb90600090a3505050505050565b6001600160a01b03811660009081526004602052604081209061121382612530565b825490915061010090046001600160a01b0316336001600160a01b0316146112a35760405162461bcd60e51b815260206004820152603660248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f20656e61626c6520666c617368206275796f757400000000000000000000606482015260840161081c565b60018160038111156112b7576112b76134fe565b14806112d4575060028160038111156112d2576112d26134fe565b145b6113205760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b600782015460ff161561139a5760405162461bcd60e51b8152602060048201526024808201527f42726f6b65723a20666c617368206275796f757420616c726561647920656e6160448201527f626c656400000000000000000000000000000000000000000000000000000000606482015260840161081c565b6109058383612b57565b6001600160a01b038116600090815260046020526040902060026113c782612530565b60038111156113d8576113d86134fe565b146114255760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b600781015460ff166114795760405162461bcd60e51b815260206004820181905260248201527f42726f6b65723a20666c617368206275796f75742069732064697361626c6564604482015260640161081c565b33600080611488858585612b9e565b91509150813410156114dc5760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e73756666696369656e742076616c7565000000000000604482015260640161081c565b6114eb85858534856000612849565b5050505050565b6001600160a01b03811660009081526004602052604081209061151482612530565b825490915061010090046001600160a01b0316336001600160a01b0316146115a45760405162461bcd60e51b815260206004820152603060248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f20656e61626c652065736361706500000000000000000000000000000000606482015260840161081c565b60018160038111156115b8576115b86134fe565b14806115d5575060028160038111156115d3576115d36134fe565b145b6116215760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b6007820154610100900460ff161561167b5760405162461bcd60e51b815260206004820152601e60248201527f42726f6b65723a2065736361706520616c726561647920656e61626c65640000604482015260640161081c565b6109058383612e09565b6116906000336104ed565b6117025760405162461bcd60e51b815260206004820152603860248201527f42726f6b65723a206d75737420686176652044454641554c545f41444d494e5f60448201527f524f4c4520746f207365742070726f746f636f6c206665650000000000000000606482015260840161081c565b68056bc75e2d6310000081106117805760405162461bcd60e51b815260206004820152602d60248201527f42726f6b65723a2070726f746f636f6c20666565206d75737420626520696e6660448201527f6572696f7220746f203130302500000000000000000000000000000000000000606482015260840161081c565b610a0c81612e52565b60008281526001602052604081206117a19083612e87565b9392505050565b6001600160a01b0381166000908152600460205260408120819081908190819081908190819081906117d981612530565b99508060000160019054906101000a90046001600160a01b0316985080600101549750806002015496508060030154955080600401549450806005015493508060070160009054906101000a900460ff1692508060070160019054906101000a900460ff169150509193959799909294969850565b6001600160a01b03821660009081526004602090815260408083208484526006810190925282209091611880826127f9565b835490915061010090046001600160a01b0316336001600160a01b0316146119105760405162461bcd60e51b815260206004820152603260248201527f42726f6b65723a206d7573742062652073616c65277320677561726469616e2060448201527f746f2072656a6563742070726f706f73616c0000000000000000000000000000606482015260840161081c565b6001816005811115611924576119246134fe565b14806119415750600481600581111561193f5761193f6134fe565b145b61198d5760405162461bcd60e51b815260206004820152601e60248201527f42726f6b65723a20696e76616c69642070726f706f73616c2073746174650000604482015260640161081c565b815460ff198116600317835560028301546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526101009092046001600160a01b0390811660048401819052602484019290925290919087169063a9059cbb90604401602060405180830381600087803b158015611a0d57600080fd5b505af1158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4591906137cd565b506001830154611a5f906001600160a01b0383169061261d565b60405185906001600160a01b038816907f123432125627249bc47aca642b7e775249fbacf9c32f467ef8eade2c0bd859e990600090a3505050505050565b6001600160a01b03821660009081526004602052604081208190611ac390859085612b9e565b915091505b9250929050565b600081815260016020526040812061076890612e93565b610d3c8282612e9d565b6001600160a01b03821660009081526004602052604081206002611b1382612530565b6003811115611b2457611b246134fe565b14611b715760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e76616c69642073616c65207374617465000000000000604482015260640161081c565b600781015460ff1615611bc65760405162461bcd60e51b815260206004820152601f60248201527f42726f6b65723a20666c617368206275796f757420697320656e61626c656400604482015260640161081c565b33600080611bd5878585612b9e565b9150915081341015611c295760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a20696e73756666696369656e742076616c7565000000000000604482015260640161081c565b8015611cd2576040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152306024830152604482018390528816906323b872dd90606401602060405180830381600087803b158015611c9857600080fd5b505af1158015611cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd091906137cd565b505b60058401805460009182611ce5836137ea565b90915550905060008715611d0257611cfd8842613805565b611d05565b60005b6040805160a0810190915290915080600181526001600160a01b03871660208083019190915234604080840191909152606083018790526080909201849052600085815260068a019091522081518154829060ff19166001836005811115611d6f57611d6f6134fe565b021790555060208281015182547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03928316021783556040808501516001850155606080860151600286015560809095015160039094019390935582513481529182018790529181018490528782169285928d16917f2e0ff6e48a8a48aff6ceabfca8b39f5468c5d8537cda6f84bf3d138a057d63a9910160405180910390a450979650505050505050565b6001600160a01b0387166000908152600460205260409020611e687fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe336104ed565b611eda5760405162461bcd60e51b815260206004820152602b60248201527f42726f6b65723a206d75737420686176652052454749535445525f524f4c452060448201527f746f207265676973746572000000000000000000000000000000000000000000606482015260840161081c565b6001600160a01b038716611f565760405162461bcd60e51b815260206004820152602b60248201527f42726f6b65723a20677561726469616e2063616e6e6f7420626520746865207a60448201527f65726f2061646472657373000000000000000000000000000000000000000000606482015260840161081c565b62093a80841015611fa95760405162461bcd60e51b815260206004820152601860248201527f42726f6b65723a20696e76616c69642074696d656c6f636b0000000000000000604482015260640161081c565b805460017fffffffffffffffffffffff0000000000000000000000000000000000000000009091166101006001600160a01b038a16021781178255810186905560028101859055611ffa8442613805565b60038201556001600160a01b038088169089167f960433c4e2767afac577684c6535af583fc391eb4d68dd65ec195cc868415f3e888861203a8942613805565b6040805193845260208401929092529082015260600160405180910390a38215612068576120688882612b57565b8115612078576120788882612e09565b5050505050505050565b6120ac7f12630b13fc535892fff29cd260a4eee87eac2069149688d850fa73ac0322e120336104ed565b61211e5760405162461bcd60e51b815260206004820152602c60248201527f42726f6b65723a206d7573742068617665204553434150455f524f4c4520746f60448201527f20657363617065204e4654730000000000000000000000000000000000000000606482015260840161081c565b848314801561212c57508481145b61219e5760405162461bcd60e51b815260206004820152602360248201527f42726f6b65723a20706172616d6574657273206c656e67746873206d69736d6160448201527f7463680000000000000000000000000000000000000000000000000000000000606482015260840161081c565b60005b8581101561240457600460008888848181106121bf576121bf61381d565b90506020020160208101906121d4919061344a565b6001600160a01b03168152602081019190915260400160002060070154610100900460ff166122455760405162461bcd60e51b815260206004820152601a60248201527f42726f6b65723a206573636170652069732064697361626c6564000000000000604482015260640161081c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663331d8e5d8888848181106122865761228661381d565b905060200201602081019061229b919061344a565b8787858181106122ad576122ad61381d565b90506020020160208101906122c2919061344a565b8686868181106122d4576122d461381d565b90506020028101906122e69190613833565b6040518563ffffffff1660e01b815260040161230594939291906138c3565b600060405180830381600087803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050508484828181106123495761234961381d565b905060200201602081019061235e919061344a565b6001600160a01b03168787838181106123795761237961381d565b905060200201602081019061238e919061344a565b6001600160a01b03167f9e96f699a3921fe6afbe2c81ca67fd4e9be84b27e8de6ae8e3c2eed964069b4f8585858181106123ca576123ca61381d565b90506020028101906123dc9190613833565b6040516123ea9291906138fa565b60405180910390a3806123fc816137ea565b9150506121a1565b50505050505050565b6001600160a01b038216600090815260046020908152604080832084845260060190915281208190819081908190612444816127f9565b815460018301546002840154600390940154929b6101009092046001600160a01b03169a509850919650945092505050565b6124808282612ec3565b5050565b60006117a1836001600160a01b038416612f61565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061076857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610768565b805460009060ff16600181600381111561254c5761254c6134fe565b14801561255d575082600301544210155b156107685750600292915050565b60078101805461ff00191690556040516001600160a01b038316907f21f4c01ab6a34520ceec1edd87fd455cf97bce35cec51f04a1f49c17b6466f3790600090a25050565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067906020015b60405180910390a150565b8047101561266d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161081c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146126ba576040519150601f19603f3d011682016040523d82523d6000602084013e6126bf565b606091505b50509050806109055760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161081c565b6000828152602081905260409020600101546127528133612fb0565b6109058383612ec3565b6001600160a01b03811633146127da5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161081c565b612480828261302e565b60006117a1836001600160a01b0384166130ad565b8054600382015460009160ff1690600182600581111561281b5761281b6134fe565b14801561282757508015155b80156128335750804210155b15612842575060049392505050565b5092915050565b600068056bc75e2d63100000600354856128639190613775565b61286d9190613794565b865460ff19166003178755905061288481856137b6565b6004808801919091556040517fc74073a10000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c74073a1916128ff918b91016001600160a01b0391909116815260200190565b600060405180830381600087803b15801561291957600080fd5b505af115801561292d573d6000803e3d6000fd5b505050506000831115612a345781156129b8576040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b038816906342966c6890602401600060405180830381600087803b15801561299b57600080fd5b505af11580156129af573d6000803e3d6000fd5b50505050612a34565b6040517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018590528816906379cc679090604401600060405180830381600087803b158015612a1b57600080fd5b505af1158015612a2f573d6000803e3d6000fd5b505050505b6040517f331d8e5d0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152868116602483015260606044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063331d8e5d90608401600060405180830381600087803b158015612ac657600080fd5b505af1158015612ada573d6000803e3d6000fd5b505050506000811115612afd57600254612afd906001600160a01b03168261261d565b60408051858152602081018590529081018290526001600160a01b0380871691908916907f010566ed1f1638146fb035e3ac42796e2ae2df2045dfc2d6c92a4b07f04ad6919060600160405180910390a350505050505050565b60078101805460ff191660011790556040516001600160a01b038316907fc06afb3e82286e0c8c7ebc246d8cb1463083152f95c756f6b07113e2275a42a190600090a25050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260009182918616906370a082319060240160206040518083038186803b158015612bfd57600080fd5b505afa158015612c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c359190613746565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c7257600080fd5b505afa158015612c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612caa9190613746565b90506000670de0b6b3a76400008660020154670de0b6b3a7640000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0058b3d8c60006040518363ffffffff1660e01b8152600401612d15929190613916565b60206040518083038186803b158015612d2d57600080fd5b505afa158015612d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d659190613746565b612d6f9190613775565b612d799190613794565b612d839190613775565b612d8d9190613794565b6001870154909150600082821015612da55782612da7565b815b905060008411612db75780612dfb565b670de0b6b3a764000084612dcb8288613775565b612dd59190613794565b612de790670de0b6b3a76400006137b6565b612df19083613775565b612dfb9190613794565b955050505050935093915050565b60078101805461ff0019166101001790556040516001600160a01b038316907f6d1caeda9382fb9391d2939838457563371f88d39b58b7509411bb381e3c62f490600090a25050565b60038190556040518181527fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b190602001612612565b60006117a183836131a0565b6000610768825490565b600082815260208190526040902060010154612eb98133612fb0565b610905838361302e565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16612480576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055612f1d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054612fa857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610768565b506000610768565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661248057612fec816001600160a01b031660146131ca565b612ff78360206131ca565b60405160200161300892919061396f565b60408051601f198184030181529082905262461bcd60e51b825261081c916004016139f0565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615612480576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156131965760006130d16001836137b6565b85549091506000906130e5906001906137b6565b905081811461314a5760008660000182815481106131055761310561381d565b90600052602060002001549050808760000184815481106131285761312861381d565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061315b5761315b613a23565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610768565b6000915050610768565b60008260000182815481106131b7576131b761381d565b9060005260206000200154905092915050565b606060006131d9836002613775565b6131e4906002613805565b67ffffffffffffffff8111156131fc576131fc613a39565b6040519080825280601f01601f191660200182016040528015613226576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061325d5761325d61381d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106132c0576132c061381d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006132fc846002613775565b613307906001613805565b90505b60018111156133a4577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106133485761334861381d565b1a60f81b82828151811061335e5761335e61381d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361339d81613a4f565b905061330a565b5083156117a15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161081c565b60006020828403121561340557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146117a157600080fd5b6001600160a01b0381168114610a0c57600080fd5b60006020828403121561345c57600080fd5b81356117a181613435565b60006020828403121561347957600080fd5b5035919050565b6000806040838503121561349357600080fd5b8235915060208301356134a581613435565b809150509250929050565b600080604083850312156134c357600080fd5b82356134ce81613435565b946020939093013593505050565b600080604083850312156134ef57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b610120810160048b10613529576135296134fe565b9981526001600160a01b0398909816602089015260408801969096526060870194909452608086019290925260a085015260c0840152151560e083015215156101009091015290565b6000806040838503121561358557600080fd5b823561359081613435565b915060208301356134a581613435565b8015158114610a0c57600080fd5b600080600080600080600060e0888a0312156135c957600080fd5b87356135d481613435565b965060208801356135e481613435565b955060408801359450606088013593506080880135925060a0880135613609816135a0565b915060c0880135613619816135a0565b8091505092959891949750929550565b60008083601f84011261363b57600080fd5b50813567ffffffffffffffff81111561365357600080fd5b6020830191508360208260051b8501011115611ac857600080fd5b6000806000806000806060878903121561368757600080fd5b863567ffffffffffffffff8082111561369f57600080fd5b6136ab8a838b01613629565b909850965060208901359150808211156136c457600080fd5b6136d08a838b01613629565b909650945060408901359150808211156136e957600080fd5b506136f689828a01613629565b979a9699509497509295939492505050565b60a081016006871061371c5761371c6134fe565b9581526001600160a01b039490941660208501526040840192909252606083015260809091015290565b60006020828403121561375857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561378f5761378f61375f565b500290565b6000826137b157634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156137c8576137c861375f565b500390565b6000602082840312156137df57600080fd5b81516117a1816135a0565b60006000198214156137fe576137fe61375f565b5060010190565b600082198211156138185761381861375f565b500190565b634e487b7160e01b600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261386857600080fd5b83018035915067ffffffffffffffff82111561388357600080fd5b602001915036819003821315611ac857600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b038087168352808616602084015250606060408301526138f0606083018486613898565b9695505050505050565b60208152600061390e602083018486613898565b949350505050565b6001600160a01b03831681526040810160028310613936576139366134fe565b8260208301529392505050565b60005b8381101561395e578181015183820152602001613946565b83811115610f9c5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516139a7816017850160208801613943565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516139e4816028840160208801613943565b01602801949350505050565b6020815260008251806020840152613a0f816040850160208701613943565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600081613a5e57613a5e61375f565b50600019019056fea264697066735822122045f988eab0ae20e01a4f2c1f36049e72613f50be846db0096c604ef3fb01f42664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_escape_(address[],address[],bytes[])": {
        "details": "This function is only meant to be used in case of an emergency or upgrade to transfer NFTs to a safer or up-to-date place.",
        "params": {
          "beneficiaries": "The addresses escaped NFTs are transferred to.",
          "datas": "The ERC721#transfer callback datas.",
          "sERC20s": "The sERC20s whose pegged NFTs are transferred."
        }
      },
      "acceptProposal(address,uint256)": {
        "params": {
          "proposalId": "The id of the buyout proposal.",
          "sERC20": "The sERC20 whose pegged NFT was proposed to be bought out."
        }
      },
      "buyout(address)": {
        "details": "This function requires flash buyout to be enabled.",
        "params": {
          "sERC20": "The sERC20 whose pegged NFT is boughtout."
        }
      },
      "claim(address)": {
        "details": "This function is open to re-entrancy for it would be harmless.",
        "params": {
          "sERC20": "The sERC20 whose buyout shares are claimed."
        }
      },
      "createProposal(address,uint256)": {
        "params": {
          "lifespan": "The lifespan of the proposal [in seconds].",
          "sERC20": "The sERC20 whose pegged NFT is proposed to be bought out."
        }
      },
      "disableEscape(address)": {
        "params": {
          "sERC20": "The sERC20 whose pegged NFT is to be made un-escapable."
        }
      },
      "enableEscape(address)": {
        "params": {
          "sERC20": "The sERC20 whose pegged NFT is to be made escapable."
        }
      },
      "enableFlashBuyout(address)": {
        "params": {
          "sERC20": "The sERC20 whose pegged NFT is to be offered to flash buyout."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "register(address,address,uint256,uint256,uint256,bool,bool)": {
        "details": "- We do not check neither that `sERC20` is unregistered nor that it actually is an sERC20 to save gas.      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations, are supposed to be granted REGISTER_ROLE.      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.",
        "params": {
          "escape": "True if spectre's multisig is allowed to escape sERC20's pegged NFT, false otherwise.",
          "flash": "True if flash buyout is enabled, false otherwise.",
          "guardian": "The account authorized to enable flash buyout and accept / reject proposals otherwise.",
          "multiplier": "The sale's buyout multiplier [expressed with 1e18 decimals].",
          "reserve": "The reserve price above which the NFT can be bought out.",
          "sERC20": "The sERC20 whose pegged NFT is put on sale.",
          "timelock": "The period of time after which the sale opens [in seconds]."
        }
      },
      "rejectProposal(address,uint256)": {
        "details": "This function is open to re-entrancy for it would be harmless.",
        "params": {
          "proposalId": "The id of the buyout proposal.",
          "sERC20": "The sERC20 whose pegged NFT was proposed to be bought out."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawProposal(address,uint256)": {
        "details": "This function is open to re-entrancy for it would be harmless.",
        "params": {
          "proposalId": "The id of the buyout proposal.",
          "sERC20": "The sERC20 whose pegged NFT was proposed to be bought out."
        }
      }
    },
    "title": "Broker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_escape_(address[],address[],bytes[])": {
        "notice": "Transfer all the NFTs pegged to `sERC20s `to `beneficiaries` with `datas` as ERC721#safeTransferFrom callback datas."
      },
      "acceptProposal(address,uint256)": {
        "notice": "Accept proposal #`proposalId` to buyout the NFT pegged to `sERC20`."
      },
      "bank()": {
        "notice": "Return the broker's bank."
      },
      "buyout(address)": {
        "notice": "Buyout the NFT pegged to `sERC20`."
      },
      "claim(address)": {
        "notice": "Claim shares of the buyout of the NFT pegged to `sERC20`."
      },
      "createProposal(address,uint256)": {
        "notice": "Create a proposal to buyout the NFT pegged to `sERC20`."
      },
      "disableEscape(address)": {
        "notice": "Disable escape for the NFT pegged to `sERC20`."
      },
      "enableEscape(address)": {
        "notice": "Enable escape for the NFT pegged to `sERC20`."
      },
      "enableFlashBuyout(address)": {
        "notice": "Enable flash buyout for the NFT pegged to `sERC20`."
      },
      "issuer()": {
        "notice": "Return the broker's issuer."
      },
      "priceOfFor(address,address)": {
        "notice": "Return what it costs for `buyer` to buyout the NFT pegged to `sERC20`."
      },
      "proposalFor(address,uint256)": {
        "notice": "Return the proposal #`proposalId` to buyout the NFT pegged to `sERC20`."
      },
      "protocolFee()": {
        "notice": "Return the broker's protocol fee."
      },
      "register(address,address,uint256,uint256,uint256,bool,bool)": {
        "notice": "Put the NFT pegged to `sERC20` on sale."
      },
      "rejectProposal(address,uint256)": {
        "notice": "Reject proposal #`proposalId` to buyout the NFT pegged to `sERC20`."
      },
      "saleOf(address)": {
        "notice": "Return the sale of the NFT pegged to `sERC20`."
      },
      "vault()": {
        "notice": "Return the broker's vault."
      },
      "withdrawProposal(address,uint256)": {
        "notice": "Withdraw proposal #`proposalId` to buyout the NFT pegged to `sERC20`."
      }
    },
    "notice": "Handles the buyout of fractionalized NFTs.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3162,
        "contract": "contracts/broker/Broker.sol:Broker",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3157_storage)"
      },
      {
        "astId": 3463,
        "contract": "contracts/broker/Broker.sol:Broker",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)6836_storage)"
      },
      {
        "astId": 7180,
        "contract": "contracts/broker/Broker.sol:Broker",
        "label": "_bank",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7182,
        "contract": "contracts/broker/Broker.sol:Broker",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7188,
        "contract": "contracts/broker/Broker.sol:Broker",
        "label": "_sales",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(sIERC20)13213,t_struct(Sale)9165_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(sIERC20)13213": {
        "encoding": "inplace",
        "label": "contract sIERC20",
        "numberOfBytes": "20"
      },
      "t_enum(State)9077": {
        "encoding": "inplace",
        "label": "enum Proposals.State",
        "numberOfBytes": "1"
      },
      "t_enum(State)9140": {
        "encoding": "inplace",
        "label": "enum Sales.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)6836_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6836_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3157_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3157_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(sIERC20)13213,t_struct(Sale)9165_storage)": {
        "encoding": "mapping",
        "key": "t_contract(sIERC20)13213",
        "label": "mapping(contract sIERC20 => struct Sales.Sale)",
        "numberOfBytes": "32",
        "value": "t_struct(Sale)9165_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposal)9089_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Proposals.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)9089_storage"
      },
      "t_struct(AddressSet)6836_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6835,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6535_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Proposal)9089_storage": {
        "encoding": "inplace",
        "label": "struct Proposals.Proposal",
        "members": [
          {
            "astId": 9080,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "_state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(State)9077"
          },
          {
            "astId": 9082,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "buyer",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9084,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9086,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "collateral",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9088,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "expiration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)3157_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3154,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3156,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Sale)9165_storage": {
        "encoding": "inplace",
        "label": "struct Sales.Sale",
        "members": [
          {
            "astId": 9143,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "_state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(State)9140"
          },
          {
            "astId": 9145,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "guardian",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9147,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "reserve",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9149,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "multiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9151,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "opening",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9153,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "stock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9155,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "nbOfProposals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9160,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "proposals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Proposal)9089_storage)"
          },
          {
            "astId": 9162,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "flash",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 9164,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "escape",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Set)6535_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6530,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6534,
            "contract": "contracts/broker/Broker.sol:Broker",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}