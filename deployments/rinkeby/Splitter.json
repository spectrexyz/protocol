{
  "address": "0x5E0418E6614943a7BEe3FB220Ce72491F8bD004E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "beneficiaries",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "SetBank",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUNDRED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        }
      ],
      "name": "setBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "shareOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        }
      ],
      "name": "stateOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20[]",
          "name": "sERC20s",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract sIERC20",
          "name": "sERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawnBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f7c7dabaa58cdc278c87682af54c824b82482b3ca0788c5cfd8147792246482",
  "receipt": {
    "to": null,
    "from": "0x8873b045d40A458e46E356a96279aE1820a898bA",
    "contractAddress": "0x5E0418E6614943a7BEe3FB220Ce72491F8bD004E",
    "transactionIndex": 31,
    "gasUsed": "1846352",
    "logsBloom": "0x
    "blockHash": "0x2133b1cb8c0d0f1eb66304998735476b0d6c80f4d325ee6d27b51b442ca06c3b",
    "transactionHash": "0x9f7c7dabaa58cdc278c87682af54c824b82482b3ca0788c5cfd8147792246482",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 9464562,
        "transactionHash": "0x9f7c7dabaa58cdc278c87682af54c824b82482b3ca0788c5cfd8147792246482",
        "address": "0x5E0418E6614943a7BEe3FB220Ce72491F8bD004E",
        "topics": [
          "0x10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067"
        ],
        "data": "0x0000000000000000000000008873b045d40a458e46e356a96279ae1820a898ba",
        "logIndex": 58,
        "blockHash": "0x2133b1cb8c0d0f1eb66304998735476b0d6c80f4d325ee6d27b51b442ca06c3b"
      },
      {
        "transactionIndex": 31,
        "blockNumber": 9464562,
        "transactionHash": "0x9f7c7dabaa58cdc278c87682af54c824b82482b3ca0788c5cfd8147792246482",
        "address": "0x5E0418E6614943a7BEe3FB220Ce72491F8bD004E",
        "topics": [
          "0xdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000022b1c8c1227a0000",
        "logIndex": 59,
        "blockHash": "0x2133b1cb8c0d0f1eb66304998735476b0d6c80f4d325ee6d27b51b442ca06c3b"
      },
      {
        "transactionIndex": 31,
        "blockNumber": 9464562,
        "transactionHash": "0x9f7c7dabaa58cdc278c87682af54c824b82482b3ca0788c5cfd8147792246482",
        "address": "0x5E0418E6614943a7BEe3FB220Ce72491F8bD004E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008873b045d40a458e46e356a96279ae1820a898ba",
          "0x0000000000000000000000008873b045d40a458e46e356a96279ae1820a898ba"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0x2133b1cb8c0d0f1eb66304998735476b0d6c80f4d325ee6d27b51b442ca06c3b"
      }
    ],
    "blockNumber": 9464562,
    "cumulativeGasUsed": "4336809",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8873b045d40a458e46e356a96279ae1820a898ba",
    "2500000000000000000"
  ],
  "solcInputHash": "e063610f6b9cf6ecd84ffa013d639e0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"SetBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"shareOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"}],\"name\":\"stateOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20[]\",\"name\":\"sERC20s\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract sIERC20\",\"name\":\"sERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawnBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"register(address,address[],uint256[])\":{\"details\":\"- We do not check neither that `sERC20` is unregistered nor that it actually is an sERC20 to save gas.      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations, are supposed to be granted REGISTER_ROLE.      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.\",\"params\":{\"beneficiaries\":\"The addresses between which to split the received sERC20s.\",\"sERC20\":\"The sERC20 whose received tokens are to split between beneficiaries.\",\"shares\":\"The respective shares of the beneficiaries [expressed with 1e18 decimals].\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"setBank(address)\":{\"params\":{\"bank_\":\"The bank to set.\"}},\"setProtocolFee(uint256)\":{\"params\":{\"fee_\":\"The fee to set [expressed with 1e18 decimals].\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdraw(address,address)\":{\"details\":\"- We do not check neither that `sERC20` is registered nor that split.shares[beneficiary] != 0.      - Indeed, the contract already reverts in such a situation for due == withdrawn == 0.\",\"params\":{\"beneficiary\":\"The beneficiary from whom to withdraw the due sERC20 tokens.\",\"sERC20\":\"The sERC20 to withdraw.\"}},\"withdrawBatch(address[],address)\":{\"details\":\"- The same security remarks as above apply, plus:      - It is up to the user not to include the same sERC20 twice in `sERC20s` - otherwise the transaction reverts.      - We do not check the sERC20s array length as the gas limit can rise in the future.      - Therefore, it is up to the user to make sure he does not run out of gas.\",\"params\":{\"beneficiary\":\"The beneficiary from whom to withdraw the due sERC20s tokens.\",\"sERC20s\":\"The sERC20s to withdraw.\"}}},\"title\":\"Splitter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bank()\":{\"notice\":\"Return the splitter's bank.\"},\"protocolFee()\":{\"notice\":\"Return the splitter's fee.\"},\"register(address,address[],uint256[])\":{\"notice\":\"Register an `sERC20` whose received tokens are to split between `beneficiaries` with respect to `shares`.\"},\"setBank(address)\":{\"notice\":\"Set the splitter's bank.\"},\"setProtocolFee(uint256)\":{\"notice\":\"Set the splitter's fee.\"},\"shareOf(address,address)\":{\"notice\":\"Return the share of `beneficiary` over the received `sERC20` tokens [expressed with 1e18 decimals].\"},\"stateOf(address)\":{\"notice\":\"Return the amount of `sERC20` tokens received and whithdrawn.\"},\"withdraw(address,address)\":{\"notice\":\"Withdraw `sERC20` tokens due to `beneficiary`.\"},\"withdrawBatch(address[],address)\":{\"notice\":\"Batch withdraw `sERC20s` tokens due to `beneficiary`.\"},\"withdrawnBy(address,address)\":{\"notice\":\"Return the amount of `sERC20` tokens already withdrawn by `beneficiary`.\"}},\"notice\":\"Splits received sERC20s between registered beneficiaries.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Splitter.sol\":\"Splitter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/token/sIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n\\ninterface sIERC20 is IAccessControlUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable, IERC20PermitUpgradeable {\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 cap_,\\n        address admin\\n    ) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function snapshot() external returns (uint256);\\n\\n    function onERC1155Transferred(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function vault() external view returns (IVault);\\n\\n    function cap() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x95d231be55706de5a81526647312e6a8d95ada1ec6ece6280513c35373c54766\",\"license\":\"GPL-3.0\"},\"contracts/utils/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/sIERC20.sol\\\";\\n\\ninterface ISplitter {\\n    struct Split {\\n        uint256 totalWithdrawn;\\n        mapping(address => uint256) shares;\\n        mapping(address => uint256) withdrawn;\\n    }\\n\\n    event Register(sIERC20 indexed sERC20, address[] beneficiaries, uint256[] shares, uint256 fee, uint256 allocation);\\n    event Withdraw(sIERC20 indexed sERC20, address indexed beneficiary, uint256 amount);\\n    event SetBank(address bank);\\n    event SetProtocolFee(uint256 protocolFee);\\n\\n    function register(\\n        sIERC20 sERC20,\\n        address[] calldata beneficiaries,\\n        uint256[] calldata shares\\n    ) external returns (uint256);\\n\\n    function withdraw(sIERC20 sERC20, address beneficiary) external;\\n\\n    function withdrawBatch(sIERC20[] calldata sERC20s, address beneficiary) external;\\n\\n    function setBank(address bank_) external;\\n\\n    function setProtocolFee(uint256 fee_) external;\\n\\n    function bank() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function stateOf(sIERC20 sERC20) external view returns (uint256 received, uint256 totalWithdrawn);\\n\\n    function shareOf(sIERC20 sERC20, address beneficiary) external view returns (uint256);\\n\\n    function withdrawnBy(sIERC20 sERC20, address beneficiary) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x94f543cfc8ee958ab43e68999ba1b0a758d34a0e5c3448c9f13d933944f7ec35\",\"license\":\"GPL-3.0\"},\"contracts/utils/Splitter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISplitter.sol\\\";\\nimport \\\"../token/sIERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Splitter\\n * @notice Splits received sERC20s between registered beneficiaries.\\n */\\ncontract Splitter is Context, AccessControlEnumerable, ISplitter {\\n    bytes32 public constant REGISTER_ROLE = keccak256(\\\"REGISTER_ROLE\\\");\\n    uint256 public constant HUNDRED = 1e20; // 100% = 1e20 | 1% = 1e18 | 0% = 0\\n\\n    address private _bank;\\n    uint256 private _protocolFee;\\n\\n    mapping(sIERC20 => Split) _splits;\\n\\n    constructor(address bank_, uint256 protocolFee_) {\\n        require(bank_ != address(0), \\\"Splitter: bank cannot be the zero address\\\");\\n        require(protocolFee_ < HUNDRED, \\\"Splitter: protocol fee must be inferior to 100%\\\");\\n\\n        _setBank(bank_);\\n        _setProtocolFee(protocolFee_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Register an `sERC20` whose received tokens are to split between `beneficiaries` with respect to `shares`.\\n     * @dev - We do not check neither that `sERC20` is unregistered nor that it actually is an sERC20 to save gas.\\n     *      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations, are supposed to be granted REGISTER_ROLE.\\n     *      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.\\n     * @param sERC20 The sERC20 whose received tokens are to split between beneficiaries.\\n     * @param beneficiaries The addresses between which to split the received sERC20s.\\n     * @param shares The respective shares of the beneficiaries [expressed with 1e18 decimals].\\n     */\\n    function register(\\n        sIERC20 sERC20,\\n        address[] calldata beneficiaries,\\n        uint256[] calldata shares\\n    ) external override returns (uint256) {\\n        Split storage split = _splits[sERC20];\\n\\n        require(hasRole(REGISTER_ROLE, _msgSender()), \\\"Splitter: must have REGISTER_ROLE to register\\\");\\n        require(beneficiaries.length == shares.length, \\\"Splitter: beneficiaries and shares length mismatch\\\");\\n\\n        uint256 total;\\n        uint256 share;\\n        uint256 protocolFee_ = _protocolFee;\\n\\n        for (uint256 i = 0; i < shares.length; i++) {\\n            share = shares[i];\\n\\n            require(beneficiaries[i] != address(0), \\\"Splitter: beneficiary cannot be the zero address\\\");\\n            require(share != uint256(0), \\\"Splitter: share cannot be worth zero\\\");\\n            total += share;\\n        }\\n\\n        total += protocolFee_;\\n\\n        require(total < HUNDRED, \\\"Splitter: total allocation must be inferior to 100%\\\");\\n\\n        if (total > 0) {\\n            uint256 normalizedShare;\\n            uint256 normalizedTotal;\\n\\n            for (uint256 i = 0; i < beneficiaries.length; i++) {\\n                normalizedShare = (shares[i] * HUNDRED) / total;\\n                split.shares[beneficiaries[i]] = normalizedShare;\\n                normalizedTotal += normalizedShare;\\n            }\\n\\n            // avoid rounding issues\\n            split.shares[_bank] = HUNDRED - normalizedTotal;\\n        }\\n\\n        emit Register(sERC20, beneficiaries, shares, protocolFee_, total);\\n\\n        return total;\\n    }\\n\\n    /**\\n     * @notice Withdraw `sERC20` tokens due to `beneficiary`.\\n     * @dev - We do not check neither that `sERC20` is registered nor that split.shares[beneficiary] != 0.\\n     *      - Indeed, the contract already reverts in such a situation for due == withdrawn == 0.\\n     * @param sERC20 The sERC20 to withdraw.\\n     * @param beneficiary The beneficiary from whom to withdraw the due sERC20 tokens.\\n     */\\n    function withdraw(sIERC20 sERC20, address beneficiary) external override {\\n        Split storage split = _splits[sERC20];\\n\\n        uint256 due = ((sERC20.balanceOf(address(this)) + split.totalWithdrawn) * split.shares[beneficiary]) / HUNDRED;\\n        uint256 withdrawn = split.withdrawn[beneficiary];\\n        uint256 amount = due - withdrawn;\\n\\n        require(due > withdrawn, \\\"Splitter: nothing to withdraw\\\");\\n\\n        split.withdrawn[beneficiary] += amount;\\n        split.totalWithdrawn += amount;\\n\\n        sERC20.transfer(beneficiary, amount);\\n\\n        emit Withdraw(sERC20, beneficiary, amount);\\n    }\\n\\n    /**\\n     * @notice Batch withdraw `sERC20s` tokens due to `beneficiary`.\\n     * @dev - The same security remarks as above apply, plus:\\n     *      - It is up to the user not to include the same sERC20 twice in `sERC20s` - otherwise the transaction reverts.\\n     *      - We do not check the sERC20s array length as the gas limit can rise in the future.\\n     *      - Therefore, it is up to the user to make sure he does not run out of gas.\\n     * @param sERC20s The sERC20s to withdraw.\\n     * @param beneficiary The beneficiary from whom to withdraw the due sERC20s tokens.\\n     */\\n    function withdrawBatch(sIERC20[] calldata sERC20s, address beneficiary) external override {\\n        sIERC20 sERC20;\\n        uint256 due;\\n        uint256 withdrawn;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < sERC20s.length; i++) {\\n            sERC20 = sERC20s[i];\\n            Split storage split = _splits[sERC20];\\n\\n            due = ((sERC20.balanceOf(address(this)) + split.totalWithdrawn) * split.shares[beneficiary]) / HUNDRED;\\n            withdrawn = split.withdrawn[beneficiary];\\n            amount = due - withdrawn;\\n\\n            require(due > withdrawn, \\\"Splitter: nothing to withdraw\\\");\\n\\n            split.withdrawn[beneficiary] += amount;\\n            split.totalWithdrawn += amount;\\n\\n            sERC20.transfer(beneficiary, amount);\\n\\n            emit Withdraw(sERC20, beneficiary, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the splitter's bank.\\n     * @param bank_ The bank to set.\\n     */\\n    function setBank(address bank_) external override {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Splitter: must have DEFAULT_ADMIN_ROLE to set bank\\\");\\n        require(bank_ != address(0), \\\"Splitter: bank cannot be the zero address\\\");\\n\\n        _setBank(bank_);\\n    }\\n\\n    /**\\n     * @notice Set the splitter's fee.\\n     * @param fee_ The fee to set [expressed with 1e18 decimals].\\n     */\\n    function setProtocolFee(uint256 fee_) external override {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Splitter: must have DEFAULT_ADMIN_ROLE to set protocol fee\\\");\\n        require(fee_ < HUNDRED, \\\"Splitter: protocol fee must be inferior to 100%\\\");\\n\\n        _setProtocolFee(fee_);\\n    }\\n\\n    /**\\n     * @notice Return the splitter's bank.\\n     */\\n    function bank() public view override returns (address) {\\n        return _bank;\\n    }\\n\\n    /**\\n     * @notice Return the splitter's fee.\\n     */\\n    function protocolFee() public view override returns (uint256) {\\n        return _protocolFee;\\n    }\\n\\n    /**\\n     * @notice Return the amount of `sERC20` tokens received and whithdrawn.\\n     */\\n    function stateOf(sIERC20 sERC20) public view override returns (uint256 received, uint256 totalWithdrawn) {\\n        Split storage split = _splits[sERC20];\\n\\n        totalWithdrawn = split.totalWithdrawn;\\n        received = sERC20.balanceOf(address(this)) + totalWithdrawn;\\n    }\\n\\n    /**\\n     * @notice Return the share of `beneficiary` over the received `sERC20` tokens [expressed with 1e18 decimals].\\n     */\\n    function shareOf(sIERC20 sERC20, address beneficiary) public view override returns (uint256) {\\n        return _splits[sERC20].shares[beneficiary];\\n    }\\n\\n    /**\\n     * @notice Return the amount of `sERC20` tokens already withdrawn by `beneficiary`.\\n     */\\n    function withdrawnBy(sIERC20 sERC20, address beneficiary) public view override returns (uint256) {\\n        return _splits[sERC20].withdrawn[beneficiary];\\n    }\\n\\n    function _setBank(address bank_) private {\\n        _bank = bank_;\\n\\n        emit SetBank(bank_);\\n    }\\n\\n    function _setProtocolFee(uint256 protocolFee_) private {\\n        _protocolFee = protocolFee_;\\n\\n        emit SetProtocolFee(protocolFee_);\\n    }\\n}\\n\",\"keccak256\":\"0x1808dc925b1a359004f522e4a7d729680f52f84f741935f7d2ca0c862aeb5cb4\",\"license\":\"GPL-3.0\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/Spectres.sol\\\";\\nimport \\\"../token/sIERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IVault {\\n    event Fractionalize(IERC721 indexed collection, uint256 indexed tokenId, uint256 indexed id, sIERC20 sERC20, address broker);\\n    event Unlock(uint256 indexed id, address recipient);\\n    event Escape(IERC721 collection, uint256 tokenId, address recipient);\\n\\n    function fractionalize(\\n        IERC721 collection,\\n        uint256 tokenId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 cap,\\n        address admin,\\n        address broker\\n    ) external returns (uint256);\\n\\n    function unlock(\\n        uint256 id,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    function unlock(\\n        sIERC20 sERC20,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    function escape(\\n        IERC721 collection,\\n        uint256 tokenId,\\n        address recipient,\\n        bytes memory data\\n    ) external;\\n\\n    function setUnavailableURI(string memory unavailableURI_) external;\\n\\n    function setUnlockedURI(string memory unlockedURI_) external;\\n\\n    function onERC20Transferred(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function sERC20Base() external view returns (address);\\n\\n    function unavailableURI() external view returns (string memory);\\n\\n    function unlockedURI() external view returns (string memory);\\n\\n    function isLocked(IERC721 collection, uint256 tokenId) external view returns (bool);\\n\\n    function tokenTypeOf(IERC721 collection, uint256 tokenId) external view returns (uint256);\\n\\n    function spectreOf(uint256 id) external view returns (Spectres.Spectre memory);\\n\\n    function spectreOf(sIERC20 sERC20) external view returns (Spectres.Spectre memory);\\n\\n    function sERC20Of(uint256 id) external pure returns (sIERC20);\\n}\\n\",\"keccak256\":\"0x621c606282bc397425be5b3931693cd61ecc5f6d4154fe0531ad986a292e80d9\",\"license\":\"GPL-3.0\"},\"contracts/vault/libraries/Spectres.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary Spectres {\\n    enum State {\\n        Null,\\n        Locked,\\n        Unlocked\\n    }\\n\\n    struct Spectre {\\n        State state;\\n        IERC721 collection;\\n        uint256 tokenId;\\n        address broker;\\n    }\\n}\\n\",\"keccak256\":\"0x5b9c9658375bbaf1060c6276d06453f3a7497c50501cba763ecbd8ff5d0da1c0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620021493803806200214983398101604081905262000034916200032f565b6001600160a01b038216620000a25760405162461bcd60e51b815260206004820152602960248201527f53706c69747465723a2062616e6b2063616e6e6f7420626520746865207a65726044820152686f206164647265737360b81b60648201526084015b60405180910390fd5b68056bc75e2d631000008110620001145760405162461bcd60e51b815260206004820152602f60248201527f53706c69747465723a2070726f746f636f6c20666565206d757374206265206960448201526e6e666572696f7220746f203130302560881b606482015260840162000099565b6200011f826200013f565b6200012a8162000194565b62000137600033620001ca565b50506200036b565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067906020015b60405180910390a150565b60038190556040518181527fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b19060200162000189565b620001e182826200020d60201b620011191760201c565b600082815260016020908152604090912062000208918390620011276200021d821b17901c565b505050565b6200021982826200023d565b5050565b600062000234836001600160a01b038416620002dd565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000219576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002993390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620003265750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000237565b50600062000237565b600080604083850312156200034357600080fd5b82516001600160a01b03811681146200035b57600080fd5b6020939093015192949293505050565b611dce806200037b6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c8063787dce3d116100d8578063b0e21e8a1161008c578063eb98edef11610066578063eb98edef146103a4578063f85fc0ab146103b7578063f940e385146103c757600080fd5b8063b0e21e8a14610376578063ca15c8731461037e578063d547741f1461039157600080fd5b806391d14854116100bd57806391d14854146102fa578063a217fddf14610331578063acd5d4581461033957600080fd5b8063787dce3d146102d45780639010d07c146102e757600080fd5b806336568abe1161012f57806350caeff51161011457806350caeff51461027557806374f533171461028857806376cdb03b146102af57600080fd5b806336568abe1461023a57806345b4903a1461024d57600080fd5b8063133f52a311610160578063133f52a3146101b9578063248a9ca3146102045780632f2ff15d1461022757600080fd5b806301ffc9a71461017c578063090d23b9146101a4575b600080fd5b61018f61018a3660046118a4565b6103da565b60405190151581526020015b60405180910390f35b6101b76101b23660046118fb565b610436565b005b6101f66101c7366004611918565b6001600160a01b0391821660009081526004602090815260408083209390941682526002909201909152205490565b60405190815260200161019b565b6101f6610212366004611951565b60009081526020819052604090206001015490565b6101b761023536600461196a565b610540565b6101b761024836600461196a565b610567565b61026061025b3660046118fb565b610589565b6040805192835260208301919091520161019b565b6101b76102833660046119db565b61062d565b6101f67fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe81565b6002546001600160a01b03165b6040516001600160a01b03909116815260200161019b565b6101b76102e2366004611951565b6108fb565b6102bc6102f5366004611a32565b6109ff565b61018f61030836600461196a565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f6600081565b6101f6610347366004611918565b6001600160a01b0391821660009081526004602090815260408083209390941682526001909201909152205490565b6003546101f6565b6101f661038c366004611951565b610a1e565b6101b761039f36600461196a565b610a35565b6101f66103b2366004611a54565b610a3f565b6101f668056bc75e2d6310000081565b6101b76103d5366004611918565b610ea0565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f00000000000000000000000000000000000000000000000000000000148061043057506104308261113c565b92915050565b610441600033610308565b6104b85760405162461bcd60e51b815260206004820152603260248201527f53706c69747465723a206d75737420686176652044454641554c545f41444d4960448201527f4e5f524f4c4520746f207365742062616e6b000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b0381166105345760405162461bcd60e51b815260206004820152602960248201527f53706c69747465723a2062616e6b2063616e6e6f7420626520746865207a657260448201527f6f2061646472657373000000000000000000000000000000000000000000000060648201526084016104af565b61053d816111d3565b50565b61054a8282611240565b60008281526001602052604090206105629082611127565b505050565b6105718282611266565b600082815260016020526040902061056290826112ee565b6001600160a01b0381166000818152600460208190526040808320805491516370a0823160e01b8152309381019390935292939092918391906370a082319060240160206040518083038186803b1580156105e357600080fd5b505afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190611ad7565b6106259190611b06565b925050915091565b60008060008060005b868110156108f15787878281811061065057610650611b1e565b905060200201602081019061066591906118fb565b6001600160a01b038181166000818152600460208181526040808420958d168452600186019091529182902054845492516370a0823160e01b81523092810192909252949950929368056bc75e2d63100000939092906370a082319060240160206040518083038186803b1580156106dc57600080fd5b505afa1580156106f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107149190611ad7565b61071e9190611b06565b6107289190611b34565b6107329190611b53565b6001600160a01b0388166000908152600283016020526040902054909550935061075c8486611b75565b92508385116107ad5760405162461bcd60e51b815260206004820152601d60248201527f53706c69747465723a206e6f7468696e6720746f20776974686472617700000060448201526064016104af565b6001600160a01b0387166000908152600282016020526040812080548592906107d7908490611b06565b90915550508054839082906000906107f0908490611b06565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820185905287169063a9059cbb90604401602060405180830381600087803b15801561085857600080fd5b505af115801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190611b8c565b50866001600160a01b0316866001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb856040516108d691815260200190565b60405180910390a350806108e981611bae565b915050610636565b5050505050505050565b610906600033610308565b6109785760405162461bcd60e51b815260206004820152603a60248201527f53706c69747465723a206d75737420686176652044454641554c545f41444d4960448201527f4e5f524f4c4520746f207365742070726f746f636f6c2066656500000000000060648201526084016104af565b68056bc75e2d6310000081106109f65760405162461bcd60e51b815260206004820152602f60248201527f53706c69747465723a2070726f746f636f6c20666565206d757374206265206960448201527f6e666572696f7220746f2031303025000000000000000000000000000000000060648201526084016104af565b61053d81611303565b6000828152600160205260408120610a179083611338565b9392505050565b600081815260016020526040812061043090611344565b610571828261134e565b6001600160a01b0385166000908152600460205260408120610a817fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe33610308565b610af35760405162461bcd60e51b815260206004820152602d60248201527f53706c69747465723a206d75737420686176652052454749535445525f524f4c60448201527f4520746f2072656769737465720000000000000000000000000000000000000060648201526084016104af565b848314610b685760405162461bcd60e51b815260206004820152603260248201527f53706c69747465723a2062656e6566696369617269657320616e64207368617260448201527f6573206c656e677468206d69736d61746368000000000000000000000000000060648201526084016104af565b6003546000908190815b86811015610cd457878782818110610b8c57610b8c611b1e565b90506020020135925060006001600160a01b03168a8a83818110610bb257610bb2611b1e565b9050602002016020810190610bc791906118fb565b6001600160a01b03161415610c445760405162461bcd60e51b815260206004820152603060248201527f53706c69747465723a2062656e65666963696172792063616e6e6f742062652060448201527f746865207a65726f20616464726573730000000000000000000000000000000060648201526084016104af565b82610cb65760405162461bcd60e51b8152602060048201526024808201527f53706c69747465723a2073686172652063616e6e6f7420626520776f7274682060448201527f7a65726f0000000000000000000000000000000000000000000000000000000060648201526084016104af565b610cc08385611b06565b935080610ccc81611bae565b915050610b72565b50610cdf8184611b06565b925068056bc75e2d631000008310610d5f5760405162461bcd60e51b815260206004820152603360248201527f53706c69747465723a20746f74616c20616c6c6f636174696f6e206d7573742060448201527f626520696e666572696f7220746f20313030250000000000000000000000000060648201526084016104af565b8215610e475760008060005b8a811015610e13578568056bc75e2d631000008b8b84818110610d9057610d90611b1e565b90506020020135610da19190611b34565b610dab9190611b53565b9250828760010160008e8e85818110610dc657610dc6611b1e565b9050602002016020810190610ddb91906118fb565b6001600160a01b03168152602081019190915260400160002055610dff8383611b06565b915080610e0b81611bae565b915050610d6b565b50610e278168056bc75e2d63100000611b75565b6002546001600160a01b0316600090815260018801602052604090205550505b896001600160a01b03167fb08c7b392055c63c0d654c6c6d3d34befd2de7b7cc27fbd79053b17365e653f38a8a8a8a8689604051610e8a96959493929190611bc9565b60405180910390a2509098975050505050505050565b6001600160a01b03828116600081815260046020818152604080842095871684526001860190915280832054855491516370a0823160e01b81523093810193909352929368056bc75e2d6310000093926370a082319060240160206040518083038186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190611ad7565b610f539190611b06565b610f5d9190611b34565b610f679190611b53565b6001600160a01b0384166000908152600284016020526040812054919250610f8f8284611b75565b9050818311610fe05760405162461bcd60e51b815260206004820152601d60248201527f53706c69747465723a206e6f7468696e6720746f20776974686472617700000060448201526064016104af565b6001600160a01b03851660009081526002850160205260408120805483929061100a908490611b06565b9091555050835481908590600090611023908490611b06565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301526024820183905287169063a9059cbb90604401602060405180830381600087803b15801561108b57600080fd5b505af115801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190611b8c565b50846001600160a01b0316866001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360405161110991815260200190565b60405180910390a3505050505050565b6111238282611374565b5050565b6000610a17836001600160a01b038416611412565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061043057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610430565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067906020015b60405180910390a150565b60008281526020819052604090206001015461125c8133611461565b6105628383611374565b6001600160a01b03811633146112e45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104af565b61112382826114df565b6000610a17836001600160a01b03841661155e565b60038190556040518181527fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b190602001611235565b6000610a178383611651565b6000610430825490565b60008281526020819052604090206001015461136a8133611461565b61056283836114df565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16611123576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556113ce3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461145957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610430565b506000610430565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166111235761149d816001600160a01b0316601461167b565b6114a883602061167b565b6040516020016114b9929190611ca1565b60408051601f198184030181529082905262461bcd60e51b82526104af91600401611d22565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615611123576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611647576000611582600183611b75565b855490915060009061159690600190611b75565b90508181146115fb5760008660000182815481106115b6576115b6611b1e565b90600052602060002001549050808760000184815481106115d9576115d9611b1e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061160c5761160c611d55565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610430565b6000915050610430565b600082600001828154811061166857611668611b1e565b9060005260206000200154905092915050565b6060600061168a836002611b34565b611695906002611b06565b67ffffffffffffffff8111156116ad576116ad611d6b565b6040519080825280601f01601f1916602001820160405280156116d7576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061170e5761170e611b1e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061177157611771611b1e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006117ad846002611b34565b6117b8906001611b06565b90505b6001811115611855577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106117f9576117f9611b1e565b1a60f81b82828151811061180f5761180f611b1e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361184e81611d81565b90506117bb565b508315610a175760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104af565b6000602082840312156118b657600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a1757600080fd5b6001600160a01b038116811461053d57600080fd5b60006020828403121561190d57600080fd5b8135610a17816118e6565b6000806040838503121561192b57600080fd5b8235611936816118e6565b91506020830135611946816118e6565b809150509250929050565b60006020828403121561196357600080fd5b5035919050565b6000806040838503121561197d57600080fd5b823591506020830135611946816118e6565b60008083601f8401126119a157600080fd5b50813567ffffffffffffffff8111156119b957600080fd5b6020830191508360208260051b85010111156119d457600080fd5b9250929050565b6000806000604084860312156119f057600080fd5b833567ffffffffffffffff811115611a0757600080fd5b611a138682870161198f565b9094509250506020840135611a27816118e6565b809150509250925092565b60008060408385031215611a4557600080fd5b50508035926020909101359150565b600080600080600060608688031215611a6c57600080fd5b8535611a77816118e6565b9450602086013567ffffffffffffffff80821115611a9457600080fd5b611aa089838a0161198f565b90965094506040880135915080821115611ab957600080fd5b50611ac68882890161198f565b969995985093965092949392505050565b600060208284031215611ae957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b1957611b19611af0565b500190565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611b4e57611b4e611af0565b500290565b600082611b7057634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611b8757611b87611af0565b500390565b600060208284031215611b9e57600080fd5b81518015158114610a1757600080fd5b6000600019821415611bc257611bc2611af0565b5060010190565b6080808252810186905260008760a08301825b89811015611c0c578235611bef816118e6565b6001600160a01b0316825260209283019290910190600101611bdc565b5083810360208501528681527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff871115611c4557600080fd5b8660051b9150818860208301376000910160200190815260408301949094525060600152949350505050565b60005b83811015611c8c578181015183820152602001611c74565b83811115611c9b576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611cd9816017850160208801611c71565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611d16816028840160208801611c71565b01602801949350505050565b6020815260008251806020840152611d41816040850160208701611c71565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600081611d9057611d90611af0565b50600019019056fea26469706673582212202e1ed22af372298a8ad2458907646888048535059c33e323fdfff9cb756b9d1c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c8063787dce3d116100d8578063b0e21e8a1161008c578063eb98edef11610066578063eb98edef146103a4578063f85fc0ab146103b7578063f940e385146103c757600080fd5b8063b0e21e8a14610376578063ca15c8731461037e578063d547741f1461039157600080fd5b806391d14854116100bd57806391d14854146102fa578063a217fddf14610331578063acd5d4581461033957600080fd5b8063787dce3d146102d45780639010d07c146102e757600080fd5b806336568abe1161012f57806350caeff51161011457806350caeff51461027557806374f533171461028857806376cdb03b146102af57600080fd5b806336568abe1461023a57806345b4903a1461024d57600080fd5b8063133f52a311610160578063133f52a3146101b9578063248a9ca3146102045780632f2ff15d1461022757600080fd5b806301ffc9a71461017c578063090d23b9146101a4575b600080fd5b61018f61018a3660046118a4565b6103da565b60405190151581526020015b60405180910390f35b6101b76101b23660046118fb565b610436565b005b6101f66101c7366004611918565b6001600160a01b0391821660009081526004602090815260408083209390941682526002909201909152205490565b60405190815260200161019b565b6101f6610212366004611951565b60009081526020819052604090206001015490565b6101b761023536600461196a565b610540565b6101b761024836600461196a565b610567565b61026061025b3660046118fb565b610589565b6040805192835260208301919091520161019b565b6101b76102833660046119db565b61062d565b6101f67fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe81565b6002546001600160a01b03165b6040516001600160a01b03909116815260200161019b565b6101b76102e2366004611951565b6108fb565b6102bc6102f5366004611a32565b6109ff565b61018f61030836600461196a565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f6600081565b6101f6610347366004611918565b6001600160a01b0391821660009081526004602090815260408083209390941682526001909201909152205490565b6003546101f6565b6101f661038c366004611951565b610a1e565b6101b761039f36600461196a565b610a35565b6101f66103b2366004611a54565b610a3f565b6101f668056bc75e2d6310000081565b6101b76103d5366004611918565b610ea0565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f00000000000000000000000000000000000000000000000000000000148061043057506104308261113c565b92915050565b610441600033610308565b6104b85760405162461bcd60e51b815260206004820152603260248201527f53706c69747465723a206d75737420686176652044454641554c545f41444d4960448201527f4e5f524f4c4520746f207365742062616e6b000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b0381166105345760405162461bcd60e51b815260206004820152602960248201527f53706c69747465723a2062616e6b2063616e6e6f7420626520746865207a657260448201527f6f2061646472657373000000000000000000000000000000000000000000000060648201526084016104af565b61053d816111d3565b50565b61054a8282611240565b60008281526001602052604090206105629082611127565b505050565b6105718282611266565b600082815260016020526040902061056290826112ee565b6001600160a01b0381166000818152600460208190526040808320805491516370a0823160e01b8152309381019390935292939092918391906370a082319060240160206040518083038186803b1580156105e357600080fd5b505afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190611ad7565b6106259190611b06565b925050915091565b60008060008060005b868110156108f15787878281811061065057610650611b1e565b905060200201602081019061066591906118fb565b6001600160a01b038181166000818152600460208181526040808420958d168452600186019091529182902054845492516370a0823160e01b81523092810192909252949950929368056bc75e2d63100000939092906370a082319060240160206040518083038186803b1580156106dc57600080fd5b505afa1580156106f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107149190611ad7565b61071e9190611b06565b6107289190611b34565b6107329190611b53565b6001600160a01b0388166000908152600283016020526040902054909550935061075c8486611b75565b92508385116107ad5760405162461bcd60e51b815260206004820152601d60248201527f53706c69747465723a206e6f7468696e6720746f20776974686472617700000060448201526064016104af565b6001600160a01b0387166000908152600282016020526040812080548592906107d7908490611b06565b90915550508054839082906000906107f0908490611b06565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820185905287169063a9059cbb90604401602060405180830381600087803b15801561085857600080fd5b505af115801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190611b8c565b50866001600160a01b0316866001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb856040516108d691815260200190565b60405180910390a350806108e981611bae565b915050610636565b5050505050505050565b610906600033610308565b6109785760405162461bcd60e51b815260206004820152603a60248201527f53706c69747465723a206d75737420686176652044454641554c545f41444d4960448201527f4e5f524f4c4520746f207365742070726f746f636f6c2066656500000000000060648201526084016104af565b68056bc75e2d6310000081106109f65760405162461bcd60e51b815260206004820152602f60248201527f53706c69747465723a2070726f746f636f6c20666565206d757374206265206960448201527f6e666572696f7220746f2031303025000000000000000000000000000000000060648201526084016104af565b61053d81611303565b6000828152600160205260408120610a179083611338565b9392505050565b600081815260016020526040812061043090611344565b610571828261134e565b6001600160a01b0385166000908152600460205260408120610a817fd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe33610308565b610af35760405162461bcd60e51b815260206004820152602d60248201527f53706c69747465723a206d75737420686176652052454749535445525f524f4c60448201527f4520746f2072656769737465720000000000000000000000000000000000000060648201526084016104af565b848314610b685760405162461bcd60e51b815260206004820152603260248201527f53706c69747465723a2062656e6566696369617269657320616e64207368617260448201527f6573206c656e677468206d69736d61746368000000000000000000000000000060648201526084016104af565b6003546000908190815b86811015610cd457878782818110610b8c57610b8c611b1e565b90506020020135925060006001600160a01b03168a8a83818110610bb257610bb2611b1e565b9050602002016020810190610bc791906118fb565b6001600160a01b03161415610c445760405162461bcd60e51b815260206004820152603060248201527f53706c69747465723a2062656e65666963696172792063616e6e6f742062652060448201527f746865207a65726f20616464726573730000000000000000000000000000000060648201526084016104af565b82610cb65760405162461bcd60e51b8152602060048201526024808201527f53706c69747465723a2073686172652063616e6e6f7420626520776f7274682060448201527f7a65726f0000000000000000000000000000000000000000000000000000000060648201526084016104af565b610cc08385611b06565b935080610ccc81611bae565b915050610b72565b50610cdf8184611b06565b925068056bc75e2d631000008310610d5f5760405162461bcd60e51b815260206004820152603360248201527f53706c69747465723a20746f74616c20616c6c6f636174696f6e206d7573742060448201527f626520696e666572696f7220746f20313030250000000000000000000000000060648201526084016104af565b8215610e475760008060005b8a811015610e13578568056bc75e2d631000008b8b84818110610d9057610d90611b1e565b90506020020135610da19190611b34565b610dab9190611b53565b9250828760010160008e8e85818110610dc657610dc6611b1e565b9050602002016020810190610ddb91906118fb565b6001600160a01b03168152602081019190915260400160002055610dff8383611b06565b915080610e0b81611bae565b915050610d6b565b50610e278168056bc75e2d63100000611b75565b6002546001600160a01b0316600090815260018801602052604090205550505b896001600160a01b03167fb08c7b392055c63c0d654c6c6d3d34befd2de7b7cc27fbd79053b17365e653f38a8a8a8a8689604051610e8a96959493929190611bc9565b60405180910390a2509098975050505050505050565b6001600160a01b03828116600081815260046020818152604080842095871684526001860190915280832054855491516370a0823160e01b81523093810193909352929368056bc75e2d6310000093926370a082319060240160206040518083038186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190611ad7565b610f539190611b06565b610f5d9190611b34565b610f679190611b53565b6001600160a01b0384166000908152600284016020526040812054919250610f8f8284611b75565b9050818311610fe05760405162461bcd60e51b815260206004820152601d60248201527f53706c69747465723a206e6f7468696e6720746f20776974686472617700000060448201526064016104af565b6001600160a01b03851660009081526002850160205260408120805483929061100a908490611b06565b9091555050835481908590600090611023908490611b06565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301526024820183905287169063a9059cbb90604401602060405180830381600087803b15801561108b57600080fd5b505af115801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190611b8c565b50846001600160a01b0316866001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360405161110991815260200190565b60405180910390a3505050505050565b6111238282611374565b5050565b6000610a17836001600160a01b038416611412565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061043057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610430565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb261244067906020015b60405180910390a150565b60008281526020819052604090206001015461125c8133611461565b6105628383611374565b6001600160a01b03811633146112e45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104af565b61112382826114df565b6000610a17836001600160a01b03841661155e565b60038190556040518181527fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b190602001611235565b6000610a178383611651565b6000610430825490565b60008281526020819052604090206001015461136a8133611461565b61056283836114df565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16611123576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556113ce3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461145957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610430565b506000610430565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166111235761149d816001600160a01b0316601461167b565b6114a883602061167b565b6040516020016114b9929190611ca1565b60408051601f198184030181529082905262461bcd60e51b82526104af91600401611d22565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615611123576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611647576000611582600183611b75565b855490915060009061159690600190611b75565b90508181146115fb5760008660000182815481106115b6576115b6611b1e565b90600052602060002001549050808760000184815481106115d9576115d9611b1e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061160c5761160c611d55565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610430565b6000915050610430565b600082600001828154811061166857611668611b1e565b9060005260206000200154905092915050565b6060600061168a836002611b34565b611695906002611b06565b67ffffffffffffffff8111156116ad576116ad611d6b565b6040519080825280601f01601f1916602001820160405280156116d7576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061170e5761170e611b1e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061177157611771611b1e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006117ad846002611b34565b6117b8906001611b06565b90505b6001811115611855577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106117f9576117f9611b1e565b1a60f81b82828151811061180f5761180f611b1e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361184e81611d81565b90506117bb565b508315610a175760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104af565b6000602082840312156118b657600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a1757600080fd5b6001600160a01b038116811461053d57600080fd5b60006020828403121561190d57600080fd5b8135610a17816118e6565b6000806040838503121561192b57600080fd5b8235611936816118e6565b91506020830135611946816118e6565b809150509250929050565b60006020828403121561196357600080fd5b5035919050565b6000806040838503121561197d57600080fd5b823591506020830135611946816118e6565b60008083601f8401126119a157600080fd5b50813567ffffffffffffffff8111156119b957600080fd5b6020830191508360208260051b85010111156119d457600080fd5b9250929050565b6000806000604084860312156119f057600080fd5b833567ffffffffffffffff811115611a0757600080fd5b611a138682870161198f565b9094509250506020840135611a27816118e6565b809150509250925092565b60008060408385031215611a4557600080fd5b50508035926020909101359150565b600080600080600060608688031215611a6c57600080fd5b8535611a77816118e6565b9450602086013567ffffffffffffffff80821115611a9457600080fd5b611aa089838a0161198f565b90965094506040880135915080821115611ab957600080fd5b50611ac68882890161198f565b969995985093965092949392505050565b600060208284031215611ae957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b1957611b19611af0565b500190565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611b4e57611b4e611af0565b500290565b600082611b7057634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611b8757611b87611af0565b500390565b600060208284031215611b9e57600080fd5b81518015158114610a1757600080fd5b6000600019821415611bc257611bc2611af0565b5060010190565b6080808252810186905260008760a08301825b89811015611c0c578235611bef816118e6565b6001600160a01b0316825260209283019290910190600101611bdc565b5083810360208501528681527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff871115611c4557600080fd5b8660051b9150818860208301376000910160200190815260408301949094525060600152949350505050565b60005b83811015611c8c578181015183820152602001611c74565b83811115611c9b576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611cd9816017850160208801611c71565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611d16816028840160208801611c71565b01602801949350505050565b6020815260008251806020840152611d41816040850160208701611c71565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600081611d9057611d90611af0565b50600019019056fea26469706673582212202e1ed22af372298a8ad2458907646888048535059c33e323fdfff9cb756b9d1c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "register(address,address[],uint256[])": {
        "details": "- We do not check neither that `sERC20` is unregistered nor that it actually is an sERC20 to save gas.      - Indeed, only trusted templates, registering sERC20s out of actual NFT fractionalizations, are supposed to be granted REGISTER_ROLE.      - Other parameters are checked because they are passed by users and forwarded unchecked by templates.",
        "params": {
          "beneficiaries": "The addresses between which to split the received sERC20s.",
          "sERC20": "The sERC20 whose received tokens are to split between beneficiaries.",
          "shares": "The respective shares of the beneficiaries [expressed with 1e18 decimals]."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "setBank(address)": {
        "params": {
          "bank_": "The bank to set."
        }
      },
      "setProtocolFee(uint256)": {
        "params": {
          "fee_": "The fee to set [expressed with 1e18 decimals]."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdraw(address,address)": {
        "details": "- We do not check neither that `sERC20` is registered nor that split.shares[beneficiary] != 0.      - Indeed, the contract already reverts in such a situation for due == withdrawn == 0.",
        "params": {
          "beneficiary": "The beneficiary from whom to withdraw the due sERC20 tokens.",
          "sERC20": "The sERC20 to withdraw."
        }
      },
      "withdrawBatch(address[],address)": {
        "details": "- The same security remarks as above apply, plus:      - It is up to the user not to include the same sERC20 twice in `sERC20s` - otherwise the transaction reverts.      - We do not check the sERC20s array length as the gas limit can rise in the future.      - Therefore, it is up to the user to make sure he does not run out of gas.",
        "params": {
          "beneficiary": "The beneficiary from whom to withdraw the due sERC20s tokens.",
          "sERC20s": "The sERC20s to withdraw."
        }
      }
    },
    "title": "Splitter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bank()": {
        "notice": "Return the splitter's bank."
      },
      "protocolFee()": {
        "notice": "Return the splitter's fee."
      },
      "register(address,address[],uint256[])": {
        "notice": "Register an `sERC20` whose received tokens are to split between `beneficiaries` with respect to `shares`."
      },
      "setBank(address)": {
        "notice": "Set the splitter's bank."
      },
      "setProtocolFee(uint256)": {
        "notice": "Set the splitter's fee."
      },
      "shareOf(address,address)": {
        "notice": "Return the share of `beneficiary` over the received `sERC20` tokens [expressed with 1e18 decimals]."
      },
      "stateOf(address)": {
        "notice": "Return the amount of `sERC20` tokens received and whithdrawn."
      },
      "withdraw(address,address)": {
        "notice": "Withdraw `sERC20` tokens due to `beneficiary`."
      },
      "withdrawBatch(address[],address)": {
        "notice": "Batch withdraw `sERC20s` tokens due to `beneficiary`."
      },
      "withdrawnBy(address,address)": {
        "notice": "Return the amount of `sERC20` tokens already withdrawn by `beneficiary`."
      }
    },
    "notice": "Splits received sERC20s between registered beneficiaries.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3162,
        "contract": "contracts/utils/Splitter.sol:Splitter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3157_storage)"
      },
      {
        "astId": 3463,
        "contract": "contracts/utils/Splitter.sol:Splitter",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)6836_storage)"
      },
      {
        "astId": 13364,
        "contract": "contracts/utils/Splitter.sol:Splitter",
        "label": "_bank",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13366,
        "contract": "contracts/utils/Splitter.sol:Splitter",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13372,
        "contract": "contracts/utils/Splitter.sol:Splitter",
        "label": "_splits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(sIERC20)13213,t_struct(Split)13227_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(sIERC20)13213": {
        "encoding": "inplace",
        "label": "contract sIERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)6836_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6836_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3157_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3157_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(sIERC20)13213,t_struct(Split)13227_storage)": {
        "encoding": "mapping",
        "key": "t_contract(sIERC20)13213",
        "label": "mapping(contract sIERC20 => struct ISplitter.Split)",
        "numberOfBytes": "32",
        "value": "t_struct(Split)13227_storage"
      },
      "t_struct(AddressSet)6836_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6835,
            "contract": "contracts/utils/Splitter.sol:Splitter",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6535_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)3157_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3154,
            "contract": "contracts/utils/Splitter.sol:Splitter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3156,
            "contract": "contracts/utils/Splitter.sol:Splitter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6535_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6530,
            "contract": "contracts/utils/Splitter.sol:Splitter",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6534,
            "contract": "contracts/utils/Splitter.sol:Splitter",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Split)13227_storage": {
        "encoding": "inplace",
        "label": "struct ISplitter.Split",
        "members": [
          {
            "astId": 13218,
            "contract": "contracts/utils/Splitter.sol:Splitter",
            "label": "totalWithdrawn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13222,
            "contract": "contracts/utils/Splitter.sol:Splitter",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 13226,
            "contract": "contracts/utils/Splitter.sol:Splitter",
            "label": "withdrawn",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}